{"transpiled":true,"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"Wormhole","functions":[{"name":"guardian_set_expired","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHxgAAwACgEgdAIBIgEgELgiASAABJQAAAFIlAAAAdi4EAAGASSgCAAIEgEknAgMEATsNAAIAAygAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJLHgIAAgAeAgADADM4AAIAAwAEJAIABAAAAJolAAACdBwMAQIAJwIBAAAtCAEDJwIEBAQAEAEEAScDAwQBACgDAgQtDAQFLQ4BBQAoBQIFLQ4BBQAoBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAQAQYBJwMFBAEAKAUCBi0MBgctDgEHACgHAgctDgEHACgHAgctDgEHACgHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuCoBFAAUtCAEGAAABAgEuCoBEAAYnAgcAFycCCAQJLQgACS0MBAotDAMLLQwFDC0MBg0tDAcOABAACAAlAAAChi0EAAAnAgcECC0IAAgtDAQJLQwDCi0MBQstDAYMLQwCDQAQAAcAJQAAAoYtBAAALQ0GAgsoAAKARAAHJAIABwAAAdYnAggEADwJAQgnAgIEBy0IAActDAQILQwDCS0MBQotDAYLABAAAgAlAAADry0EAAAtDQMCASgAAoBHAAQtDQQDCjgDAQILKAACgEQAASQCAAEAAAInJQAABMIvDAADAAEcDAEDBRwMAwIAHAwCAQUeAgACBgw4AQIDLQwDASYoAIAEBHgADQAAAIAEgAMkAIADAAACcyoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJiUAAAJLLQ0DBi0NBAcLKAAHgEQACCQCAAgAAAKsJwIJBAA8CQEJCygABoBDAAckAgAHAAADOyMAAALBLQ0BBi0NAgctDQMILQ0ECQ0oAAiAQwAKJAIACgAAAuYlAAAE1C4EAAaAAygAgAQEAAQlAAAE5i4IgAUACgAoCgILADgLCAwtDgUMASgACIBHAAUOOAgFBiQCAAYAAAMmJQAABXQtDgoBLQ4HAi0OBQMtDgkEIwAAA64nAgYEBy0IAActDAEILQwCCS0MAwotDAQLABAABgAlAAADry0EAAAtDQEGLQ0CBy0NBAguBAAGgAMoAIAEBAAEJQAABOYuCIAFAAkAKAkCCgEoAAqARQALLQ4FCy0OCQEtDgcCLgqARwADLQ4IBCMAAAOuJiUAAAJLLgiARQAFIwAAA78NKAAFgEMABiQCAAYAAAQvIwAAA9QtDQEFLQ0CBi0NAwctDQQILQ0GCQAoCQIJLQ4JBicCCQQELQgBCicCCwQFABABCwEnAwoEAQAoBgILJwIMBAQAKAoCDT8PAAsADS0OBQEtDgoCLQ4HAy0OCAQmLQ0DBgw4BQYHASgABYBHAAYkAgAHAAAETSMAAAS5LQ0BBy0NAggtDQMJLQ0ECgAoCAIMADgMBQ0tDQ0LACgHAg0AOA0FDi0NDgwAOAsMDS4EAAiAAygAgAQEAAUlAAAE5i4IgAUACwAoCwIMADgMBQ4tDg0OLQ4HAS0OCwItDgkDLQ4KBCMAAAS5LQwGBSMAAAO/KgEAAQUC3G4ngHYSnTwBAQImKgEAAQXFa8RaDhAAAjwBAQImLgGAA4AGCwCABgACgAckAIAHAAAFASMAAAUMLgCAA4AFIwAABXMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAFXy4BgAqACC4CgAiACwEAgAoAAoAKAQCACwACgAsjAAAFLigBgAUEAAEDAIAGAAKABiMAAAVzJioBAAEFRafKcRlB5BU8AQECJg==","debug_symbols":"7Z3bbuM4DIbfJde9ECWKEvsqi8Wgh3QQoGiLHhZYFH33dbK17MaMBVOZAoV5M2im/EPqMyVKsiu/b26312+/f+0e7h5fNpd/vW/uH2+uXnePD92n94+LzfXz7v5+9/vX+L83bv8P+HAQvDxdPew/v7xePb9uLiH46C4224fb/c8hx+5L7nb3280l08fF1Nx531s79INxEIyRCD6NkZIrxgSCcY4ufhrn6GFs/PdFF30+S/TMvTUAf1/04TzsYy7sc4U9xJR6YwphPnqO3DeVKeBx9Ahnjh78l+gPPvjP+4go+UCG0F9njsN13v8oeKAwZNCAFWKUrDP1xpyLbYAk2HqHfW56R0PsIfx/ESJ/d/CRSjy+Enxi7NM/MQ/f7LMUR0j9NcVRsnnJ1Hvov9j7URqLxhH7lI+Yx6Z7foTGr4lfNn4t/FIwfk38LP+a+GXLvzZ+ln9N/NgbvyZ+ZPwa+HkHxq+JXzR+LfzAGb8mfmj8Kvyo2NJX0z2/YP23jZ/tvzTxQ+u/bfws/5r4Rcu/Nn6Wf038yPZf2vgl49fCL9n+Sxs/239p4pdt/6WNn63fmvix7b+08UPjN4ViN4UmUIKzma4AxaavUyhgcwIBik00p1C8VW8BipVkAYrtU02h2M0fCYplyhSK3aYRoMR1Vp9Q2ueDpwmUdY4p81DIMkWAss4xpQJlnVsH81BWepOiAmWdC8J5KNkGWgGKDbQClHVO8+ehrHQ3vwLFSvIECq50N78CZZ27+fNQVrqbX4Fiq2QBipXkKRRvA60AxQbaKZRgq2QBimXKFAqusyQn7G19inrjA8F11u8lBIEy9u1Lo5g/CcZ11rUzEiTrxa0E17mFekaCaZ37rYsIJi5HrmWY1OJklaSV4DqXjWckuNJDgM5JcJ3LjDMSZJvNtBK0StJGMDqbzbQStBxsJWizmUaCYLOZKkEOpX2ME4LeanErwTOMg5DLqdUeY4VgjNwHT9kPwTNLCMsR5ikNJ2oB4SH24H5w7Pnnxo70c2OP9RFjdHj5idhLvwYYHay/dyGEE8u+VCI3tFQ8yD6F3MeRcHQAvGjcjVapnM8O6Hhsfmhr+va2pqGt3lXCR1c27HBkHEI8RE/+R0f/o9mfeo65uEBmmI+efOybSp5wPp7MJZ7MX/P+EI4IE7rBYngdRtf8obYdWkFyXwdXqie4zEcFkeQ/C6mJ+ESAOFzA4y1poqQQybuwFZH8sHFNhLJoeCeEd8cgkrys6nIMhnTzExErRPLkuSZKCpE8yayJNG0KmvBQ7KvdtS0XNyaYiLJCdKJrzIvkvyiqiUghSqARaTyd6E+Ry0ybIExEWSHisFyUHWhEpBCB04hQI1LQy/LTVxCGFVGIx/0py08n1USkEKHTiFAjygpR1ICIGuSk8UQa5EmDPGmQpxPIqax7Qj4eWPKJmjsvYtCIaLmIndeIkkIkP3ZcEylqLvugESkKNQeNJ3lm2VXVMtc/fuSL5erEZZuLE00kuFySF0vkV2jMS2ipBJxzCk1UaHj5SgHciepXU2WN6kRu11QqX0HlK6h8ocoXqnxF1fWKKl8n6mBNRRqVPFueG1g6jdxLfL9NwTjVLB+NAOQJ7KwfcFGh4eUaed1Z0aTlDLxXaBR+gsw693nw5c5Fr6HlGlT4wdqoLGiiIt/i8ioD8nnYFU1erkmo0PByTVb4yYr2sCKvFbMAv3QW8NF9+ufqeXd1fb/9fBnx3dvDzejdxK//Pm2PXlP89Px4s719e97uX1g8vKt477q7q3HhiQ5jYPexS7KLLqhDc/a/pdT9ljuvnef/AA==","brillig_names":["guardian_set_expired"]},{"name":"set_guardian4","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian4"]},{"name":"set_guardian10","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian10"]},{"name":"set_guardian11","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian11"]},{"name":"expire_guardian_set","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHxgAAwACgEgdAIBIgEgELgiASAABJQAAAEwlAAAAcCgCAAEEgEknAgIEADsNAAEAAigAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJSHgIAAgAeAgADADM4AAIAAwAEJAIABAAAAJQlAAACexwMAQIAJwIBAAAtCAEDJwIEBAQAEAEEAScDAwQBACgDAgQtDAQFLQ4BBQAoBQIFLQ4BBQAoBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAQAQYBJwMFBAEAKAUCBi0MBgctDgEHACgHAgctDgEHACgHAgctDgEHACgHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuCoBFAAUtCAEGAAABAgEuCoBEAAYnAgcAFycCCAQJLQgACS0MBAotDAMLLQwFDC0MBg0tDAcOABAACAAlAAACjS0EAAAnAgcECC0IAAgtDAQJLQwDCi0MBQstDAYMLQwCDQAQAAcAJQAAAo0tBAAALQ0GAgsoAAKARAAHJAIABwAAAdAnAggEADwJAQgnAgIEBy0IAActDAQILQwDCS0MBQotDAYLABAAAgAlAAADti0EAAAtDQMCASgAAoBHAAQtDQQDCjgDAQILKAACgEQAASQCAAEAAAIhJQAABMkeAgABBikCAAIFAAFRgAA4AQIEDjgBBAUkAgAFAAACRiUAAATbHAwEAQAwDAABAAMmKACABAR4AA0AAACABIADJACAAwAAAnoqAQABBfeh86+lrdTKPAEBAiYqAQABBb4eP/8+pPb6PAEBAiYlAAACUi0NAwYtDQQHCygAB4BEAAgkAgAIAAACsycCCQQAPAkBCQsoAAaAQwAHJAIABwAAA0IjAAACyC0NAQYtDQIHLQ0DCC0NBAkNKAAIgEMACiQCAAoAAALtJQAABO0uBAAGgAMoAIAEBAAEJQAABP8uCIAFAAoAKAoCCwA4CwgMLQ4FDAEoAAiARwAFDjgIBQYkAgAGAAADLSUAAATbLQ4KAS0OBwItDgUDLQ4JBCMAAAO1JwIGBActCAAHLQwBCC0MAgktDAMKLQwECwAQAAYAJQAAA7YtBAAALQ0BBi0NAgctDQQILgQABoADKACABAQABCUAAAT/LgiABQAJACgJAgoBKAAKgEUACy0OBQstDgkBLQ4HAi4KgEcAAy0OCAQjAAADtSYlAAACUi4IgEUABSMAAAPGDSgABYBDAAYkAgAGAAAENiMAAAPbLQ0BBS0NAgYtDQMHLQ0ECC0NBgkAKAkCCS0OCQYnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDgUBLQ4KAi0OBwMtDggEJi0NAwYMOAUGBwEoAAWARwAGJAIABwAABFQjAAAEwC0NAQctDQIILQ0DCS0NBAoAKAgCDAA4DAUNLQ0NCwAoBwINADgNBQ4tDQ4MADgLDA0uBAAIgAMoAIAEBAAFJQAABP8uCIAFAAsAKAsCDAA4DAUOLQ4NDi0OBwEtDgsCLQ4JAy0OCgQjAAAEwC0MBgUjAAADxioBAAEFAtxuJ4B2Ep08AQECJioBAAEFRafKcRlB5BU8AQECJioBAAEFxWvEWg4QAAI8AQECJi4BgAOABgsAgAYAAoAHJACABwAABRojAAAFJS4AgAOABSMAAAWMLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABXguAYAKgAguAoAIgAsBAIAKAAKACgEAgAsAAoALIwAABUcoAYAFBAABAwCABgACgAYjAAAFjCY=","debug_symbols":"7Z3bbuM4DIbfJde5kCiREvsqi8Wgh3QQoGiLHhZYFH33cdL60Ji2xlRQoDBvBpMZ/iH9iRYl2ZHeNje7q9ffv/b3tw/Pm4t/3jZ3D9eXL/uH++bT2/t2c/W0v7vb//41/OeNO/zhfToKnh8v7w+fn18un142Fz4Auu1md39z+HvI2HzJ7f5ut7lget+OzR1Aa+0i9MZBMI5E/tM4UnKdMXnBOKPDT+OM4IfG/243HuAs0TO31t7zN0Z/HvaYO/a5wN5jSq0xhTAfPSO3l8oU4mn0Ac8cfdOaw+gPPmL4Bh9Z8hFTl9IxYZ8U6EQPFPoM6rF6RMk6U2vMubMNPgm24GKbm+Cojz2Ej0bA8N3BI3XxQCH4xLFN/8TcfzNkKY6Q2jaNg2QDyRTAt18MMEhj0Rhjm/IY89D0yC8bvxp+BMavil8yfjX8kuVfHT/Lvyp+2fKvjh8Zvxp+7IxfFT80flX82PhV8Gumd8avip/N30r8qLOlr6YHfmD3bxW/YOsvdfzs/q3iFy3/6vhZ/lXxs/XnSn62/lLFj7zxq+Jn6y9V/JKtv9Txs/WXOn42f6vil6Pxq+Jn4+cxFLaHQgIUG+mOoARnw1cBio0JxlC8DTQFKNGgjKFYSR5DAVunEqDY5GEMxZ7oSFCsTxlDieusPsG3IUMAGkFZZ58yDwUtUwQo6+xT5qGs9H36ApR1PqSYh7LSJw8FKNbRClCsox1Dyesc5hegWKaMoax0Nb8AZZ2r+bNQ4kpX8wtQ1rmaX4Bis+QxFG8lWYBiHe0YClhHK0CxWfIYSrBMEaCssySn2NpCQr3xkeA66/cSgp5ybK8vDWL+JBjXWdfOSBDtLq4kSOtcQj0nwWgESwQTd1uuZT+qxWSVpJJgWue08ZwErRZXEszrnGack6CNZmoJWiWpJMjRCFYStBysI4jORjO1BG00UyTIobs+jiOC3mpxLcEz9IM+d7tWQ8QCQURug6cMffDMEsJuC/OU+h21PMVj7BB/buwBfm7s0f3g2Cd6jBS62NnNx06ArTEBfdltfmyc2bXLUpkHW7p/bE2P6ErhZPclnKOIFaKpBbB5kcbT1CR9VvQX29MmKORUdG3L+wjpS9MLDeO6eLLLYb4VfdPDt18dQh98CPgRffr26AN10WOejz7l0G7Nn/Igu+VL9c0MtyuIOHgm95GyJL8N711Xk7zLfFJmSH5bvCQSnxM3QXULvT6dLvSS/GJtQSRnX0mUFCL2sqg/aQHcKYjk5fAiDDIGRiJSiMBpRFEjygpR0FxT1IQn/zqoaduucTH5U5H8oKsgmrg1CqKkEMnrzyVRVoiyxtPE/YTcjV/Jn/60LTEuFzXlRyPKCpEPGpECRJbfNCqJNPSCfD+Ffp4REEYiVoimDtWZFyWFCL1GhBqRBgRpkJPGU9IgTxrkWYM8TyCnbjYR8mnHkidqbkGUl4vYBY2IFSIfFaKpQ8jmRYqay8FpRIpCzVHjSR5ZJmpHo4lOX6RiuTpxt3jE6XRtheW8m5fgcgkvlXgn52lBk5Zr5IFrQUPLpwreTZS/kgo1qonkLqlUvqLKV1T5QpUvVPkiVXuRzhdrVBOVsKTKS3uWw1mI4l0C7TSco6BZfjd6eQQ768d7UGhouUaeeBY0cTkDWN5b+qDwI+9DwrnNgy8PBD418nC3oFH4wVKvLGkU+UbLq4yXfyxe0OByTfYKDS3XsMIPK65HMQoAxSgAlo4C3ptP/10+7S+v7nafZ/zevt5fD478ffn/cXdy+u/j08P17ub1aXc4B7g/AviQGhDzFoiPfWDzsUnMbRPUEcHxf2ELMTZeG89/AA==","brillig_names":["expire_guardian_set"]},{"name":"publish_message","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"nonce","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"payloads","type":{"kind":"array","length":8,"type":{"kind":"array","length":31,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"message_fee","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"consistency","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5389888835557273632":{"error_kind":"string","string":"insufficient fee"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3bbhs5EkD/xc954KWqWJVfWSyCJJMZGDCSQZJZYDGYf9+W5aYUk1RZtZJNNvViyHYfsW4ki2xe/r777cunv/74cP/1928/7t7/6++7h2+fP/68//Z1+e3vf97dffp+//Bw/8eH4z/fud2PQNE/Ej/+/Ph194cfPz9+/3n3PiVO7+6+fP3t7j17n5bv+P3+4cvde6F//v1uR6GFAmeiyEKhqSw06UUmG5KprGTSK9nKkhrlY0D3hPkYGY+5d+XjLoT1aQfh8HCsPAyLLZ8ehkXV/DD5ysOMDlfxMfjjhx/FZ7iI+CLr097La4p/GesjZ+uzYn2PaY0HTzGeFl9QVl2FIhTiS7qw+D78Iv6ukOTwFQrx1SqH0ccnCmM8uA9drQgPmIs4CgxPUHk6IcPT04kcnvZDCrjKsXws/JA8DC29jCx9GNr2YWjbx6FtH3lk6WFo28PQcV9PYUeRnobua4lGlj75oaVPI0vPYWjph+6tJA4t/ci9FbuRbc9u5Ljn0Ln07LL0XEyPMPTd10ZavzrFVEqPr5/npIP0QZmaCsuk1zppt/vM+fEg8KQAD64AhdEVSIMrkEb3QKKeFYAktE5Gc/xVfJO63HWbdXl1cSp1ZS7vylTeFTeVd8XBXOp2nYydp+6ppx+V9XEmZbtO8i6sbPAzKbuh5FFVNs7k2bih1EJXVqbqaWFDnc9L1N1QYvECdXEu7/Y9h3dxdWku7/Y9P3hxddNMKcaWZh5VZbc076grCzMpu6HkUVVWZvKszDMjFZ0b+0VWdH7st9GLAl3XrZcoMPbr9OhC18n1SxQY3QNxdA/E0T0Ao/cDMOyw4lF8HHYIuBd/2HnjvfjDJvOP4hOMLf7Y1k/Dzs3txR97LV50fS92eokCXcf/CxSQ0dO3vof8ugLeDe4B3/cyoBco0PfSnpcoMHg/4MddgrMXf+gBjI/DvunYiw9jiz90Cu1hbOuPu9TkUXwcfO7H4+hd1+AbuhYFNvRS35M/OkrqsPc0Rtwru6XlGrqyM3mWu/bsC+ohd+2tFygw1VauRV2YS92ZVlzH4Kby7vLXqdTte+HG5dWdacV1DKHrlPyyq8BCmGerXgwTbehalJ1nQ1cMMM9q60XZqTw7z2rrGF6wlYvcsbJ7ii3UCyZuKlQCE1V3IuTjpnCxx2knLg9Att3RiexVtzCmtZNn5HT88KM8jf0KAJDlISi0aLytVygxldV4L32aio013RpFFqqx/FqjLNZYBhgmylaWxcsxmsqKJi+Dyctg8jKaLI+6NeTCjfZZx9xxPmIQgtKULK/3E2VBwMnzxiSS61vZU2f6LdJ37ipFehlZ+jS07dPQtuehbc88svQSXl36Zk6/Fyj1JRA435tA2JlA3vUmUHcWks4Eauy2w5AFwqOB3dVHgdDYPIcuj2UxxOe5LTR2rGlUslDgTRSaKLFQaLIGmsoiU1lk8nIylZVMXmaTl9nkZTZZvrHMf3k2U+UoEBpzGKcpdNFEmcryZKGC7i/UGtalh18bVghJaVjZpfWr2bFyxZ2Ph6Uuy9xOfnhd6oKN5cbXFD9SFh9ZyR05rlcXJhZl+nXpn/jQQS2aPW/jMdZTTQqrjRYH4+v1OdjoByg7GEmK+VNszPgkt9p1KbVC1ctKWR1MWEZ3Y01oIskU02mL0eEOBwpHFahuMXGrPCy/zsbs5UmqPJIKLRrrKjnmms1QtHNYv6dUpcBEsYXiaKLqNmTvD1QZCY1hmkaRgaLGUc8ahRbKm8pqzFxrVMPLKUcvl/WdGpmyRiUL1XgprlFkoRqvaTlfZbpQvqTQRImFauSzGsUWikxlNU7IU6jGymUJuQeRmEpKLFSjjdKoZKEabZRG1aNX8t3GC8XPqdSYlNEoNFFioRptlEaZymq0URrV8PIh/xEuWtHUWMuiUWKhGoflahRbqEauJYfxhzCWVLJQ5E0UWqhGHqVRtrLEQtXbKHJhvb6LXPQlxRaq3kapFBkorrdRKtWwfL5FfqFCQTXyKI0CE8UWqtVGKZSprMZIU6MaXqaUqVS0ogzeRKGJEgtVXwGgUo36BXSgpKAomqhkoZI3UWSh2FQWo4mqe3mZYFkpH4pWlOtrm1TKUpbU5wVVKlkoH0xUw8sSDxQVVPAmCk2UWKgIJspUFkQT1fAy+Uylou0VDCbKVFY9+1IptFD17EulGnUZ3IGKJSUWqpF9aVSyUI3sS6MMZYFrZF8ahSZKLJQHE2UqK5jKCqayYjRRJi9DMFFkodAUUWiKKHImyuRlMnk5mbxcn2nXKDZ5mU0RJSYviyWivHMmCk2Uxcve1EZ5b/GyD9FEWbzsYzBRJi+DN1F1L9Nh9oBA2afBvI4zxP+y8q98dDc3+vTsbjoxPxwjPYkjXYnTGNO+mTh9WYf6sg71ZZ3Ul3VSX9ZpjAfeTBzuSpzGCOaNxAmNBOLNxKGuxPG+L3H6sk7oK3ZCV/lOeOX0i/PyseVjKsWh122Vxa3fu0yl1sRJlxSnWJ8OIYVrF3BtDfjaGvC1NRB/7QLougVE569dwLU18O7aBeC1C5ArFxDg2gVcW4N4bQ3g2lEE164HGK5dwAVa0+RyAcrGAEl5rbywp0IaCl1JQz1Jk3xX0nRlm8vmBHrWGnMSfbwbY00T4yuPllVxurIOuNcdnjLnnJ7ZV8TBnoYY8MqDd1Uc7kqc0NV4EIJ0Jc5lE6r/X5y+rAN9xQ6krsR5g2v8zjnOI+RWfPn4/DgPaO2w7kV6yDu00jIfWkj/Bpf4nXWUSj4ysCr9G5xb/1YnbS3Kpr6VPXXqDYB0HmgnpUfnhpYeR5bed17JFelpZOnD0LYPQ8d9kIGlb2wzl0PaKHiUCeITxAaofmL9AfLOhQqVLFQ0lVXPt5dOfjW3Bx9LrL6OVcdExYIrsXoWrmOm0lL9rF7vKOZ4PdLNI9aiG1ezh2Or74YYZbhKrglJ5PDNS3Jff1f99DAcXZcUao+G4NcvDiHG0w8j5INXgI8f3duEbjZ5bpN65z+5TW5xUtgk3OKktMktTgqb1K/rndwmtzgpbAK39qS0SbrZ5LlN8JbHljbhGW1C+Vn69dFHm9S3HMxtk/q+h8ltcqs7hU3kFielTW5x8twm7G5xUtpkypzttE38LU5Km9zak8Im9WXuk9vklscWNqmfzzm3TWDKeTbFJhO0J3tFJ+hMHhXFCTKJvaITpJGPitIE8757RSeY9H9UNE3QE+0VnaV7mWEu9VFRniCx3Cs6i0dlkjoqbjOt7mG9ZYhHh+9mRTdTRzVFN1NHFUW3Mz2oKbqZpF5RdDuLwzRFZ2mMtjMNqSgaN5MwaIrO4lGYpXvZziygouh21oBpim5mzkhRlGYZvdAs3QvN0hilWRqjNMvohWfxKG+me0n5ooFwfMn4uQ8/WkU20xedYxVPeS+yT0cyZ6tspj2/nFXQbWcH6SWtsp09pBe1ymbmis6ySpJ164o/Ps5xtUqYs7XVrAI3q1SsMmcfpFglbiZdvahV5uyZFatsZ5XoRa1y65krVsFbrNSscuuZa1a59cwVq9CtZ65Z5dYzV6yynVWzF7XKrbWtWeXW2laswnPGisSsn0BpFZmzD9KsUu+DPPNKBcBfrLLDvINzsVI0RMmnvnM46CFSsyblw8TT4dyX3Wmij/I0lp9pajTO5NKwxvoSDWvs2dKw+h04OmbzrIANEwsWGgtBNax+8KqKgbNhpuBqXOOoY6bgCmxyd+PePw2LzuTu6E3BFWOwYabgimhydyRTcMVkcndkU3A1riHSMVNwQQAbZgquxkUwKgbBhpmCC9B31XECSl/yUOpLHoldyYOur/hB11f8YMS+5IHO4qez9gdTX/UdubP46az9Id9XfW9cpvB28nTW/hD1Vd9blza8mTydtT/J9VXfW7cgvJ08fcVPgr7qe8LO4qez9idxZ/Vd+oof7qz94dBXfefYV/xwZ+0Pp77qe+vEnjeTp7P2p3XkxJvJE/qKH+ms/RHsq74LdRY/nbU/Il3Vd3Kuq/gh11f7Qy52Vd/JQWfx01f7Q77eXwhzeKKWj0erOviJQgsVnYmqvjsT8asN5Pge+5Wqv6pWKbRQ9bVlIhEyFbGgWutpnFsdtvvMJZcMpYX6ew+RHB3LRykpslDeVJZHlUqFNUJwJqrhMTr4uYzEUM9lRPAkFcFEsSk6QuuMGpVLJg5aOzTzEivv+ODr/aqphUIT1ehbMO+W9CkUVGuG+zTVmoc+TbUWyCgUNPqEfDdxcKU1qHHHcMgOg1CW1br09zSVoolKFoq9iTLpJRYJsXEDMkL2Mh5dq50ptlCNmqJQjb2wGkUWKnoTZSqrUb+Wt3wrRT6WFFuoxkywQjXmazWKLFQyWaOxEl6jTDZszNbEw5raiGX9amRGGkUGihqn3WoUmCi2UD6YKIvlKZjKCibLR5Plo8nyjWwqUh51RS5aG2r0ywrVWCGiUWShGvvCNCpZqIQmytIvE0cTZenNSSxlNd6jpjyASAQF0xiT5g0UkqhkwMDw+Uz9JESFofMZMtignukqjBhGGKmR52oUWyg2lcWmssRUlljKat7lqFAWfzXvA1SoZKGCN1F0djvBjXmysG6HEqgw59cRbtTfk+WQQbb6UZUKw+cz6fw2jOtj1NMMG8qpby8RPkwCFdkzizcw55fTuPHhSJ8ac368SWNe8DRzfl8mIRoYOZ+JYGAM5YBBHzg/rgUN/sEz4+Cf5bf/fPx+//HTw5cfC7H7519fP/+8//b16def//1z/c+n7/cPD/d/fPjz+7fPX3776/uXDw/fPu/+d+eefvzLe6B33lNapNmZKQq8AwfLb373b/b8jkPc/bpTjiG+Y8BFikWS/wE=","brillig_names":["publish_message"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5389888835557273632":{"error_kind":"string","string":"insufficient fee"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"set_guardian2","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian2"]},{"name":"set_guardian13","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian13"]},{"name":"get_provider","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"structs::Provider","fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"evm_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}}]},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBHJwAABAMnAgEEACcCAgQAHxgAAgABgEUlAAAASyUAAABaLgQAAYBFLgQAAoBGKAIAAwSARScCBAQCOw0AAwAEKACAQwQAAygAgEQEAAEmJQAAAuAeAgACAB4CAAMAMzgAAgADAAQnAgIBASQCAAQAAACDJQAAAwknAgIAAC0IAQMnAgQEBwAQAQQBJwMDBAEAKAMCBC0MBAUtDgIFACgFAgUtDgIFACgFAgUtDgIFACgFAgUtDgIFACgFAgUtDgIFACgFAgUtDgIFLQgBAgAAAQIBLQ4DAicCAwQAJwIEBAYnAgUAAS0MAwEjAAAA+gw4AQQDJAIAAwAAApEjAAABDC0NAgEBKAABgEQAAy0NAwInAgMEAgA4AQMGLQ0GBS0IAQMnAgYEAgAQAQYBJwMDBAEAKAMCBi0MBgctDgIHJwIGBActCAAHLQwDCAAQAAYAJQAAAxstBAAALQwIAi0IAQMnAgYEAgAQAQYBJwMDBAEAKAMCBi0MBgctDgUHJwIGBActCAAHLQwDCAAQAAYAJQAAAxstBAAALQwIBQEoAAGAQwAGLQ0GAy0IAQYnAgcEAgAQAQcBJwMGBAEAKAYCBy0MBwgtDgMIJwIHBAgtCAAILQwGCQAQAAcAJQAAA0AtBAAALQwJAycCBgQEADgBBggtDQgHLQgBBicCCAQCABABCAEnAwYEAQAoBgIILQwICS0OBwknAggECS0IAAktDAYKABAACAAlAAADQC0EAAAtDAoHADgBBAgtDQgGLQgBAScCBAQCABABBAEnAwEEAQAoAQIELQwECC0OBggnAgYECC0IAAgtDAEJABAABgAlAAADQC0EAAAtDAkELQwCAS0MBQImLQ0CAxwMAQYAADgFBgcvDAAHAAYuBAADgAMoAIAEBAAHJQAAA2UuCIAFAAcAKAcCCAA4CAEJLQ4GCS0OBwIBKAABgEQAAy0MAwEjAAAA+igAgAQEeAANAAAAgASAAyQAgAMAAAMIKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImJQAAAuABKAABgEQAAy0NAwIcDAIDAxwMAwEAHAwBAgMtDAIBJiUAAALgASgAAYBEAAMtDQMCHAwCAwUcDAMBABwMAQIFLQwCASYuAYADgAYLAIAGAAKAByQAgAcAAAOAIwAAA4suAIADgAUjAAAD8i4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAPeLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAOtKAGABQQAAQMAgAYAAoAGIwAAA/Im","debug_symbols":"5Z3RTuswDIbfpde7iBPbiXmVI4QGDDRp2tAYRzpCvPtZy9oNVjUDFWQ3N2hFTvP9Ttu4Tpq8VveL25fHm+X6YfNcXf15rVabu/luuVnvj17fZtXtdrlaLR9vTv9dufqPUGP//DRf14fPu/l2V11B8ORm1WJ9X/8OifbneFiuFtWV8Nvs3Nx531o79Efj0GOMzHAwRo6uM2boMU7k6GCcyMOp8fWsAudGoRdprQHkF+nH8T2lzvcp43ugGFtjDmGYXkhaqcIBP9NDGJke/Af6po7083V4/vk6AvTVwUn4UIgFjg4m11cDIHU1nFx4wNhjHSnhwTqyo+GGjp5Ca+zprKEDG4ZHZxmeDMOTZc+TZc+zZc8zWoZPhuFjsAwfDcMnbxnecngglgMzMdxJeWe4k/LOcCflnRiGB8OdlAfDnZT3hjspr/1lJLkOPn3OE3nlUWXg9tQxxDP4+PuXTTzC+0yGbv8wlDZ1Wf9OnbkXbPiTM86PxvnFNr8Y978kzfwYOw5M4SP9N9QGp/ppNbraWJJaKKptoai29UW1reeS1AbVEdjX1A5ZN1qpIK2qI7txtWIoSOuEIsacViqoXWlCEUVOK0NJPSxPqNfJq40TiicuUFtU2+rO1o2utqy2nVC8mFcrBUUWU8oxZrTilDKMWa0TylPktMKEIsas1oLa1ZeTfUKPpseqMNgea8ag+r7K86PtsXJE1fF0np+M+5+M+5+N+5+NP//Z7HtETR/NvvE19GazwzV9Mhu9N/Rm4/GaXkz7Xszm4Bp627PryNnuscgZ9z+o7rMu4Ffda+X5dc97uoDfuP+NZxwoGPc/qo4dLuC3HD2Q7nxDlh5N01t+1yW2/K5LpvMMpPuLrCy97Rw56c40XMBf0pwTKmrOCen+Vm10tSW1LevOlIyutqi21Z2FGV1tOfPQeUrftWW1ljOriAv6po0L+qaNdc+AGVkrlqOVlK/cM7R+DLPuRc4Q2mWGI/pzeN3Ly4WOow8+6vZ8SOEI74eNAULkDgSdnGnVfYsMrlLESfeyYsPwontxqwy87kUMB+GjU35/D8Mrf7IOwoNlz4Plax50Lx85CJ/6Vx2V1LKLHM8fAr2XSV8v07/W0LEMOOfPC8VvFPLfqal/2H/fq7eOBoRwVqp/sDpbSrKlTmL5tlT/4Gy21Nfretsf/p1vl/Pb1eKwW8rDy/ruZPOU3b+nxad9VJ62m7vF/ct2Ue+octxMpb64IKYZiFzX+3vUhxRmQKk+hOZQZsCwr3Vf838=","brillig_names":["get_provider"]},{"name":"set_guardian3","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian3"]},{"name":"set_guardian8","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBdJwAABAMnAhYEFScCFwQAHxgAFwAWgEgdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAQuCIBIAAEuCIBJAAIuCIBKAAMuCIBLAAQuCIBMAAUuCIBNAAYuCIBOAAcuCIBPAAguCIBQAAkuCIBRAAouCIBSAAsuCIBTAAwuCIBUAA0uCIBVAA4uCIBWAA8uCIBXABAuCIBYABEuCIBZABIuCIBaABMuCIBbABQuCIBcABUlAAABUCUAAAF0KAIAAQSAXScCAgQAOw0AAQACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAB7geAgAXAB4CABgAMzgAFwAYABkkAgAZAAABmCUAAAfhHAwVFwAnAhUAAC0IARgnAhkEBAAQARkBJwMYBAEAKBgCGS0MGRotDhUaACgaAhotDhUaACgaAhotDhUaKwIAGQAAAAAAAAAAAgAAAAAAAAAALQgBGicCGwQFABABGwEnAxoEAQAoGgIbLQwbHC0OFRwAKBwCHC0OFRwAKBwCHC0OFRwAKBwCHC0OGRwtCAEZAAABAgEtDhgZLQgBGAAAAQIBLQ4aGC0IARoAAAECAS4KgEUAGi0IARsAAAECAS4KgEQAGycCHAARJwIdBB4tCAAeLQwZHy0MGCAtDBohLQwbIi0MHCMAEAAdACUAAAfzLQQAACcCHAQdLQgAHS0MGR4tDBgfLQwaIC0MGyEtDBciABAAHAAlAAAH8y0EAAAtDRsXCygAF4BEABwkAgAcAAAC1CcCHQQAPAkBHScCFwQcLQgAHC0MGR0tDBgeLQwaHy0MGyAAEAAXACUAAAkcLQQAAC0NGRctDRgcLQ0aHS0OFxktDhwYLQ4dGi4KgEYAGwEoAByARwAYLQ0YFwo4FxUYCygAGIBEABUkAgAVAAADPyUAAAovJwIYBBktCAAZLQwBGgAQABgAJQAACkEtBAAALQwaFScCGAQZLQgAGS0MAhoAEAAYACUAAApBLQQAAC0MGgEnAhgEGS0IABktDAMaABAAGAAlAAAKQS0EAAAtDBoCJwIYBBktCAAZLQwEGgAQABgAJQAACkEtBAAALQwaAycCGAQZLQgAGS0MBRoAEAAYACUAAApBLQQAAC0MGgQnAhgEGS0IABktDAYaABAAGAAlAAAKQS0EAAAtDBoFJwIYBBktCAAZLQwHGgAQABgAJQAACkEtBAAALQwaBicCGAQZLQgAGS0MCBoAEAAYACUAAApBLQQAAC0MGgcnAhgEGS0IABktDAkaABAAGAAlAAAKQS0EAAAtDBoIJwIYBBktCAAZLQwKGgAQABgAJQAACkEtBAAALQwaCScCGAQZLQgAGS0MCxoAEAAYACUAAApBLQQAAC0MGgonAhgEGS0IABktDAwaABAAGAAlAAAKQS0EAAAtDBoLJwIYBBktCAAZLQwNGgAQABgAJQAACkEtBAAALQwaDCcCGAQZLQgAGS0MDhoAEAAYACUAAApBLQQAAC0MGg0nAhgEGS0IABktDA8aABAAGAAlAAAKQS0EAAAtDBoOJwIYBBktCAAZLQwQGgAQABgAJQAACkEtBAAALQwaDycCGAQZLQgAGS0MERoAEAAYACUAAApBLQQAAC0MGhAnAhgEGS0IABktDBIaABAAGAAlAAAKQS0EAAAtDBoRJwIYBBktCAAZLQwTGgAQABgAJQAACkEtBAAALQwaEicCGAQZLQgAGS0MFBoAEAAYACUAAApBLQQAAC0MGhMBKAAVgEcAGC0NGBQBKAABgEcAGC0NGBUBKAACgEcAGC0NGAEBKAADgEcAGC0NGAIBKAAEgEcAGC0NGAMBKAAFgEcAGC0NGAQBKAAGgEcAGC0NGAUBKAAHgEcAGC0NGAYBKAAIgEcAGC0NGAcBKAAJgEcAGC0NGAgBKAAKgEcAGC0NGAkBKAALgEcAGC0NGAoBKAAMgEcAGC0NGAsBKAANgEcAGC0NGAwBKAAOgEcAGC0NGA0BKAAPgEcAGC0NGA4BKAAQgEcAGC0NGA8BKAARgEcAGC0NGBABKAASgEcAGC0NGBEBKAATgEcAGC0NGBItCAETJwIYBBUAEAEYAScDEwQBACgTAhgtDBgZLQ4UGQAoGQIZLQ4VGQAoGQIZLQ4BGQAoGQIZLQ4CGQAoGQIZLQ4DGQAoGQIZLQ4EGQAoGQIZLQ4FGQAoGQIZLQ4GGQAoGQIZLQ4HGQAoGQIZLQ4IGQAoGQIZLQ4JGQAoGQIZLQ4KGQAoGQIZLQ4LGQAoGQIZLQ4MGQAoGQIZLQ4NGQAoGQIZLQ4OGQAoGQIZLQ4PGQAoGQIZLQ4QGQAoGQIZLQ4RGQAoGQIZLQ4SGScCAQQULgiARQAWIwAAB3YMOBYBAiQCAAIAAAeJIwAAB4gmHAwWAgAAOBcCAwAoEwIEADgEFgUtDQUCMAwAAgADASgAFoBHAAItDAIWIwAAB3YoAIAEBHgADQAAAIAEgAMkAIADAAAH4CoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJiUAAAe4LQ0DBi0NBAcLKAAHgEQACCQCAAgAAAgZJwIJBAA8CQEJCygABoBDAAckAgAHAAAIqCMAAAguLQ0BBi0NAgctDQMILQ0ECQ0oAAiAQwAKJAIACgAACFMlAAAKbC4EAAaAAygAgAQEAAQlAAAKfi4IgAUACgAoCgILADgLCAwtDgUMASgACIBHAAUOOAgFBiQCAAYAAAiTJQAACwwtDgoBLQ4HAi0OBQMtDgkEIwAACRsnAgYEBy0IAActDAEILQwCCS0MAwotDAQLABAABgAlAAAJHC0EAAAtDQEGLQ0CBy0NBAguBAAGgAMoAIAEBAAEJQAACn4uCIAFAAkAKAkCCgEoAAqARQALLQ4FCy0OCQEtDgcCLgqARwADLQ4IBCMAAAkbJiUAAAe4LgiARQAFIwAACSwNKAAFgEMABiQCAAYAAAmcIwAACUEtDQEFLQ0CBi0NAwctDQQILQ0GCQAoCQIJLQ4JBicCCQQELQgBCicCCwQFABABCwEnAwoEAQAoBgILJwIMBAQAKAoCDT8PAAsADS0OBQEtDgoCLQ4HAy0OCAQmLQ0DBgw4BQYHASgABYBHAAYkAgAHAAAJuiMAAAomLQ0BBy0NAggtDQMJLQ0ECgAoCAIMADgMBQ0tDQ0LACgHAg0AOA0FDi0NDgwAOAsMDS4EAAiAAygAgAQEAAUlAAAKfi4IgAUACwAoCwIMADgMBQ4tDg0OLQ4HAS0OCwItDgkDLQ4KBCMAAAomLQwGBSMAAAksKgEAAQUC3G4ngHYSnTwBAQImJQAAB7gcDAECAC0IAQEnAgMEAgAQAQMBJwMBBAEAKAECAy0MAwQtDgIEJioBAAEFxWvEWg4QAAI8AQECJi4BgAOABgsAgAYAAoAHJACABwAACpkjAAAKpC4AgAOABSMAAAsLLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAACvcuAYAKgAguAoAIgAsBAIAKAAKACgEAgAsAAoALIwAACsYoAYAFBAABAwCABgACgAYjAAALCyYqAQABBUWnynEZQeQVPAEBAiY=","debug_symbols":"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","brillig_names":["set_guardian8"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","brillig_names":["sync_notes"]},{"name":"set_guardian1","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian1"]},{"name":"init","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"private"},{"name":"evm_chain_id","type":{"kind":"integer","sign":"unsigned","width":16},"visibility":"private"},{"name":"wormhole_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBNJwAABAMnAgQEAycCBQQAHxgABQAEgEodAIBKgEoDHQCAS4BLAy4IgEoAAS4IgEsAAi4IgEwAAyUAAABfJQAAAJEoAgABBIBNJwICBAA7DQABAAIoAIBDBAADKACARAEAACgAgEUEAAAoAIBGAAAAKACARwEAASgAgEgEAAEoAIBJBAAEJiUAAAc0HgIABQA2OAAFAAYABwAcDAcIAAQ4CAYJJAIABwAAAL8nAgYEADwJAQY2OAAFAAYABwIcDAcFAAQ4BQYIJAIABwAAAOMnAgUEADwJAQUtCAEFJwIGBAIAEAEGAScDBQQBACgFAgYfJIBFgEgABgEoAAWASAAHLQ0HBhwMBgcEHAwHBQAtCAEGJwIHBAQAEAEHAScDBgQBACgGAgcfJIBIgEMABy0NBgcAKAcCBy0OBwYnAgcALC0IAQonAgsEBQAQAQsBJwMKBAEAKAoCCy0MCwwtDgcMACgMAgwtDgcMACgMAgwtDgcMACgMAgwtDgcMLQgBBwAAAQIBLQ4KBy4IgEUABCMAAAGeDSgABIBDAAokAgAKAAAG0iMAAAGzLQ0HBisCAAcAAAAAAAAAAAQAAAAAAAAAACcCDgQPLQgADy0MBxAAEAAOACUAAAddLQQAAC0MEAotDBELLQwSDC0MEw0tCAEHAAABAgEtDgoHLQgBCgAAAQIBLQ4LCi0IAQsAAAECAS0ODAstCAEMAAABAgEtDg0MLQ0GDQAoDQINLQ4NBi4IgEUABCMAAAJDDSgABIBJAA0kAgANAAAGiCMAAAJYJwINBA4tCAAOLQwHDy0MChAtDAsRLQwMEgAQAA0AJQAAB/AtBAAALQwPBisCAAcAAAAAAAAAAAMAAAAAAAAAACcCDgQPLQgADy0MBxAAEAAOACUAAAddLQQAAC0MEAotDBELLQwSDC0MEw0tCAEHAAABAgEtDgoHLQgBCgAAAQIBLQ4LCi0IAQsAAAECAS0ODAstCAEMAAABAgEtDg0MJwINAA0nAg4EDy0IAA8tDAcQLQwKES0MCxItDAwTLQwNFAAQAA4AJQAACGQtBAAAJwINBA4tCAAOLQwHDy0MChAtDAsRLQwMEi0MBRMAEAANACUAAAhkLQQAACcCBQQNLQgADS0MBw4tDAoPLQwLEC0MDBEtDAYSABAABQAlAAAIZC0EAAAnAgYEDS0IAA0tDAcOLQwKDy0MCxAtDAwRABAABgAlAAAH8C0EAAAtDA4FCjgIBQYkAgAGAAADuiUAAAmNCygACYBGAAUeAgAGAQo4CQYHEjgFBwYkAgAGAAAD3iUAAAmfHAwBBQAcDAIBACcCAgUAJwIHBAgtCAAILQwCCQAQAAcAJQAACbEtBAAALQwJBikCAAcFAAFRgCcCCQQKLQgACi0MBwsAEAAJACUAAAmxLQQAAC0MCwgnAgkECi0IAAotDAILABAACQAlAAAJsS0EAAAtDAsHASgAB4BIAAktDQkCASgABoBIAAktDQkHASgACIBIAAktDQkGLQgBCCcCCQQHABABCQEnAwgEAQAoCAIJLQwJCi0OBQoAKAoCCi0OAQoAKAoCCi0OBwoAKAoCCi0OBgoAKAoCCi4KgEYACgAoCgIKLQ4CCicCAQQGJwICAAEuCIBFAAQjAAAE2ww4BAEFJAIABQAABlkjAAAE7ScCAQAIMAwAAwABKwIAAQAAAAAAAAAAAgAAAAAAAAAAJwIGBActCAAHLQwBCAAQAAYAJQAAB10tBAAALQwIAi0MCQMtDAoELQwLBS0IAQEAAAECAS0OAgEtCAECAAABAgEtDgMCLQgBAwAAAQIBLQ4EAy0IAQQAAAECAS0OBQQnAgUAFycCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAstDAUMABAABgAlAAAIZC0EAAAnAgUEBi0IAAYtDAEHLQwCCC0MAwktDAQKLgiARgALABAABQAlAAAIZC0EAAAnAgYEBy0IAActDAEILQwCCS0MAwotDAQLABAABgAlAAAH8C0EAAAtDAgFCygABYBGAAELKAABgEQAAiQCAAIAAAYRJQAACdwqAgABBf//////////JwIDBAYtCAAGLQwBBwAQAAMAJQAACbEtBAAALQwHAgEoAAKASAADLQ0DATAMAAEABR4CAAEANAIAASYcDAQFAAA4AgUGACgIAgcAOAcECS0NCQUwDAAFAAYBKAAEgEgABS0MBQQjAAAE2wAoBgIOADgOBA8tDQ8NJwIOBA8tCAAPLQwHEC0MChEtDAsSLQwMEy0MDRQAEAAOACUAAAhkLQQAAAEoAASASAANLQwNBCMAAAJDLQ0HCgEoAASASAALACgGAg0AOA0EDi0NDgwNKAALgEkADSQCAA0AAAcBJQAACe4uBAAKgAMoAIAEBAAFJQAACgAuCIAFAA0AKA0CDgA4DgsPLQ4MDy0ODQctDAsEIwAAAZ4oAIAEBHgADQAAAIAEgAMkAIADAAAHXCoBAAEF96Hzr6Wt1Mo8AQECJiUAAAc0LQgBAicCAwQEABABAwEnAwIEAQAoAgIDLQwDBC4KgEYABAAoBAIELgqARgAEACgEAgQuCoBGAAQtCAEDJwIEBAUAEAEEAScDAwQBACgDAgQtDAQFLgqARgAFACgFAgUuCoBGAAUAKAUCBS4KgEYABQAoBQIFLQ4BBS0MAgEtDAMCLgiARQADLgiARAAEJiUAAAc0LQ0EBQsoAAWARAAGJAIABgAACBInAgcEADwJAQcnAgUEBi0IAAYtDAEHLQwCCC0MAwktDAQKABAABQAlAAAKji0EAAAtDQEFLQ0CBi0NAwctDgUBLQ4GAi0OBwMuCoBHAAQBKAAGgEgAAi0NAgEmJQAABzQtDQMGLQ0EBwsoAAeARAAIJAIACAAACIonAgkEADwJAQkLKAAGgEMAByQCAAcAAAkZIwAACJ8tDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAAIxCUAAAnuLgQABoADKACABAQABCUAAAoALgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEgABQ44CAUGJAIABgAACQQlAAALnC0OCgEtDgcCLQ4FAy0OCQQjAAAJjCcCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAqOLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAKAC4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBIAAMtDggEIwAACYwmKgEAAQX0gAGmWdMnQjwBAQImKgEAAQUfAFASQCQi7jwBAQImJQAABzQcDAECAC0IAQEnAgMEAgAQAQMBJwMBBAEAKAECAy0MAwQtDgIEJioBAAEFAtxuJ4B2Ep08AQECJioBAAEFxWvEWg4QAAI8AQECJi4BgAOABgsAgAYAAoAHJACABwAAChsjAAAKJi4AgAOABSMAAAqNLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAACnkuAYAKgAguAoAIgAsBAIAKAAKACgEAgAsAAoALIwAACkgoAYAFBAABAwCABgACgAYjAAAKjSYlAAAHNC4IgEUABSMAAAqeDSgABYBDAAYkAgAGAAALCSMAAAqzLQ0BBS0NAgYtDQMHLQ0ECC0NBgkAKAkCCS0OCQYtCAEJJwIKBAUAEAEKAScDCQQBACgGAgonAgsEBAAoCQIMPw8ACgAMLQ4FAS0OCQItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEgABiQCAAcAAAsnIwAAC5MtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAoALgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAAC5MtDAYFIwAACp4qAQABBUWnynEZQeQVPAEBAiY=","debug_symbols":"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","brillig_names":["init"]},{"name":"set_guardian7","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7V3bbts4EP0XP/eB5FxI9lcWiyJt08JAkBRpusCi6L8vnY0Ut6JNmTRaSYcvQZxwzDmHlObMiCK/7z7evv/2+d3+/tPD193bv77v7h4+3DztH+7Tp+8/3uzeP+7v7vaf3x3/eWcOP8j7Z4OvX27uD5+/Pt08Pu3eWnJi3uxu7z8efqcg6Us+7e9ud2+j/ngzbW6cG1obdq+NKdOYVe1LY1ZvxsZqM42DGHlpHMTZ48Z/v9lRcFfxPsahtbXxN3p/He4ljNyHAvdWvB8aK9F576PEAWpU4l+9j3Jl7637yfvUBxv6DX2EXB+kOgwdadDRSEy2B6XXGfRKqxXJtQ46NI5hbEvWZ9o6w8PcdEZffSd6HgS29LudFx39cQXnfeTBDR/j6ze7kPOD/DCmfDTZXK6pc3b4YueOpnG2sfAw5YXDcdNn/kLnr4U/5zp/Tfz5zl8Lf9TnXxt/ff418cd9/rXxp52/Fv7EdP6a+JPOXxN/sfPXwp9y56+Jv56/lfjTsa3+3PTAX+jXbxN/sddf2vjr128Lf2L6/Gvjr8+/Jv56/bmRv15/aeLP2c5fE3+9/tLEH/X6Sxt/vf7Sxl/P35r4Y+78NfHX9fOUFOkPhTKkdKU7JUW7fM2Q0jXBlBTfhWaGFO6kTEnpIXlKSuh1qgwpPXmYktKf6ORI6feUCSlqMKMP2cFlR04npGDeU86TYvtMyZCCeU85TwroevoCKZgPKc6TAvrkoUBKv9FmSOk32ikpjCnzC6T0mTIlBbSaXyAFs5p/nhTQan6BFMxqfoGUniVPSfE9JGdI6TfaKSmh32gzpPQseUpK7DMlQwpmSPY8tHVe6hs/M4gZvy9h0GrgAZ8/8vl/Br3BjGtXZND2q7iRQYdZQr0mg9wZLDHo47jlWrA6YbBHkkYGCTNtvCaDPRY3MsiYacY1GexqppXBHkkaGRTuDDYy2OdgI4Pa1Uwrg13NNDLou5ppZbCrmVYGeyRpZBD0lZdrMtgjSSODoC/TXMRgpBFf5F8ZDKbH4lYGrxCLbRhPkHAsBQZF4uC8BvfqfIw5CsfjRLx/3d3SKj/7bs2KfQ/r9f0abxz8Kd+pfMeIseA7m6EHy87/1MW0dTB+uP6CCa93geyhMun7jr/7+NqOfHH7Z7yKhZcNGF4Gwxux8ArY+ErAwqsODK/HwuvB9MaM2t6m8AYwvRHQxhdMb8yoSW0LL5beiAZLb0SDlf9Gi6U3ogUbX4elN+KMNdTbwoulNyJh6Y1IWPlvZDC9wWDjK2B6Q7Dy36hgemPGkZPbwguW/3owveHBxjeA6Y0Alv9GML0RwfRGxMp/rTGMBhhthC2W5EiAsXJgaxyW6EiAsVSHNYSVBifAWLrDGrCFowkwowHGSoWtETThIWjCQ7Gy4QQYTXiArR9NgNGEh0fLhwOjAUYTHhEtH45gwsOCLSNNgMGEh7Vg+bC1YMLDWjDhYR1YPmwdmPCwYKtJE2A04cFg+bBlNOEhaMID7BX/BBhNeIAtKk2A0YSHR8uHPZrwCGjCA+xN/5QOowkPsLWlCTCY8HAGLB92Bkx4OAsmPBzYC//WOTDh4dAWlzq0xaWOGA0wmvBgNOEB9t6/dYImPNAWlzq0xaVOwfJh59GEh2c0wGj5cEATHmiLSx3a4lIXwfJhMmDCgwyY8CC0PQDIMhpgtBFGW1xKDiwfJgITHgR2dpQltD0AiNGEB9riUkJbXEpgB0hZUjThAXaElCW0PQDIowkPtMWlhLa4lMDOkbIUGQ0wmPBgtD0A2IAJD0ZbXMpoi0sZ7Dipwx/RAIMJD0bbA4AJTXigLS5ltMWlvLFTpShoHNuThgzgbd2ly4A3VrUsA95YEW8G4G0prTLgjS09nAF4W2GpDHhjL0zPAAwWlmRjJZ4y4I2dFz4DMNqU3tjCtDJgQpvSGzurpQx4YwWAGYDRwtLGjlmeARgtLG1sFU8ZMFoBQDZ2sEUZMFoBQDZ2GO8MwGBhSTe2gdgMwGBhSTd27MEMwGBhSTf2olYZMFoBQDe2vVQZMFoBQNEeiCtaAUDRHogrWgFA0R6IK1oBQNEeiOvCCwAzACz7miwC8GbZC7hnAFj7CCz8oMQZAFY/AsuOM2UAC39EPwPAspeglwEsfG+XGQCWLT3KABZ+sN8MAMt+d6wMYOF7o8wAsPZAtvBFAGUACz/obgaAtQcyv3YpsfCD5coAwtqlRFh7IFt7VcKvvSoR1l6VCGblgSwsfIfdMgC78kAW7MqlRHArD2Rh4QsfygAWvpBhBoCVS4mw8B1hZwBYu5TgtQeyhe/AOgPA2gPZwpdWzACw9kDm1y4lFr4jaRnAwncYnQFg7YFs4cfLFwHEP/Cgm3QEIOE8AO958CP9qseNn73/A/ugXeJ90DB4H3yYeP8HTsy9yHuhs94vnPtgRu9DnHjPC+e+4P2quRdatvcUR++jKdxhLYfBa2vFTW9RsvChOgk2ee9MPlW26e+DQ+ZogJ15seIqq2xKkljlkWDvJlaiNVb5Z5pFq1hjlX96Z1MGMFg5M2Ujv9V2Gv+jqTDtK79fdcHK5jd9LlppjVVecBStqnC5Kg/zBbo0yOMoi7dTK19jdeJKKVnFGqv8SoqSlZoqq7q+TuCKgxCxamli5X2NVf6JbskqmiorqbKqYcPlX+4tWtVw6PI7a1ui0Ypkcn0lsyorqbKKNVb53YaLVr7GiqvY4CrmpaovqWJeqpjXKub1BPNj+nU4jGVidSIuF6yCqbKSGqtoq6y0wooMV1nVxGWyrsqqJpqTq+orr0W9jnmN8sQmH72iDlM3ep3Y5OdgwcZfbpOvFBZspMKmgoO80i3YhIoMg0/ExpKVr7E6McdLVlV9uaq+XFVfVNUXVfXFVePFVX2diI0lK6mxymvqs3cXzmes0Q1lhFTRmtpcfjVyXuGe7ydW+Ja/gs/aSD5PLdjoxRyc2D+1YFPRT/6gljhWz2KkqY1cbkMV/VDprpyzuXy+CV8eZURchc3lUVOUKmzC5TYVKkAqVIBUqACpUAFSoQI0P0c1uuGeaGS0IZIXI6kxihVG+UJNyaimJ6npSWp6yk/vM0Y/0sd/bh73N+/vbr8mk8N/v91/eNo/3L98fPr3y/Cf94/7u7v953dfHh8+3H789nj77u7hw+F/O/Py4y9JaZ0IJ2eeq4KUqg1J2R0+HiaqiKT/+tRr6vk/","brillig_names":["set_guardian7"]},{"name":"set_guardian9","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7V3bbtu6Ev0XP/eBnAsv/ZWNgyJtswsDQVKk6QEOiv77obMj2d2iTZk0WkmLL0GccMxZi5RmzYgif+w+33/8/uXD/vHvp2+793/92D08fbp72T89pk8/fr7bfXzePzzsv3w4/fPOHH6w968G377ePR4+f3u5e37ZvbdMat7t7h8/H37noOlL/t4/3O/eR/fz3bS5IRpaG6FjY840FufsW2Nx3oyNnc00Dmr0rXFQsqeN//Nux4Fu4n2MQ2tr42/0/jbcaxi5DwXurXo/NHbMl72PGgeo0bH82/uoN/be0i/epz7E8G/oI+T64OgH8Bzj0UhNtgfHxxl0pNWq5loHNzSOYWzL1mfakpFhbpJxRzeYXwdBLP9u59WN/lDBeR9lmP4+xuM3U8j5wX4YUzmZbJRrSmSHLyY6mcbZxirDlFcJp01f+Qudvxb+iDp/Tfz5zl8Lf9znXxt/ff418Sd9/rXx5zp/Lfyp6fw18aedvyb+YuevhT8nnb8m/nr+VuLPjW3dr00P/IV+/TbxF3v9pY2/fv228Kemz782/vr8a+Kv158b+ev1lyb+yHb+mvjr9Zcm/rjXX9r46/WXNv56/tbEn0jnr4m/rp+npGh/KJQhpSvdKSmuy9cMKV0TTEnxXWhmSJFOypSUHpKnpIRep8qQ0pOHKSn9iU6OlH5PmZDiDGb0YTu4TExuQgrmPeUyKbbPlAwpmPeUy6SArqcvkIL5kOIyKaBPHgqk9BtthpR+o52SIpgyv0BKnylTUkCr+QVSMKv5l0kBreYXSMGs5hdI6VnylBTfQ3KGlH6jnZIS+o02Q0rPkqekxD5TMqRghmQvQ1vyWt/4lUHM+H0Ng9YFGfD5E5//YdAbzLh2QwZtv4obGSTMEuotGZTOYIlBH8ct14J1EwZ7JGlkkDHTxlsy2GNxI4OCmWbcksGuZloZ7JGkkUGVzmAjg30ONjLoupppZbCrmUYGfVczrQx2NdPKYI8kjQyCvvJySwZ7JGlkEPRlmqsYjDzii/JvBoPpsbiVwRvEYhvGEyRItMCgahycd4GOzseYo3A8TsT74+6W1smr79as2PewXt9v8cbBn/KdS3cMMUYLvosZGlsh/0sX09bB+OH6CyYc7wLZQ2XS951+9+m1HeXq9q94HRZeMWB4BQxvxMKrYOOrAQuvIzC8HguvB9MbxdrexvAGML0R0MYXTG8Ua1Jbw4ulN6LB0hvRYOW/0WLpjWjBxpew9EYsrqHeGl4svREZS29Exsp/o4DpDQEbXwXTG4qV/0YHpjeKR05uDS9Y/uvB9IYHG98ApjcCWP4bwfRGBNMbESv/tcYIGmC0EbZYkiMBxsqBrSEs0ZEAY6kOaxgrDU6AsXSHNWALRxNgQQOMlQpbo2jCQ9GEh8PKhhNgNOEBtn40AUYTHh4tHw6CBhhNeES0fDiCCQ8Ltow0AQYTHtaC5cPWggkPa8GEhyWwfNgSmPCwYKtJE2A04SFg+bAVNOGhaMID7BX/BBhNeIAtKk2A0YSHR8uHPZrwCGjCA+xN/5QOowkPsLWlCTCY8CADlg+TARMeZMGEB4G98G+JwIQHoS0uJbTFpcSCBhhNeAia8AB779+SogkPtMWlhLa4lBxYPkweTXh4QQOMlg8HNOGBtriU0BaXUgTLh9mACQ82YMKD0fYAYCtogNFGGG1xKRNYPswMJjwY7Owoy2h7ALCgCQ+0xaWMtriUwQ6QsuzQhAfYEVKW0fYAYI8mPNAWlzLa4lIGO0fKchQ0wGDCQ9D2ABADJjwEbXGpoC0uFbDjpA5/RAMMJjwEbQ8AYTThgba4VNAWl8rGTpXi4OLYnl3IAN7WXboMeGNVyzLgjRXxZgDeltIqA97Y0sMZgLcVlsqAN/bC9AzAYGFJN1biKQPe2HnhMwCjTemNLUwrA2a0Kb2xs1rKgDdWAJgBGC0sbeyY5RmA0cLSxlbxlAGjFQB0YwdblAGjFQB0Y4fxzgAMFpbcxjYQmwEYLCy5jR17MAMwWFhyG3tRqwwYrQDgNra9VBkwWgHAoT0Qd2gFAIf2QNyhFQAc2gNxh1YAcGgPxN3CCwAzACz7miwC8GbZC7hnAFj7CCz8oMQZAFY/AsuOM2UAC39EPwPAspeglwEsfG+XGQCWLT3KABZ+sN8MAMt+d6wMYOF7o8wAsPZAtvBFAGUACz/obgaAtQcyv3YpsfCD5coAwtqlRFh7IFt7VcKvvSoR1l6VCGblgSwsfIfdMgC78kAW7MqlRKCVB7Kw8IUPZQALX8gwA8DKpURY+I6wMwCsXUrI2gPZwndgnQFg7YFs4UsrZgBYeyDza5cSC9+RtAxg4TuMzgCw9kC28OPliwDiH3jQzW4EoOEyAO9F3xqnX91p41fv/8A+aNd4H1wYvA8+TLz/AyfmXuW98kXvF859MKP3IU68l4VzX/B+1dwrL9t7jqP30RTusFbCcIeyVml6i9KFD9VZsMl7MvlU2aa/Dw6ZkwEm82YlVVbZlCSxKiPBniZW6mqs8s80i1axxir/9M6mDGCwIjNlI7/Vdhr/k6kw7Su/X3XByuY3fS5auRqrvOAoWlXhoioP8wW6NMjjKKu3UytfY3XmSilZxRqr/EqKkpUzVVZ1fZ3BFQchYp3liZX3NVb5J7olq2iqrLTKqoYNyr/cW7Sq4ZDyO2tb5tGKdXJ9JbMqK62yijVW+d2Gi1a+xkqq2JAq5rWqL61iXquYd1XMuzPMj+nX4TCWidWZuFywCqbKSmusoq2ychVWbKTKqiYus6Uqq5pozlTVV16LejfmNU4mNvnoFd0wdaN3E5v8HCzY+Ott8pXCgo1W2FRwkFe6BZtQkWHImdhYsvI1VmfmeMmqqi+q6ouq+uKqvriqL6kaL6nq60xsLFlpjVVeU1+8u0g+Y400VB9SRWtqc/3VKHmFe7mfWOFb/gq+aKP5PLVg467m4Mz+qQWbin7yB7XEsXoWI09t9HobruiHS3flnM31803l+iijShU210dNdVxhE663qVABWqECtEIFaIUK0AoV4PJz1EUa7oknVVJmfTPSGqNYYZQv1JSManrSmp60pqf89L5g9DN9/O/d8/7u48P9t2Ry+O/3x08v+6fHt48v//s6/Ofj8/7hYf/lw9fnp0/3n78/3394ePp0+N/OvP34S1NapyrJmdeqIKdqQ1J2h4+Hiaqq6b8+9Zp6/j8=","brillig_names":["set_guardian9"]},{"name":"set_guardian5","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian5"]},{"name":"set_guardian12","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian12"]},{"name":"set_guardian6","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"guardian","type":{"kind":"struct","path":"structs::Guardian","fields":[{"name":"address","type":{"kind":"struct","path":"structs::Guardian_PK","fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_guardian6"]},{"name":"set_provider","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"provider","type":{"kind":"struct","path":"structs::Provider","fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"evm_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBHJwAABAMnAgMEAicCBAQAHxgABAADgEUdAIBFgEUDHQCARoBGAy4IgEUAAS4IgEYAAiUAAABZJQAAAGgoAgABBIBHJwICBAA7DQABAAIoAIBDBAADKACARAQAASYlAAAC5h4CAAQAHgIABQAzOAAEAAUABicCBAEBJAIABgAAAJElAAADDycCBAAALQgBBScCBgQHABABBgEnAwUEAQAoBQIGLQwGBy0OBAcAKAcCBy0OBAcAKAcCBy0OBAcAKAcCBy0OBAcAKAcCBy0OBAcAKAcCBy0OBActCAEEAAABAgEtDgUEJwIFBAAnAgYEBicCBwABLQwFAyMAAAEIDDgDBgEkAgABAAAClyMAAAEaLQ0EAQEoAAGARAADLQ0DAicCAwQCADgBAwUtDQUELQgBAycCBQQCABABBQEnAwMEAQAoAwIFLQwFBy0OAgcnAgUEBy0IAActDAMIABAABQAlAAADIS0EAAAtDAgCLQgBAycCBQQCABABBQEnAwMEAQAoAwIFLQwFBy0OBAcnAgUEBy0IAActDAMIABAABQAlAAADIS0EAAAtDAgEASgAAYBDAAUtDQUDLQgBBScCBwQCABABBwEnAwUEAQAoBQIHLQwHCC0OAwgnAgcECC0IAAgtDAUJABAABwAlAAADRi0EAAAtDAkDJwIFBAQAOAEFCC0NCActCAEFJwIIBAIAEAEIAScDBQQBACgFAggtDAgJLQ4HCScCCAQJLQgACS0MBQoAEAAIACUAAANGLQQAAC0MCgcAOAEGCC0NCAUtCAEBJwIGBAIAEAEGAScDAQQBACgBAgYtDAYILQ4FCCcCBgQILQgACC0MAQkAEAAGACUAAANGLQQAAC0MCQUmLQ0EARwMAwIAADgHAgUvDAAFAAIuBAABgAMoAIAEBAAHJQAAA2suCIAFAAUAKAUCCAA4CAMJLQ4CCS0OBQQBKAADgEQAAS0MAQMjAAABCCgAgAQEeAANAAAAgASAAyQAgAMAAAMOKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImJQAAAuYBKAABgEQAAy0NAwIcDAIDAxwMAwEAHAwBAgMtDAIBJiUAAALmASgAAYBEAAMtDQMCHAwCAwUcDAMBABwMAQIFLQwCASYuAYADgAYLAIAGAAKAByQAgAcAAAOGIwAAA5EuAIADgAUjAAAD+C4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAPkLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAOzKAGABQQAAQMAgAYAAoAGIwAAA/gm","debug_symbols":"5Z3hbuIwDMffpZ/5EDuxnexVTqcT29iEhGBi7KTTtHe/tqKFQdVwU2+ymy8TnZzm93da4prEfa8eV/dvz7/W26fda3X3473a7B6Wh/VuWx+9fyyq+/16s1k//zr/d+WaP+BS2+D1Zbltjl8Py/2hugOP5BbVavvYfPaR6pM8rTer6i7xx+La3CF21i7gydgPGAdmOBoHFtcbMwwYR3J0NI6EcG78c1EBhEnoU+qsAdI30k/je4q972PG90AinTF7P06fKHVSE/twSY8yMT3gJ/qmD4//v4/gvqEPGuqDhbsLjyVK34jcUA/1Sfoezi484DBgLRTD0VrY0fhAC5LvjJGuBpqcZfhgGT4ZhmfLnmfLnhfLnpdoGD6iZXgxDJ/AMjzbhUdnODxAZzgwQ2d4kkIwPEkhGJ6kEL1leMOTFHrDkxR6y5OU9oeR6Hr4eJknQuVRpefu1OLlGv77Lxs5wWMmQ1fPoalLXTafY2+OKbT8KRjnj6b5vfPG+Y37H1Azf5DEXTo++s/0X1Kr+ttqarUIRaktamx9UWPrixrb4IpSG+ajdsy61ZrK0UqqI7uJtUo5WnlGEWNWa0HjKjOKKLJaqaQZVmY06+TVxlCU2qLGVne2bnK1JY1t0J0JnFxtOZFFmFOOMat1RpmKnFacUZ4iq3VGEWNOqy9oXH0oSKvt36pCsP1bcyDV99UN/KrvlRv4VcfTeX427n827n8x7n8x/v0fzT5HtPRmn/ga+mQ2O9zSm43ea3pyZuPxlt62783m4Bp6sL26jsD2jEVo3P+oes7K8+teJXUDv+0nXgrG/W8840Bk3P+kOna4gd909KA735ClVx075OjF8rMuieVnXTKdZyDdO7Jy9Ml2jpx0Zxpu4C9pzQkXteaEde9Vm1qt7tzH5GqLGlvdeZXJ1c5orVhe7Zx2tmWiHZ7Tvrac1jntastqDQVpLWdPG+teATOx1hlFFDmtrLxm0lj9GGbdNZMCdGWGJVwVSWZRXvymv24G4XV73kd/gsdxYwAv3IMEly61Rt23yGiVIo66S+mNwysvHzkKL053TbQMvPL7exQeDJcVE7DsebR8zaPukqmj8NENflWm2M1sKZ3O7z21bYYrlWbaxPE24BxeNRpOWuUafaWnMNhTPat3joYA/qrV8GKBbCvKtjqL5btW7L7U6t/7+qgPfy/36+X9ZnV8XcrT2/bh7O0phz8vq4sXqbzsdw+rx7f9qnmlyultKg0zSFxASjUNtIfkF0CxOYT2MC2Aoe617vkv","brillig_names":["set_provider"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Wormhole"}},{"name":"fields","value":{"fields":[{"name":"state","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"sequences","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"wormhole_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"token_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}},{"name":"guardian_1","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}],"kind":"struct"}},{"name":"guardian_2","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000b"}}],"kind":"struct"}},{"name":"guardian_3","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000c"}}],"kind":"struct"}},{"name":"guardian_4","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000d"}}],"kind":"struct"}},{"name":"guardian_5","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000e"}}],"kind":"struct"}},{"name":"guardian_6","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000f"}}],"kind":"struct"}},{"name":"guardian_7","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000010"}}],"kind":"struct"}},{"name":"guardian_8","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000011"}}],"kind":"struct"}},{"name":"guardian_9","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000012"}}],"kind":"struct"}},{"name":"guardian_10","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000013"}}],"kind":"struct"}},{"name":"guardian_11","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000014"}}],"kind":"struct"}},{"name":"guardian_12","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000015"}}],"kind":"struct"}},{"name":"guardian_13","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000016"}}],"kind":"struct"}},{"name":"current_guardian_set_index","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000017"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"nonce","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"payloads","type":{"kind":"array","length":8,"type":{"kind":"array","length":31,"type":{"kind":"integer","sign":"unsigned","width":8}}}},{"name":"message_fee","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"consistency","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"Wormhole::publish_message_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Wormhole::publish_message_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Wormhole::get_provider_parameters"}},{"name":"return_type","type":{"fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"evm_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}}],"kind":"struct","path":"structs::Provider"}}],"kind":"struct","path":"Wormhole::get_provider_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian2_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian2_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian13_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian13_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"provider","type":{"fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"evm_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}}],"kind":"struct","path":"structs::Provider"}}],"kind":"struct","path":"Wormhole::set_provider_parameters"}}],"kind":"struct","path":"Wormhole::set_provider_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian11_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian11_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian3_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian3_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian12_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian12_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian8_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian8_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian6_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian6_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian7_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian7_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian10_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian10_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian9_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian9_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::expire_guardian_set_parameters"}}],"kind":"struct","path":"Wormhole::expire_guardian_set_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"evm_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"wormhole_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Wormhole::init_parameters"}}],"kind":"struct","path":"Wormhole::init_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian1_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian1_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian5_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian5_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"guardian","type":{"fields":[{"name":"address","type":{"fields":[{"name":"value0","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value1","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value2","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value3","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value4","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value5","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value6","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value7","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value8","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value9","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value10","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value11","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value12","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value13","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value14","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value15","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value16","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value17","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value18","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value19","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"structs::Guardian_PK"}}],"kind":"struct","path":"structs::Guardian"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::set_guardian4_parameters"}}],"kind":"struct","path":"Wormhole::set_guardian4_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Wormhole::guardian_set_expired_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"Wormhole::guardian_set_expired_abi"}]}},"file_map":{"101":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr","source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"},"102":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr","source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"},"103":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr","source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"},"105":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr","source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"},"106":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr","source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"},"107":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr","source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"},"108":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr","source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"},"12":{"path":"std/convert.nr","source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"},"129":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr","source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"},"132":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"},"136":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr","source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"},"138":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"140":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"},"145":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"},"146":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"147":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"},"148":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr","source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"},"152":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr","source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"},"155":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"16":{"path":"std/embedded_curve_ops.nr","source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"},"164":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"17":{"path":"std/field/bn254.nr","source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"178":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr","source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"},"18":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"},"181":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr","source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"},"182":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr","source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"},"184":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr","source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"},"185":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr","source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"},"187":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr","source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"},"189":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"},"20":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"217":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr","source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"219":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"25":{"path":"std/meta/expr.nr","source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"},"262":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"279":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"},"280":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"294":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr","source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"},"296":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"},"306":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"317":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"331":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"},"335":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr","source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"},"336":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"352":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"},"355":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"361":{"path":"/Users/stavrosvlachakis/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr","source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"},"393":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr","source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"},"42":{"path":"std/option.nr","source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"43":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"50":{"path":"/Users/stavrosvlachakis/AztecProjects/nethermindEth/wormhole/aztec/contracts/src/main.nr","source":"use dep::aztec::macros::aztec;\nmod structs;\n\n#[aztec]\npub contract Wormhole {\n    use crate::structs::{Provider, Guardian, WormholeStorage};\n\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, public},\n            storage::storage,\n        },\n        prelude::{Map, PublicMutable, AztecAddress},\n        protocol_types::traits::ToField\n    };\n\n    // use dep::token::Token; \n\n    #[storage]\n    struct Storage<Context> {\n        state: PublicMutable<WormholeStorage, Context>,\n        sequences: Map<AztecAddress, PublicMutable<u64, Context>, Context>,\n        wormhole_address: PublicMutable<AztecAddress, Context>,\n        token_address: PublicMutable<AztecAddress, Context>,\n        guardian_1: Map<u32, PublicMutable<Guardian, Context>, Context>, // FIXED 13 guardians\n        guardian_2: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_3: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_4: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_5: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_6: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_7: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_8: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_9: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_10: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_11: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_12: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_13: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        current_guardian_set_index: Map<u32, PublicMutable<u64, Context>, Context>, // map index to expiration time\n    }\n\n    #[public]\n    #[initializer]\n    fn init(\n        chain_id: u16,\n        evm_chain_id: u16,\n        wormhole_address: AztecAddress, // TODO: WHO IS THIS? WHERE DO WE GET THE DEPOSIT ADDRESS? WHAT TOKEN ARE WE SENDING?\n        // token_address: AztecAddress, // TODO: DEPLOY THIS BEFORE DEPLOYING WORMHOLE (MUST EXIST ALREADY)\n    ) {\n        let provider: Provider = Provider {\n            chain_id,\n            evm_chain_id,\n        };\n        // Initialize the wormhole state storage\n        storage.state.write(WormholeStorage::init(provider));\n\n        // Define the addresses for the wormhole account and token contract\n        storage.wormhole_address.write(wormhole_address);\n        // storage.token_address.write(token_address);\n        storage.current_guardian_set_index.at(0).write(18_446_744_073_709_551_615); // 2^64 - 1\n    }\n\n    #[public]\n    fn set_guardian1(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_1.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian2(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_2.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian3(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_3.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian4(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_4.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian5(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_5.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian6(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_6.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian7(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_7.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian8(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_8.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian9(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_9.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian10(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_10.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian11(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_11.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian12(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_12.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian13(\n        guardian: Guardian,\n        index: u32,\n    ){ \n        storage.guardian_13.at(index).write(guardian);\n    }\n\n    #[public]\n    fn expire_guardian_set(\n        index: u32,\n    ) {\n        storage.current_guardian_set_index.at(index).write(context.timestamp() + 86400);\n    }\n\n    #[public]\n    fn guardian_set_expired(\n        index: u32,\n    ) -> bool {\n        let timestamp = storage.current_guardian_set_index.at(index).read();\n        context.timestamp() > timestamp\n    }\n\n    #[public]\n    fn publish_message(\n        nonce: u64,\n        payloads: [[u8; 31]; 8], // size of payload needs investigation, looks like max size is Field's size unless we send multiple logs.\n        message_fee: u128,\n        consistency: u8,\n    ) -> u64 {\n        // check fee\n        assert(storage.state.read().message_fee <= message_fee, \"insufficient fee\");\n\n        // increase current sequence\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        // prepare message\n        let msg = [\n            context.msg_sender().to_field(), \n            sequence as Field,  \n            nonce as Field,\n            consistency as Field, \n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        // let receiver_address = storage.wormhole_address.read();\n        // let token_address = storage.token_address.read();\n\n        // // deposit the message fee to wormhole token contract\n        // let _ = Token::at(token_address).transfer_in_public(\n        //     context.msg_sender(),\n        //     receiver_address, \n        //     message_fee,\n        //     sequence as Field,\n        // ).call(&mut context);\n\n        context.emit_public_log(msg);\n\n        sequence\n    }\n\n    #[public]\n    fn set_provider(provider: Provider) {\n        WormholeStorage::set_provider(storage.state.read(),provider);\n    }\n\n    #[public]\n    fn get_provider() -> Provider {\n        WormholeStorage::get_provider(storage.state.read())\n    }\n\n    // TODO: E2E tests with TXE: https://docs.aztec.network/developers/guides/smart_contracts/testing\n}"},"52":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr","source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"},"6":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"},"61":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"63":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr","source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"},"67":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"},"84":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"},"88":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr","source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"},"89":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr","source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"},"93":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"96":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr","source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"},"98":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr","source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"},"99":{"path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr","source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"}}}