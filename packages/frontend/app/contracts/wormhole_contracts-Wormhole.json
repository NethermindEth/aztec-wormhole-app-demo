{
  "transpiled": true,
  "noir_version": "1.0.0-beta.7+0000000000000000000000000000000000000000",
  "name": "Wormhole",
  "functions": [
    {
      "name": "_publish_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_publish_message"
      ]
    },
    {
      "name": "compute_vaa_hash_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "body_bytes",
            "type": {
              "kind": "array",
              "length": 1860,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "body_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "compute_vaa_hash_unconstrained"
      ]
    },
    {
      "name": "expire_guardian_set",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEgdAIBIgEgELgiASAABJQAAAEwlAAAAcCgCAAEEgEknAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJSHgIAAgAeAgADADMqAAIAAwAEJAIABAAAAJQlAAACexwKAQIAJwIBAAAtCAEDJwIEBAQACAEEAScDAwQBACIDAgQtCgQFLQ4BBQAiBQIFLQ4BBQAiBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAIAQYBJwMFBAEAIgUCBi0KBgctDgEHACIHAgctDgEHACIHAgctDgEHACIHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuDIBFAAUtCAEGAAABAgEuDIBEAAYnAgcAHScCCAQJLQgACS0KBAotCgMLLQoFDC0KBg0tCgcOAAgACAAlAAACjS0CAAAnAgcECC0IAAgtCgQJLQoDCi0KBQstCgYMLQoCDQAIAAcAJQAAAo0tAgAALQsGAgsiAAKARAAHJAIABwAAAdAnAggEADwGCAEnAgIEBy0IAActCgQILQoDCS0KBQotCgYLAAgAAgAlAAADsS0CAAAtCwMCASIAAoBHAAQtCwQDCioDAQILIgACgEQAASQCAAEAAAIhJQAABMQeAgABBikCAAIFAAFRgAAqAQIEDioBBAUkAgAFAAACRiUAAATWHAoEAQAwCgABAAMmKACABAR4AA0AAACABIADJACAAwAAAnoqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYlAAACUi0LBAYLIgAGgEQAByQCAAcAAAKvJwIIBAA8BggBLQsDBgsiAAaAQwAHJAIABwAAA0IjAAACyC0LAwYtCwEHLQsCCC0LBAkNIgAGgEMACiQCAAoAAALtJQAABOguAgAHgAMoAIAEBAAEJQAABPouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARwAFDioGBQckAgAHAAADLSUAAATWLQ4KAS0OCAItDgUDLQ4JBCMAAAOwJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA7EtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAAT6LgiABQAJASIACYBHAAotDgUKLQ4JAS0OBwIuDIBHAAMtDggEIwAAA7AmJQAAAlIuCIBFAAUjAAADwQ0iAAWAQwAGJAIABgAABDEjAAAD1i0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAERyMAAASzLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAASzASIABYBHAAYtCgYFIwAAA8EqAQABBQLcbieAdhKdPAQCASYqAQABBUWnynEZQeQVPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcm",
      "debug_symbols": "tZjdTiM9DIbvpcccJI6dH25lhVCBsqpUFdSFT/qEuPe1Z/Jm2kqJYNCetE89yTt27DjT+dg87R7ef9/vj88vfza3vz42D6f94bD/fX94edy+7V+Oav3YOPvwPm1u+WbjiTa3yb71t3cKQRS8AgdAVhAFUQvZGMkVIgFShQRLgiXDkmOF4gACKDOQY4DdQu9OVCqEAMAlhoVhEVgkVYgeECskBxAAbpEZYCEXhUKANENwHiAVvAMwoE4PFAClQoAlYAzbTcmgVBBYpnU2mNZ5glhhimICDE4YnAMAloLpFoUBWxQzCKDenX0AYDBhMNW7c4DFqoXYwKZrkTCnCiIVogOYq9GgVEgBkCpkDxAABhdML9UiLgBsupaxeAHomKCFJMQVAlVgB9DBISiIWdigVDBXZ4DFPJzA6jlkA9tCWi3R0sS6GtHSxCoYLTsz5AqWlBlShaKRsgomb7PEIFYgB2BArhAwhnHJyoZ1EZIt+ASTGxOkCrbOM+QKGZbJH12xZJvRIDsHyBWsJGaog7OVxAyYFcyfbFAq2PacIVUQDxAABkdMj7AkTE+YnjHdaoN17+RpDSfIMxQriRlKhclng8lnMRBAqRBgsXYhWhvFsizeIFawrjWDAMqcd++sbVXKoGnRZmo2ajZqttBsodm46XGzCTWKINtaldqM2GbYClowSroGMtkm52cqcxjem/eVms28r2Rzg5GdFZWazTqB8EQRZBusUlMW1yiBIjXKoNTum5ott3FIhvel6RXcg9w09/PzZoMD7/7ttNvZeXd2Auq5+Lo97Y5vm9vj++Fws/lve3ifBv153R6n77ftSa/qyu2OT/qtgs/7w87o82aZ7fpT9RSNXKfrwpTSJDQXFyJ+IOKsxc4ajulMgi8kqC+hzTNVCS4uNol0GUnoK+guxjpk5q7CMIxSEIZmqxuG/DiM+G/DkNyykfvZyAMJSQKJGHzPidJXKOLgRBHxPwxDN3Q3jFFx69gWx8VayJUbNNohywZhz4sf6Wp/DGpT2wEkSm4Kga+84L4ChbbF9PlSFg3hr3sh8IIc9b0YFGfSmq4SegqHRUP1LjRSXyMIAmG/lDdRuFQYVCf54hEIudLXGNSnELa6BLdOoe306GVdHJRLy+lZRr6lkXxLahpEQuHfavgYXesYKa/T0Kc/aKRC6zT0captNRqs6WjHc8uLl7MWfL3jaZAXfbBG10j6j27R8Je7jQYVliLKPJ2tqPaSb/S/EpcTzYde/wuDPhw5t0Lns+51fTIPFjRngkTOLD2Jr0dC3Ui+fhoU6a6GjGrD+XYaUOpmJYyO+NA0cvDdszGk0aG0PHFdHgfl625QO9gy5f4j16BCs4stsfrM25PgYVYkLud8PGvn36iO8+fP2G/GQzfaY5f+GcjrJGLzwud1XoR2qCiu80LILc0rrZOIS//LZV0gSxsOtC6QwMsfE1kVSGIkJHFcI1BawyiyKojikM9C6zxoNVWS/DCEa4E7/bl93J8u3rp+mtRpv3047OrP5/fj49nVt/9fcQVvbV9PL4+7p/fTzpSWV7f68Yv0lQvFfGf/4/Wn7vYb/ftrP/101d/oy9G7T3PmLw==",
      "brillig_names": [
        "expire_guardian_set"
      ]
    },
    {
      "name": "get_provider",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "structs::Provider",
            "fields": [
              {
                "name": "chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              },
              {
                "name": "evm_chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAASyUAAABMLgIAAYBELgIAAoBFKAIAAwSARCcCBAQCOw4ABAADJiUAAAGRHgIAAgAeAgADADMqAAIAAwAEJwICAQEkAgAEAAAAdSUAAAG6JwICAAAtCAEDJwIEBAcACAEEAScDAwQBACIDAgQtCgQFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBS0IAQIAAAECAS0OAwInAgMEACcCBAQGJwIFAAEnAgYEAS0KAwEjAAAA8QwqAQQDJAIAAwAAAUUjAAABAy0LAgEAKgEGAy0LAwInAgMEAgAqAQMFLQsFBBwKAgMDHAoDAQAcCgECAxwKBAMDHAoDAQAcCgEDAy0KAgEtCgMCJhwKAQMAACoFAwcvCgAHAAMtCwIHLgIAB4ADKACABAQAByUAAAHMLgiABQAIACIIAgkAKgkBCi0OAwotDggCACoBBgMtCgMBIwAAAPEoAIAEBHgADQAAAIAEgAMkAIADAAABuSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAAecjAAAB8i4AgAOABSMAAAJZLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAkUuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAhQoAYAFBAABAwCABgACgAYjAAACWSY=",
      "debug_symbols": "tZbbjuIwDIbfJde9yMFJbF5lNEIFyqhSVVAHVloh3n2dErd0pVQj2L0hf9z2ix07Jjd1aHbXr23bH0/favNxU7uh7br2a9ud9vWlPfVsvSmdftCoDVQKg9rEShHPjOaReDSVMhqyMFZEZOFZWCsiZOGMCLGAWEAsXosAEZRFcCIwiyhLRFkUBYgCJAGSF5GBVjsRGWhHfwKLcVEO2I6LUhKYxbjoKGIWKJa0qLUs0j49RLY4bUSIxYjFsmPWsXDsqoUkkoXdcMkf65PwD3+cNyIwi9HDUWSfXQQRYkF5B5PP8X6vlKR6exmaJmX6KfdcEed6aPqL2vTXrqvUr7q7ji99n+t+HC/1wE+5FJr+wCMDj23XJHWv5q91+VPjfID8ORcE0YQwOi4gZgWi0w4+GBrsEwIWCFtGAFLMCCAdJkRcRuLKBAQn+4AARcJqGEQShjFUDMO/HUb4v2F4nLKB5WzgCsJHL4jgTMkJKhPIa3GCvDdvhsFdrBjGWnGbkJphZgQ7p9T/5YZdg8C0FybOR4x725KxUpsRjRyQiM4VdwNWEIASCkv7EmLOCUt6DUFuQlAZsboXet4LwCJipTyt5v+BzGAdYYI4E35MAdSSWECHRYbV/4CxUuhEU41q7rkTwtPP0xKcdK4Y4LXMBgtvI6bTFoPXJYT164dt7sFAyzr/5Fm9b4fFBemeaENb77omT4/Xfv/09PL7LE/kgnUeTvvmcB2aRJpvWfzzQbri5v+ZLlU84zOHIU1MmsQK6fOe/PgD",
      "brillig_names": [
        "get_provider"
      ]
    },
    {
      "name": "guardian_set_expired",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEgdAIBIgEgELgiASAABJQAAAFIlAAAAdi4CAAGASSgCAAIEgEknAgMEATsOAAMAAigAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJLHgIAAgAeAgADADMqAAIAAwAEJAIABAAAAJolAAACdBwKAQIAJwIBAAAtCAEDJwIEBAQACAEEAScDAwQBACIDAgQtCgQFLQ4BBQAiBQIFLQ4BBQAiBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAIAQYBJwMFBAEAIgUCBi0KBgctDgEHACIHAgctDgEHACIHAgctDgEHACIHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuDIBFAAUtCAEGAAABAgEuDIBEAAYnAgcAHScCCAQJLQgACS0KBAotCgMLLQoFDC0KBg0tCgcOAAgACAAlAAAChi0CAAAnAgcECC0IAAgtCgQJLQoDCi0KBQstCgYMLQoCDQAIAAcAJQAAAoYtAgAALQsGAgsiAAKARAAHJAIABwAAAdYnAggEADwGCAEnAgIEBy0IAActCgQILQoDCS0KBQotCgYLAAgAAgAlAAADqi0CAAAtCwMCASIAAoBHAAQtCwQDCioDAQILIgACgEQAASQCAAEAAAInJQAABL0vCgADAAEcCgEDBRwKAwIAHAoCAQUeAgACBgwqAQIDLQoDASYoAIAEBHgADQAAAIAEgAMkAIADAAACcyoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJiUAAAJLLQsEBgsiAAaARAAHJAIABwAAAqgnAggEADwGCAEtCwMGCyIABoBDAAckAgAHAAADOyMAAALBLQsDBi0LAQctCwIILQsECQ0iAAaAQwAKJAIACgAAAuYlAAAEzy4CAAeAAygAgAQEAAQlAAAE4S4IgAUACgAiCgILACoLBgwtDgUMASIABoBHAAUOKgYFByQCAAcAAAMmJQAABW8tDgoBLQ4IAi0OBQMtDgkEIwAAA6knAgYEBy0IAActCgEILQoCCS0KAwotCgQLAAgABgAlAAADqi0CAAAtCwEGLQsCBy0LBAguAgAGgAMoAIAEBAAEJQAABOEuCIAFAAkBIgAJgEcACi0OBQotDgkBLQ4HAi4MgEcAAy0OCAQjAAADqSYlAAACSy4IgEUABSMAAAO6DSIABYBDAAYkAgAGAAAEKiMAAAPPLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAARAIwAABKwtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAAThLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABKwBIgAFgEcABi0KBgUjAAADuioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABPwjAAAFBy4AgAOABSMAAAVuLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABVouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABSkoAYAFBAABAwCABgACgAYjAAAFbiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjRaiM7DIbfJde5sGXJtvoqSylpmy6BkJZse+BQ+u4reSRPEhizO2Vvki8a+x/JkuWZfG6e948fPx8Op5fXX5u7H5+bx/PheDz8fDi+Pu3eD68nsX5ugn5ESJs73Mp33dwV+U7yOwYBjAJRgQ0IBUhBLKBjMjpUg5Ic3FLdUt3C4JAngBAdyCAGB72F3B0SObAB+iV0C7mF3JKTQzEo4JANanTwW3Bw0JBZoU6QQnIoBjE6ZAMIDujABhrFBG5BH0N6U1Agg+yWts4NqkGLokE2qD64+uDKBuwWtumoUUxQDDSKCcjBpiP4YPDBCRzcotUCqKDTpUiQkkGODtmgqKtZgRzYoFVLg2LA0cEGUwgO3WLTKep0KWOC6CBjkhQSpeBQDTAbkAxOpCA3TTorg4NbdMFRBxexoNRG1lkICnILTAJabA1KdMgGmp0JJBcoC1XUeSQFNlDnJygGGsUEPib5JVR/skI1aG4oaNlMkA2aPw3c0vwpCtWA0wRVN+ME2SAGB3SwWVVLAquAlsQE2QCDAzpUA/LB5NOzW7JPLz69+HRtKSg7pbY1VNDamCBPwAEMms8NcFoxbj4rADi4RfsGSXJZC5KiAhtoQU5QDbR9ad6ZywQxhNgpO8Vui90G3QbdlrotdT3sNt1ORuykO8uoz8h9hi6gxhKDriA1W/O9kTqvUQgVoxigU3bS5aPUiJyg27SvETZiJz04jLoyJidtbkbkpD4b9fuWbit9nOcixtr1ar8Ht7lfX9uNn24P7+f9Xg+3i+NODsG33Xl/et/cnT6Ox+3mv93xow369bY7te/33VmuysrtT8/yLYIvh+Ne6Ws7zw7LU2OijDY9pszcJSQXVyJxIBK0n04aAeFCAq8kYFkCKxeTQA65S5TrSNKyQsXk6yC7d1FhGAazhyE5WgyDvh1G/rdhUO3ZqMvZqAMJKuQSOcUlJ3hZgSm4Eyxn1TfDiLAcxqi4ZV6cNah2EbpxA0Y7ZN4gGHH2o9zsj0FtxppdgmcnEt54gcsKkPoWA3kgmzUI/9wLci8gwLIXg+IsUtMmUZjSrCF6VxplWSORB4JxLm+AdK0wqE6I7FkFCLysMahPAt/q8pC1TqHv9BxpXRxQuef0IiN/pVFiT2oZRALp32rIcRh6xyh1nUYpyTUKwzoNDr2HMwzWdLTjsedF3h/z4o6HQV5yCd41CuQLjXi922BQYSV7mZeLFZVesrL/lbDU/9KoD0fsZ0G8kLj1Iw1WtNTom77UlBZP9zRcjL4amcKiBI4jmQ94vKiwW5FhKGEOBeuiRB7V11yjCJe9nP8isxXmzF48tt1mdlSj8sLqLQx5OZRBidYKLiFvOLQkMYyE8nzOyyvrvGXpjzUunz/zcjMeutEfu6Q06jqJPKekrvMi9UNFcJ0XBGFuXmWdRJ77X+V1gcwlnmBdIAnnFxNaFUjBvlUxrxHg3vqYVgXBwfPJsM6DXlPynv/NEG4F7uXn7ulwvvqL9Uulzofd43FvP18+Tk8XV9//f/Mr/hft2/n1af/8cd6r0vw/rXz8kD88t5DpXt/e5afs8K28k+vPqFdzlqv1/kud+Q0=",
      "brillig_names": [
        "guardian_set_expired"
      ]
    },
    {
      "name": "init",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "evm_chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "receiver_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "init"
      ]
    },
    {
      "name": "parse_vaa_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 66,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 1860,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "parse_vaa_unconstrained"
      ]
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_message"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "publish_message_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "publish_message_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "publish_message_in_public"
      ]
    },
    {
      "name": "set_guardian1",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian1"
      ]
    },
    {
      "name": "set_guardian10",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian10"
      ]
    },
    {
      "name": "set_guardian11",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian11"
      ]
    },
    {
      "name": "set_guardian12",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian12"
      ]
    },
    {
      "name": "set_guardian13",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP+Uq5xbiaKIJGSFhEjEhk/6FHHv6/K4noFI3dqd7J7AQw39lt+2q+xu+Hn6cvfp+Y+P949fv/15evf+5+nT0/3Dw/0fHx++fb79cf/tcUR/njb/kvLWT+/qzYBUT+90woikzSnroORUJKiO65JMGrE8f082qEI9qBFrxJSYWpBlSIN6gtqisnk2H0vJCZKgwqeFWCVWL7EeJAWyoJYhDVKyaQsyvxt9UoV6UC+QLqpbhlpQ2iAJcm+LiBV+r/gIslNNELE5H2eqkAVNb2fiCuUKlSAjZqi4tzO5t0W6SLYECRRXSCpQjEUyMV9r2ReiFFeRST2oapBkyEffnFqCBOpBWiANMq4wVDqxjkoPlbYVKFRaSpBAXDHXpFdUKwUa1xZfxa3mIJ+tRRbUxhVlqjQLUmJKzIgZsU6sR0y3AhFLxBKxTCwTK8QKsUqsEhNiQgwfig/Fh+JD8aH4UHwoPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+Gj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46OHj7yFj0HEErFELBPLxAqxQqwSq8SEmBBrxBoxJabEpg+dpEE9QxFLW4aIeXUvkqC8QRXqQaVAFlRRrigLyt7DztRQbmRrKCvZFGW8JbwlvKUeynlLUCjntEEVimw5Fyiy5ZKhyJYrypVsgrKQTVBuZGsoK9kUZSObodzJ1kN5ngUWVSiylVSgyFZyhiJbKQmKbPPMsIhsFWUhm6DcyNZQVrIpykY2Q7mTraPcI1vdChTZaspQZJtnhkWRbZ4ZFgmEcq0QykI2QbmRraGsZFOUjWyGspGto9wjm1B5QuUJlScpsgmVJ1mgUJZSIZRrgVAWslF58/SwCGUlG5UnSjYqT4xsVJ7QVRqV17bI1qi8RldpVF6jqzQqr9FVGpXX6CqNymt0lUblNbpKo/IaXaVReY2u0qi8RldpVF6jqyiVp3QVpfKUrqJUntJVlMpTuopSeUpXUSpP6SpK5SldRak8pasolad0FaXylK6iVJ7SVZTKM7qKUXlGVzEqz+gqRuUZXcWoPKOrGJVndBWj8oyucj5bdCdfV3WcDnP3mqlpkseyk/eDRcS8H9Q6yWPl5lTmPl3FaV7RnLy2FlmQr7pFGuQzU9XJ+0G1SS3Ia2ZRhSzI+L3Op36f6/BWkq+hM81RnUmDfOUssqBCzMcnm5OvlzP5ellkQb5KFnGF97BFXOudS9KkHuSda5EumvvqIoHiirmvLiKWC4RKQcVXiWQnv8+LLMjXxqIeNH1Mch/znmb3sagHWcSKd1bxdVC88qROakG+OhcJ1Nd6mXveolhDc89bREyJKTEjZsQ6ej1i8+l4UQvyjrmoQlwx72mZ5Hdjxuboz9SXj/kkvIjYXBFn8mt9jVfvG4uIed8QndSCvG8sCmXZNkiDUoYsKBeIGPMhzIcwH1LJMddBfXm5OcXbnI8/nu7u/GXOq9c746XP99unu8cfp3ePzw8PN6f/3T48z1/68/vt4/z+4/ZpfDpW/N3jl/F9CH69f7hzerm5XL3tXzrel7S6Lh/vSXpHYhyi34ikA5HNH//PGlvNryTqG4m8LzEOGLokxqw0JPStk7KvMB4D4z6MvryrcGij97CRUt+1Ib9to/23NsSYDdufDTuQEJWQaCXtDaLvK3TZYhBdJP2mjfEWc9fG0eIej7GNWzF2EUTkl2Hkowq5FMhoXpdx6C/1cbA2xxuHkOiXQYz++Fah7iv4M8+SGA84ctGQ+vdHITGK8QS/P4qDxTkOWiExTlrlojH03mjovkaRMFLTZXmPbfWtwsHqHJtxCiNjs97XOFif47FjSUjZrlOg0sdDwHU+xnGQOX01I/9IQxOTqgdOcvlvNcY7zo2OoXadxnirGBra83UafaOH93xwT48qvjIv46V12634fDAvTbfoGjqe1i4a6W215YMVpi2Wub66o6OXXNn/NO31v3LUh+uW6H9Zd8dRDu6oFTTGE9XublCOJrZYUw4qZq9aYPplIPVfUTnY5Rulr2l71Yr7P3Ajmd1tvCRK++M4uq2ZrWm8It8/NNlRR6fmBtZrJGzrscgsbe06CUu/K5E4cNh46rxuFKyNIWF7EvVoXsceezm1tFebk/79I/nr03Tb31qOJBKHyDS62XUSjVEku24UpV9qrV83CsnbpRXrdRLt0s2tX2fksqmMB/HrJOrlMUuuMqI1JkRru0agV+FIfpWJ8aYqBPJ1I2BNdZXftPCrwIfx4+3n+6c3/yDx4lJP97efHu7Wj1+fHz+/+vTH/7/HJ/EPFt+fvn2++/L8dOdKl/+yGF/ejxerN+PPsB/G38/8x/EcfyNi/uN4ufDet3zd2ocXH8xf",
      "brillig_names": [
        "set_guardian13"
      ]
    },
    {
      "name": "set_guardian14",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian14"
      ]
    },
    {
      "name": "set_guardian15",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian15"
      ]
    },
    {
      "name": "set_guardian16",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian16"
      ]
    },
    {
      "name": "set_guardian17",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian17"
      ]
    },
    {
      "name": "set_guardian18",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian18"
      ]
    },
    {
      "name": "set_guardian19",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICdJwAABAMnAlYEVScCVwQAHwoAVgBXgEgdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgIyAjAIdAICNgI0CHQCAjoCOAh0AgI+AjwIdAICQgJACHQCAkYCRAh0AgJKAkgIdAICTgJMCHQCAlICUAh0AgJWAlQIdAICWgJYCHQCAl4CXAh0AgJiAmAIdAICZgJkCHQCAmoCaAh0AgJuAmwIdAICcgJwELgiASAABLgiASQACLgiASgADLgiASwAELgiATAAFLgiATQAGLgiATgAHLgiATwAILgiAUAAJLgiAUQAKLgiAUgALLgiAUwAMLgiAVAANLgiAVQAOLgiAVgAPLgiAVwAQLgiAWAARLgiAWQASLgiAWgATLgiAWwAULgiAXAAVLgiAXQAWLgiAXgAXLgiAXwAYLgiAYAAZLgiAYQAaLgiAYgAbLgiAYwAcLgiAZAAdLgiAZQAeLgiAZgAfLgiAZwAgLgiAaAAhLgiAaQAiLgiAagAjLgiAawAkLgiAbAAlLgiAbQAmLgiAbgAnLgiAbwAoLgiAcAApLgiAcQAqLgiAcgArLgiAcwAsLgiAdAAtLgiAdQAuLgiAdgAvLgiAdwAwLgiAeAAxLgiAeQAyLgiAegAzLgiAewA0LgiAfAA1LgiAfQA2LgiAfgA3LgiAfwA4LgiAgAA5LgiAgQA6LgiAggA7LgiAgwA8LgiAhAA9LgiAhQA+LgiAhgA/LgiAhwBALgiAiABBLgiAiQBCLgiAigBDLgiAiwBELgiAjABFLgiAjQBGLgiAjgBHLgiAjwBILgiAkABJLgiAkQBKLgiAkgBLLgiAkwBMLgiAlABNLgiAlQBOLgiAlgBPLgiAlwBQLgiAmABRLgiAmQBSLgiAmgBTLgiAmwBULgiAnABVJQAABJAlAAAEtCgCAAEEgJ0nAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAuAHgIAVwAeAgBYADMqAFcAWABZJAIAWQAABNglAAALqRwKVVcAJwJVAAAtCAFYJwJZBAQACAFZAScDWAQBACJYAlktCllaLQ5VWgAiWgJaLQ5VWgAiWgJaLQ5VWisCAFkAAAAAAAAAAAIAAAAAAAAAAC0IAVonAlsEBQAIAVsBJwNaBAEAIloCWy0KW1wtDlVcACJcAlwtDlVcACJcAlwtDlVcACJcAlwtDllcLQgBWQAAAQIBLQ5YWS0IAVgAAAECAS0OWlgtCAFaAAABAgEuDIBFAFotCAFbAAABAgEuDIBEAFsnAlwAHCcCXQReLQgAXi0KWV8tClhgLQpaYS0KW2ItClxjAAgAXQAlAAALuy0CAAAnAlwEXS0IAF0tClleLQpYXy0KWmAtClthLQpXYgAIAFwAJQAAC7stAgAALQtbVwsiAFeARABcJAIAXAAABhQnAl0EADwGXQEnAlcEXC0IAFwtClldLQpYXi0KWl8tCltgAAgAVwAlAAAM3y0CAAAtC1lXLQtYXC0LWl0tDldZLQ5cWC0OXVouDIBGAFsBIgBcgEcAWC0LWFcKKldVWAsiAFiARABVJAIAVQAABn8lAAAN8hwKAVUAHAoCAQAcCgMCABwKBAMAHAoFBAAcCgYFABwKBwYAHAoIBwAcCgkIABwKCgkAHAoLCgAcCgwLABwKDQwAHAoODQAcCg8OABwKEA8AHAoREAAcChIRABwKExIAHAoUEwAcChUUABwKFhUAHAoXFgAcChgXABwKGRgAHAoaGQAcChsaABwKHBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian19"
      ]
    },
    {
      "name": "set_guardian2",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP+Uq5xbiaKIJGSFhEjEhk/6FHHv6/K4noFI3dqd7J7AQw39lt+2q+xu+Hn6cvfp+Y+P949fv/15evf+5+nT0/3Dw/0fHx++fb79cf/tcUR/njb/kvLWT+/qzYBUT+90woikzSnroORUJKiO65JMGrE8f082qEI9qBFrxJSYWpBlSIN6gtqisnk2H0vJCZKgwqeFWCVWL7EeJAWyoJYhDVKyaQsyvxt9UoV6UC+QLqpbhlpQ2iAJcm+LiBV+r/gIslNNELE5H2eqkAVNb2fiCuUKlSAjZqi4tzO5t0W6SLYECRRXSCpQjEUyMV9r2ReiFFeRST2oapBkyEffnFqCBOpBWiANMq4wVDqxjkoPlbYVKFRaSpBAXDHXpFdUKwUa1xZfxa3mIJ+tRRbUxhVlqjQLUmJKzIgZsU6sR0y3AhFLxBKxTCwTK8QKsUqsEhNiQgwfig/Fh+JD8aH4UHwoPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+Gj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46OHj7yFj0HEErFELBPLxAqxQqwSq8SEmBBrxBoxJabEpg+dpEE9QxFLW4aIeXUvkqC8QRXqQaVAFlRRrigLyt7DztRQbmRrKCvZFGW8JbwlvKUeynlLUCjntEEVimw5Fyiy5ZKhyJYrypVsgrKQTVBuZGsoK9kUZSObodzJ1kN5ngUWVSiylVSgyFZyhiJbKQmKbPPMsIhsFWUhm6DcyNZQVrIpykY2Q7mTraPcI1vdChTZaspQZJtnhkWRbZ4ZFgmEcq0QykI2QbmRraGsZFOUjWyGspGto9wjm1B5QuUJlScpsgmVJ1mgUJZSIZRrgVAWslF58/SwCGUlG5UnSjYqT4xsVJ7QVRqV17bI1qi8RldpVF6jqzQqr9FVGpXX6CqNymt0lUblNbpKo/IaXaVReY2u0qi8RldpVF6jqyiVp3QVpfKUrqJUntJVlMpTuopSeUpXUSpP6SpK5SldRak8pasolad0FaXylK6iVJ7SVZTKM7qKUXlGVzEqz+gqRuUZXcWoPKOrGJVndBWj8oyucj5bdCdfV3WcDnP3mqlpkseyk/eDRcS8H9Q6yWPl5lTmPl3FaV7RnLy2FlmQr7pFGuQzU9XJ+0G1SS3Ia2ZRhSzI+L3Op36f6/BWkq+hM81RnUmDfOUssqBCzMcnm5OvlzP5ellkQb5KFnGF97BFXOudS9KkHuSda5EumvvqIoHiirmvLiKWC4RKQcVXiWQnv8+LLMjXxqIeNH1Mch/znmb3sagHWcSKd1bxdVC88qROakG+OhcJ1Nd6mXveolhDc89bREyJKTEjZsQ6ej1i8+l4UQvyjrmoQlwx72mZ5Hdjxuboz9SXj/kkvIjYXBFn8mt9jVfvG4uIed8QndSCvG8sCmXZNkiDUoYsKBeIGPMhzIcwH1LJMddBfXm5OcXbnI8/nu7u/GXOq9c746XP99unu8cfp3ePzw8PN6f/3T48z1/68/vt4/z+4/ZpfDpW/N3jl/F9CH69f7hzerm5XL3tXzrel7S6Lh/vSXpHYhyi34ikA5HNH//PGlvNryTqG4m8LzEOGLokxqw0JPStk7KvMB4D4z6MvryrcGij97CRUt+1Ib9to/23NsSYDdufDTuQEJWQaCXtDaLvK3TZYhBdJP2mjfEWc9fGweK2xoSa5kt1yC+DyEf1cSmP0bouo9BfquNgZY73DSHRDYXRHd8q1H0Ff+JZEuPxRi4aUv/+KCRGMZ7f90dxsDTHMSskxjmrXDSG3hsN3dcoEkZquizusam+VThYm2MrTmFkbNX7Ggerczx0LAkp23UK1Pl4BLjOxzgMMqevZuQfaWhiUvXASS7/rcZ4w7nRL9Su0xjvFENDe75Oo2908J4P7ulRxVfmZbyybrsVnw/mpekWXUPHs9pFI72ttnywwrTFMtdXd3T0kqu6Xyl73a8c9eC6Jbpf1t1RlIP7aQWN8TS1uxOUo2kt1pRDitmrBph+GUj9V1QOdvhG4WvaXjXi/g/cSGZnGy+I0v44jm5rZmMar8f3D0x21M+puIH1GgnbejQPS1u7TsLS70okDhs2njivGwVrY0jYnkQ9mtexw15OLO3V1qR//zj++iTd9jeWI4nEATKNXnadRGMUya4bRemXWuvXjULydmnEep1Eu/Ry69cZuWwp4yH8Ool6ecSSq4xojQnR2q4R6FU4jl9lYrylCoF83QhYU13lNy38KvBh/Hj7+f7pzT9HvLjU0/3tp4e79ePX58fPrz798f/v8Un8c8X3p2+f7748P9250uU/LMaX9+Ol6s34E+yH8bcz/3E8w9+ImP84Xiy89w1ft/bhxQfzFw==",
      "brillig_names": [
        "set_guardian2"
      ]
    },
    {
      "name": "set_guardian3",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian3"
      ]
    },
    {
      "name": "set_guardian4",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian4"
      ]
    },
    {
      "name": "set_guardian5",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian5"
      ]
    },
    {
      "name": "set_guardian6",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian6"
      ]
    },
    {
      "name": "set_guardian7",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian7"
      ]
    },
    {
      "name": "set_guardian8",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian8"
      ]
    },
    {
      "name": "set_guardian9",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian9"
      ]
    },
    {
      "name": "set_provider",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "provider",
            "type": {
              "kind": "struct",
              "path": "structs::Provider",
              "fields": [
                {
                  "name": "chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                },
                {
                  "name": "evm_chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQdAIBEgEQDHQCARYBFAy4IgEQAAS4IgEUAAiUAAABZJQAAAGEoAgABBIBGJwICBAA7DgACAAEoAIBDBAADJiUAAAJgHgIABAAeAgAFADMqAAQABQAGJwIEAQEkAgAGAAAAiiUAAAKJJwIEAAAtCAEFJwIGBAcACAEGAScDBQQBACIFAgYtCgYHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBy0IAQQAAAECAS0OBQQnAgUEACcCBgQGJwIHAAEnAggEAS0KBQMjAAABBgwqAwYJJAIACQAAAhQjAAABGC0LBAkBIgAJgEMACi0LCgQcCgQLBRwKCwoAJwIEBAQAKgkEDC0LDAscCgsMBRwKDAQAJwILBAUAKgkLDS0LDQwcCgwNBhwKDQsAACoJBg0tCw0MHAoMDQUcCg0JABwKAQwAHAoCAQAtCAECJwINBAcACAENAScDAgQBACICAg0tCg0OLQ4MDgAiDgIOLQ4BDgAiDgIOLQ4KDgAiDgIOLQ4EDgAiDgIOLQ4LDgAiDgIOLQ4JDi0KBQMjAAAB1QwqAwYBJAIAAQAAAegjAAAB5yYcCgMBAAAqBwEEACICAgUAKgUDCS0LCQEwCgABAAQAKgMIAS0KAQMjAAAB1RwKAwkAACoHCQovCgAKAAktCwQKLgIACoADKACABAQAByUAAAKbLgiABQALACILAgwAKgwDDS0OCQ0tDgsEACoDCAktCgkDIwAAAQYoAIAEBHgADQAAAIAEgAMkAIADAAACiCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAArYjAAACwS4AgAOABSMAAAMoLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAxQuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAuMoAYAFBAABAwCABgACgAYjAAADKCY=",
      "debug_symbols": "tZdRbiIxDIbvMs88xImT2L1KVVW0nVZICBCFlVYVd197iDOwUqIWdl+Yb5zMHzuJHfI1vI0vx4/n1eZ9+zk8PH4NL/vVer36eF5vX5eH1XYj1q/B6Q84PzzgQp55eMjyBHkHJ+ClHUAhFgjBgASiAAaDXCB6A7MksySzZDCIBcgZoAEXYBuCy6DeeYMi6AEMUgHvDNCgCPrJnyQwDZoVtA8LsDcQHS+RBgcG6dwUprEmMIuONfXRiZoguNIUYgE0C8pY3itwgVhGD5ELJAnZowIVyGIJToEKkFp0LMoF1PkzFAs6b2AWdf4MsYA6fwY04AIhGFABNEE0wWiCMRVI+nkQIP1KnEddwRAV1CIzH10wMIvuukAKapFFiUEtrCBjoYQcdXT0CtIHZaw4bTbtHKlAigWyM0gFCAzMwtaHdQny6bQYLEGeD/tx1Py4yBjJo91yP24Ow8PmuF4vhl/L9XHq9LlbbqbnYbmXVnF23LzJUwTfV+tR6bSYv3btTyHEhOVzCIm5SkiCXolAR8TpxjprOPQXEngl4dsSSJyLBLJLVSJfRxLaCoTB5oEQmwrdMJgtDABuhhHvDiP93zAi1dWg9mpQRyLmaBIpQMsJbiuwpFpR4BjhzjDAt8PobW45L3LVwBirSPzLDd8VqXMBeU4xoHSt0dmbmcASJFMIzdnAjgQSmARerOpPJOY1EeTbJDhUCW5LdOfCzXOB1JTobE85kZNFIpyxisgh+W0VJGcLixSoqeF7OwxdLRno5/0lZ+v3NdJcPVPgmzS+HUu4P5Z+wuU5aZFzK+F87PoBsx+5mXC+V0VD1SD5B9XaZD73TkZKtXgEotieVPonKr1q6uyMZsjtDdKNJvq6MoEZ2n70ptXXPwvkqX1Kd8pp5lwrCF9k7g8kyHEyL8Cl2yRqNb1ZAmo1JbhYlR95UfeGSDRLYeitK8Q0Z1y6saqnYJmfE94o4fFuCagnXIquJYHQP6v5ov5cH5NP8rZ8Xe2vbqUnVduvli/rsby+HzevF62H3ztrsVvtbr99Hd+O+1GV5qut/DyC3EnkTvqkF1x9ldIOPusrTK+0gOCeTurMHw==",
      "brillig_names": [
        "set_provider"
      ]
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "verify_vaa",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "211358376073803959": {
            "error_kind": "string",
            "string": "Need at least 1 signature"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3163564695355654215": {
            "error_kind": "string",
            "string": "Insufficient valid signatures"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4790011804579310016": {
            "error_kind": "string",
            "string": "VM version incompatible"
          },
          "5003515106221862139": {
            "error_kind": "string",
            "string": "Too many signatures"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14656550611213696286": {
            "error_kind": "string",
            "string": "guardian index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "verify_vaa_unconstrained",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Wormhole"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "state",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "sequences",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "receiver_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_1",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_2",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_3",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_4",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_5",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_6",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_7",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000010"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_8",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000011"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_9",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000012"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_10",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000013"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_11",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000014"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_12",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000015"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_13",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000016"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_14",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000017"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_15",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000018"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_16",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000019"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_17",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_18",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_19",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "current_guardian_set_index",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::_publish_message_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::_publish_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "body_bytes",
                    "type": {
                      "kind": "array",
                      "length": 1860,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "body_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::compute_vaa_hash_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::compute_vaa_hash_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::expire_guardian_set_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::expire_guardian_set_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_provider_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  }
                ],
                "kind": "struct",
                "path": "structs::Provider"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::guardian_set_expired_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::guardian_set_expired_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "receiver_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::init_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::init_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::parse_vaa_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 66,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 1860,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::parse_vaa_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian10_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian10_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian11_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian11_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian12_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian12_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian13_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian13_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian14_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian14_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian15_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian15_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian16_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian16_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian17_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian17_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian18_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian18_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian19_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian19_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian1_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian1_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian2_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian2_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian3_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian3_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian4_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian4_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian5_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian5_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian6_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian6_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian7_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian7_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian8_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian8_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian9_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian9_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "provider",
                    "type": {
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        },
                        {
                          "name": "evm_chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Provider"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_provider_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::verify_vaa_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::verify_vaa_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "103": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n    size_in_fields,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n"
    },
    "104": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "107": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "109": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ, _) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "110": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "112": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "113": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "114": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "115": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "116": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "117": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "118": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "119": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "135": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "148": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "151": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "155": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "156": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "157": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "158": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "159": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "165": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "166": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "168": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "173": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "177": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "186": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "200": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "203": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "204": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "206": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "207": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "209": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "211": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "223": {
      "path": "/home/jdev/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "241": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "284": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "301": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "302": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "316": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "318": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "319": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "329": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] != 0,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] != 0,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] != 0,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] != 0,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "340": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "354": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "359": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as u8 as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as u16 as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as u32 as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as u64 as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "360": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "378": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "381": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "391": {
      "path": "/home/jdev/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "393": {
      "path": "/home/jdev/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr",
      "source": "mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n"
    },
    "415": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        array_concat(note_completion_log, padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "/home/jdev/programming/nethermind-wormhole/aztec/contracts/src/main.nr",
      "source": "use dep::aztec::macros::aztec;\nmod structs;\n\n/*\nAztec Wormhole contract for the Wormhole bridge on Aztec testnet.\n\nThis contract is responsible for:\n- Parsing and verifying Wormhole VAA messages\n- Managing guardian sets and their expiration\n- Publishing messages to the Wormhole network\n- Receiving messages from the Wormhole network\n\nTo deploy this contract, follow the instructions in the deploy.md file, or use the deploy.sh script.\n\nTODO: Fix hardcoded addresses in private functions.\n*/\n\n#[aztec]\npub contract Wormhole {\n    use crate::structs::{Guardian, Provider, Signature, WormholeStorage};\n    use dep::keccak256::keccak256;\n\n    use dep::aztec::{\n        macros::{functions::{initializer, internal, private, public, utility}, storage::storage},\n        prelude::{AztecAddress, Map, PublicMutable},\n        protocol_types::traits::ToField,\n    };\n\n    use dep::token::Token;\n\n    #[utility]\n    unconstrained fn parse_vaa_unconstrained(\n        bytes: [u8; 2000],\n        actual_length: u32,\n    ) -> (u32, u8, [[u8; 66]; 13], [u8; 1860], u32) {\n        let guardian_set_index: u32 = (bytes[1] as u32) << 24\n            | (bytes[2] as u32) << 16\n            | (bytes[3] as u32) << 8\n            | (bytes[4] as u32);\n\n        let signatures_len = bytes[5];\n\n        // Parse signatures\n        let mut signatures = [[0; 66]; 13];\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig_start: u32 = 6 + (i as u32 * 66);\n                for j in 0..66 {\n                    let byte_index: u32 = sig_start + j as u32;\n                    if byte_index < actual_length {\n                        signatures[i as u32][j] = bytes[byte_index];\n                    }\n                }\n            }\n        }\n\n        // Calculate where the body starts\n        let body_start: u32 = 6 + (signatures_len as u32 * 66);\n\n        // Calculate actual body length\n        let body_length: u32 = actual_length - body_start;\n\n        let mut body_bytes = [0; 1860];\n        for i in 0..1860 {\n            if i < body_length {\n                body_bytes[i] = bytes[body_start + i];\n            }\n        }\n\n        (guardian_set_index, signatures_len, signatures, body_bytes, body_length)\n    }\n\n    #[utility]\n    unconstrained fn compute_vaa_hash_unconstrained(\n        body_bytes: [u8; 1860],\n        body_length: u32,\n    ) -> [u8; 32] {\n        // Extract only the actual body content\n        let mut actual_body = [0; 1860];\n        for i in 0..body_length {\n            actual_body[i] = body_bytes[i];\n        }\n\n        // Double hash as per Wormhole spec\n        let hash: [u8; 32] = keccak256(actual_body, body_length);\n        let double_hash: [u8; 32] = keccak256(hash, 32);\n\n        double_hash\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        state: PublicMutable<WormholeStorage, Context>,\n        sequences: Map<AztecAddress, PublicMutable<u64, Context>, Context>,\n        receiver_address: PublicMutable<AztecAddress, Context>,\n        token_address: PublicMutable<AztecAddress, Context>,\n        guardian_1: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_2: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_3: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_4: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_5: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_6: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_7: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_8: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_9: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_10: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_11: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_12: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_13: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_14: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_15: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_16: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_17: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_18: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_19: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        current_guardian_set_index: Map<u32, PublicMutable<u64, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(\n        chain_id: u16,\n        evm_chain_id: u16,\n        receiver_address: AztecAddress,\n        token_address: AztecAddress,\n    ) {\n        let provider: Provider = Provider { chain_id, evm_chain_id };\n        storage.state.write(WormholeStorage::init(provider));\n        storage.receiver_address.write(receiver_address);\n        storage.token_address.write(token_address);\n        storage.current_guardian_set_index.at(0).write(18_446_744_073_709_551_615);\n    }\n\n    #[public]\n    fn publish_message_in_public(\n        nonce: u64,\n        payloads: [[u8; 31]; 8],\n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress,\n        token_nonce: Field,\n    ) -> u64 {\n        assert(storage.state.read().message_fee <= message_fee, \"insufficient fee\");\n\n        let receiver_address = storage.receiver_address.read();\n        let token_address = storage.token_address.read();\n\n        let _ = Token::at(token_address)\n            .transfer_in_public(from, receiver_address, message_fee, token_nonce)\n            .call(&mut context);\n\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(),\n            sequence as Field,\n            nonce as Field,\n            consistency as Field,\n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    #[private]\n    fn publish_message_in_private(\n        nonce: u64,\n        payloads: [[u8; 31]; 8],\n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress,\n        token_nonce: Field,\n    ) {\n        assert(1 <= message_fee, \"insufficient fee\");\n\n        // NOTE: These addresses are hardcoded because private functions cannot access PublicMutable storage.\n        // They must be updated to match the deployed contract addresses before compilation.\n        let receiver_address = AztecAddress {\n            inner: 0x0d071eec273fa0c82825d9c5d2096965a40bcc33ae942714cf6c683af9632504,\n        };\n        let token_address = AztecAddress {\n            inner: 0x037e5d19d6d27e2fb7c947cfe7c36459e27d35e46dd59f5f47373a64ff491d2c,\n        };\n\n        let _ = Token::at(token_address)\n            .transfer_in_private(from, receiver_address, message_fee, token_nonce)\n            .call(&mut context);\n\n        Wormhole::at(context.this_address())._publish_message(nonce, payloads, consistency).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _publish_message(nonce: u64, payloads: [[u8; 31]; 8], consistency: u8) -> u64 {\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(),\n            sequence as Field,\n            nonce as Field,\n            consistency as Field,\n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    // Keep all your guardian setters exactly as they are\n    #[public]\n    fn set_guardian1(guardian: Guardian, index: u32) {\n        storage.guardian_1.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian2(guardian: Guardian, index: u32) {\n        storage.guardian_2.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian3(guardian: Guardian, index: u32) {\n        storage.guardian_3.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian4(guardian: Guardian, index: u32) {\n        storage.guardian_4.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian5(guardian: Guardian, index: u32) {\n        storage.guardian_5.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian6(guardian: Guardian, index: u32) {\n        storage.guardian_6.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian7(guardian: Guardian, index: u32) {\n        storage.guardian_7.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian8(guardian: Guardian, index: u32) {\n        storage.guardian_8.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian9(guardian: Guardian, index: u32) {\n        storage.guardian_9.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian10(guardian: Guardian, index: u32) {\n        storage.guardian_10.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian11(guardian: Guardian, index: u32) {\n        storage.guardian_11.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian12(guardian: Guardian, index: u32) {\n        storage.guardian_12.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian13(guardian: Guardian, index: u32) {\n        storage.guardian_13.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian14(guardian: Guardian, index: u32) {\n        storage.guardian_14.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian15(guardian: Guardian, index: u32) {\n        storage.guardian_15.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian16(guardian: Guardian, index: u32) {\n        storage.guardian_16.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian17(guardian: Guardian, index: u32) {\n        storage.guardian_17.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian18(guardian: Guardian, index: u32) {\n        storage.guardian_18.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian19(guardian: Guardian, index: u32) {\n        storage.guardian_19.at(index).write(guardian);\n    }\n\n    #[public]\n    fn expire_guardian_set(index: u32) {\n        storage.current_guardian_set_index.at(index).write(context.timestamp() + 86400);\n    }\n\n    #[public]\n    fn guardian_set_expired(index: u32) -> bool {\n        let timestamp = storage.current_guardian_set_index.at(index).read();\n        context.timestamp() > timestamp\n    }\n\n    #[public]\n    fn set_provider(provider: Provider) {\n        let updated_storage = WormholeStorage::set_provider(storage.state.read(), provider);\n        storage.state.write(updated_storage);\n    }\n\n    #[public]\n    fn get_provider() -> Provider {\n        WormholeStorage::get_provider(storage.state.read())\n    }\n\n    #[contract_library_method]\n    unconstrained fn verify_vaa_unconstrained(\n        bytes: [u8; 2000],\n        actual_length: u32,\n    ) -> ([[u8; 32]; 13], [[u8; 32]; 13], [[u8; 64]; 13], [u8; 32], u8) {\n        let version = bytes[0];\n        assert(version == 1, \"VM version incompatible\");\n\n        let (_, signatures_len, signatures, body_bytes, body_length) =\n            parse_vaa_unconstrained(bytes, actual_length);\n\n        assert(signatures_len >= 1, \"Need at least 1 signature\");\n        assert(signatures_len <= 13, \"Too many signatures\");\n\n        // Compute the VAA hash\n        let hash = compute_vaa_hash_unconstrained(body_bytes, body_length);\n\n        let guardian = crate::structs::Guardian::new(\n            [\n                0x13, 0x94, 0x7b, 0xd4, 0x8b, 0x18, 0xe5, 0x3f, 0xda, 0xee, 0xe7, 0x7f, 0x34, 0x73,\n                0x39, 0x1a, 0xc7, 0x27, 0xc6, 0x38,\n            ],\n            [\n                0xfa, 0x9d, 0x6b, 0x47, 0x04, 0x3b, 0x15, 0xb4, 0xb3, 0x3c, 0xf0, 0x5b, 0xb1, 0xde,\n                0x0f, 0x13, 0xda, 0x70, 0x31, 0x36, 0xb2, 0xcd, 0x15, 0x73, 0x24, 0xeb, 0x61, 0x5e,\n                0xc9, 0xee, 0x95, 0x12,\n            ],\n            [\n                0x38, 0xc6, 0x7b, 0x54, 0xd0, 0x3e, 0x3c, 0x18, 0x2e, 0x0e, 0x77, 0xb8, 0x5f, 0x88,\n                0x3c, 0xcd, 0x74, 0xdd, 0xdf, 0xc5, 0x90, 0x10, 0xfb, 0xf4, 0x75, 0xa0, 0xbe, 0xe6,\n                0x59, 0x3c, 0xe2, 0xbd,\n            ],\n        );\n\n        // Prepare arrays for constrained verification\n        let mut pub_keys_x = [[0; 32]; 13];\n        let mut pub_keys_y = [[0; 32]; 13];\n        let mut signature_bytes_array = [[0; 64]; 13];\n\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig = Signature::from_bytes(signatures[i as u32]);\n                let guardian_idx = sig.guardian_index;\n\n                assert(guardian_idx < 19, \"guardian index out of bounds\");\n\n                // Get public key components as byte arrays\n                let pub_key_x = guardian.get_pub_key_x();\n                let pub_key_y = guardian.get_pub_key_y();\n\n                pub_keys_x[i as u32] = pub_key_x;\n                pub_keys_y[i as u32] = pub_key_y;\n\n                // Prepare signature bytes\n                let mut signature_bytes = [0; 64];\n                for j in 0..32 {\n                    signature_bytes[j] = sig.r[j];\n                    signature_bytes[32 + j] = sig.s[j];\n                }\n                signature_bytes_array[i as u32] = signature_bytes;\n            }\n        }\n        \n        (pub_keys_x, pub_keys_y, signature_bytes_array, hash, signatures_len)\n    }\n\n    #[private]\n    fn verify_vaa(bytes: [u8; 2000], actual_length: u32) {\n        // Safety: verify_vaa_unconstrained performs parsing and validation that doesn't need constraints\n        let (pub_keys_x, pub_keys_y, signature_bytes_array, hash, signatures_len) =\n            unsafe { verify_vaa_unconstrained(bytes, actual_length) };\n\n        let required_signatures = 1;\n        let mut verified_count = 0;\n\n        // Testnet VAA verification only utilizes a single guardian.\n\n        // TODO: Uncomment this when ECDSA verification in loop is implemented.\n        // See issue: https://github.com/noir-lang/noir/pull/8993\n        \n        // for i in 0..13 {\n        //     if i < signatures_len {\n        //        let is_valid = std::ecdsa_secp256k1::verify_signature(\n        //            pub_keys_x[i as u32],\n        //            pub_keys_y[i as u32],\n        //            signature_bytes_array[i as u32],\n        //            hash,\n        //        );\n\n        //        if is_valid {\n        //            verified_count += 1;\n        //        }\n        //    }\n        //}\n\n        let is_valid = std::ecdsa_secp256k1::verify_signature(\n            pub_keys_x[0 as u32],\n            pub_keys_y[0 as u32],\n            signature_bytes_array[0 as u32],\n            hash,\n        );\n\n        if is_valid {\n            verified_count += 1;\n        }\n\n        assert(verified_count >= required_signatures, \"Insufficient valid signatures\");\n    }\n}\n\nmod tests {\n    use crate::{structs::Signature, Wormhole};\n    use dep::aztec::prelude::AztecAddress;\n    use dep::aztec::protocol_types::traits::FromField;\n    use dep::aztec::test::helpers::cheatcodes;\n    use dep::aztec::test::helpers::test_environment::TestEnvironment;\n\n    #[test]\n    unconstrained fn test_signature_extraction() {\n        let signature_bytes: [u8; 66] = [\n            0x00, // Guardian index\n            // R component (32 bytes)\n            0x46, 0x82, 0xbc, 0x4d, 0x5f, 0xf2, 0xe5, 0x4d, 0xc2, 0xee, 0x5e, 0x0e, 0xb6, 0x4f,\n            0x5c, 0x6c, 0x07, 0xaa, 0x44, 0x9a, 0xc5, 0x39, 0xab, 0xc6, 0x3c, 0x2b, 0xe5, 0xc3,\n            0x06, 0xa4, 0x8f, 0x23,\n            // S component (32 bytes)\n            0x3e, 0x93, 0x00, 0x17, 0x0a, 0x82, 0xad, 0xf3, 0xc3, 0xb7, 0xf4, 0x3f, 0x23, 0x17,\n            0x6f, 0xb0, 0x79, 0x17, 0x4a, 0x58, 0xd6, 0x7d, 0x14, 0x24, 0x77, 0xf6, 0x46, 0x67,\n            0x5d, 0x86, 0xeb, 0x63,\n            // Recovery ID\n            0x01,\n        ];\n\n        let sig = Signature::from_bytes(signature_bytes);\n\n        assert(sig.guardian_index == 0, \"Guardian index should be 0\");\n        assert(sig.r[0] == 0x46, \"R component should start with 0x46\");\n        assert(sig.s[0] == 0x3e, \"S component should start with 0x3e\");\n    }\n\n    #[test]\n    unconstrained fn test_verify_vaa_logic() {\n        // Setup env, generate keys\n        let mut env = TestEnvironment::new();\n\n        cheatcodes::reset(); // Reset TXE state\n\n        // Deploy contract - need to specify all 3 parameters for deploy\n        let dummy_owner = AztecAddress::from_field(1);\n        let receiver_address = AztecAddress::from_field(\n            0x0d071eec273fa0c82825d9c5d2096965a40bcc33ae942714cf6c683af9632504,\n        );\n        let token_address = AztecAddress::from_field(\n            0x037e5d19d6d27e2fb7c947cfe7c36459e27d35e46dd59f5f47373a64ff491d2c,\n        );\n\n        let contract_address = env\n            .deploy_self(\"Wormhole\")\n            .with_public_void_initializer(\n                dummy_owner,\n                Wormhole::interface().init(56, 56, receiver_address, token_address),\n            )\n            .to_address();\n\n        let mut vaa_bytes: [u8; 2000] = [0; 2000];\n        let actual_length = 221;\n\n        // NOTE: This is a real Wormhole VAA from Arbitrum Sepolia testnet.\n        // VAA bytes, fetched from https://wormholescan.io/#/tx/0xf93fd41efeb09ff28174824d4abf6dbc06ac408953a9975aa4a403d434051efc\n        // This VAA contains the message \"Hello Wormhole!\" and is used to test VAA verification logic.\n        let wh_vaa: [u8; 221] = [\n            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x46, 0x82, 0xbc, 0x4d, 0x5f, 0xf2, 0xe5,\n            0x4d, 0xc2, 0xee, 0x5e, 0x0e, 0xb6, 0x4f, 0x5c, 0x6c, 0x07, 0xaa, 0x44, 0x9a, 0xc5,\n            0x39, 0xab, 0xc6, 0x3c, 0x2b, 0xe5, 0xc3, 0x06, 0xa4, 0x8f, 0x23, 0x3e, 0x93, 0x00,\n            0x17, 0x0a, 0x82, 0xad, 0xf3, 0xc3, 0xb7, 0xf4, 0x3f, 0x23, 0x17, 0x6f, 0xb0, 0x79,\n            0x17, 0x4a, 0x58, 0xd6, 0x7d, 0x14, 0x24, 0x77, 0xf6, 0x46, 0x67, 0x5d, 0x86, 0xeb,\n            0x63, 0x01, 0x68, 0x4b, 0xfa, 0xd4, 0x49, 0x96, 0x02, 0xd2, 0x27, 0x13, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x7f, 0x31, 0xe0,\n            0x74, 0xbf, 0x2c, 0x81, 0x93, 0x91, 0xd5, 0x27, 0x29, 0xf9, 0x55, 0x06, 0xe0, 0xa7,\n            0x2f, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f,\n            0x72, 0x6d, 0x68, 0x6f, 0x6c, 0x65, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ];\n\n        for i in 0..221 {\n            vaa_bytes[i] = wh_vaa[i];\n        }\n\n        let _ = env.call_private_void(\n            dummy_owner,\n            Wormhole::at(contract_address).verify_vaa(vaa_bytes, actual_length),\n        );\n    }\n}\n"
    },
    "51": {
      "path": "/home/jdev/programming/nethermind-wormhole/aztec/contracts/src/structs.nr",
      "source": "use dep::aztec::{protocol_types::traits::{Deserialize, Packable, Serialize}, prelude::AztecAddress};\nuse std::meta::derive;\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Provider {\n    pub chain_id: u16,\n    pub evm_chain_id: u16,\n}\n\n// Keep your Guardian_PK EXACTLY as is - don't touch it\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian_PK {\n    // Address (20 bytes)\n    pub value0: u8, pub value1: u8, pub value2: u8, pub value3: u8, pub value4: u8,\n    pub value5: u8, pub value6: u8, pub value7: u8, pub value8: u8, pub value9: u8,\n    pub value10: u8, pub value11: u8, pub value12: u8, pub value13: u8, pub value14: u8,\n    pub value15: u8, pub value16: u8, pub value17: u8, pub value18: u8, pub value19: u8,\n    \n    // Public Key X (32 bytes)\n    pub pub_key_x0: u8, pub pub_key_x1: u8, pub pub_key_x2: u8, pub pub_key_x3: u8,\n    pub pub_key_x4: u8, pub pub_key_x5: u8, pub pub_key_x6: u8, pub pub_key_x7: u8,\n    pub pub_key_x8: u8, pub pub_key_x9: u8, pub pub_key_x10: u8, pub pub_key_x11: u8,\n    pub pub_key_x12: u8, pub pub_key_x13: u8, pub pub_key_x14: u8, pub pub_key_x15: u8,\n    pub pub_key_x16: u8, pub pub_key_x17: u8, pub pub_key_x18: u8, pub pub_key_x19: u8,\n    pub pub_key_x20: u8, pub pub_key_x21: u8, pub pub_key_x22: u8, pub pub_key_x23: u8,\n    pub pub_key_x24: u8, pub pub_key_x25: u8, pub pub_key_x26: u8, pub pub_key_x27: u8,\n    pub pub_key_x28: u8, pub pub_key_x29: u8, pub pub_key_x30: u8, pub pub_key_x31: u8,\n    \n    // Public Key Y (32 bytes)\n    pub pub_key_y0: u8, pub pub_key_y1: u8, pub pub_key_y2: u8, pub pub_key_y3: u8,\n    pub pub_key_y4: u8, pub pub_key_y5: u8, pub pub_key_y6: u8, pub pub_key_y7: u8,\n    pub pub_key_y8: u8, pub pub_key_y9: u8, pub pub_key_y10: u8, pub pub_key_y11: u8,\n    pub pub_key_y12: u8, pub pub_key_y13: u8, pub pub_key_y14: u8, pub pub_key_y15: u8,\n    pub pub_key_y16: u8, pub pub_key_y17: u8, pub pub_key_y18: u8, pub pub_key_y19: u8,\n    pub pub_key_y20: u8, pub pub_key_y21: u8, pub pub_key_y22: u8, pub pub_key_y23: u8,\n    pub pub_key_y24: u8, pub pub_key_y25: u8, pub pub_key_y26: u8, pub pub_key_y27: u8,\n    pub pub_key_y28: u8, pub pub_key_y29: u8, pub pub_key_y30: u8, pub pub_key_y31: u8,\n}\n\nimpl Guardian_PK {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian_PK { \n            // Address\n            value0: address[0], value1: address[1], value2: address[2], value3: address[3], value4: address[4],\n            value5: address[5], value6: address[6], value7: address[7], value8: address[8], value9: address[9],\n            value10: address[10], value11: address[11], value12: address[12], value13: address[13], value14: address[14],\n            value15: address[15], value16: address[16], value17: address[17], value18: address[18], value19: address[19],\n            \n            // Public Key X\n            pub_key_x0: pub_key_x[0], pub_key_x1: pub_key_x[1], pub_key_x2: pub_key_x[2], pub_key_x3: pub_key_x[3],\n            pub_key_x4: pub_key_x[4], pub_key_x5: pub_key_x[5], pub_key_x6: pub_key_x[6], pub_key_x7: pub_key_x[7],\n            pub_key_x8: pub_key_x[8], pub_key_x9: pub_key_x[9], pub_key_x10: pub_key_x[10], pub_key_x11: pub_key_x[11],\n            pub_key_x12: pub_key_x[12], pub_key_x13: pub_key_x[13], pub_key_x14: pub_key_x[14], pub_key_x15: pub_key_x[15],\n            pub_key_x16: pub_key_x[16], pub_key_x17: pub_key_x[17], pub_key_x18: pub_key_x[18], pub_key_x19: pub_key_x[19],\n            pub_key_x20: pub_key_x[20], pub_key_x21: pub_key_x[21], pub_key_x22: pub_key_x[22], pub_key_x23: pub_key_x[23],\n            pub_key_x24: pub_key_x[24], pub_key_x25: pub_key_x[25], pub_key_x26: pub_key_x[26], pub_key_x27: pub_key_x[27],\n            pub_key_x28: pub_key_x[28], pub_key_x29: pub_key_x[29], pub_key_x30: pub_key_x[30], pub_key_x31: pub_key_x[31],\n            \n            // Public Key Y\n            pub_key_y0: pub_key_y[0], pub_key_y1: pub_key_y[1], pub_key_y2: pub_key_y[2], pub_key_y3: pub_key_y[3],\n            pub_key_y4: pub_key_y[4], pub_key_y5: pub_key_y[5], pub_key_y6: pub_key_y[6], pub_key_y7: pub_key_y[7],\n            pub_key_y8: pub_key_y[8], pub_key_y9: pub_key_y[9], pub_key_y10: pub_key_y[10], pub_key_y11: pub_key_y[11],\n            pub_key_y12: pub_key_y[12], pub_key_y13: pub_key_y[13], pub_key_y14: pub_key_y[14], pub_key_y15: pub_key_y[15],\n            pub_key_y16: pub_key_y[16], pub_key_y17: pub_key_y[17], pub_key_y18: pub_key_y[18], pub_key_y19: pub_key_y[19],\n            pub_key_y20: pub_key_y[20], pub_key_y21: pub_key_y[21], pub_key_y22: pub_key_y[22], pub_key_y23: pub_key_y[23],\n            pub_key_y24: pub_key_y[24], pub_key_y25: pub_key_y[25], pub_key_y26: pub_key_y[26], pub_key_y27: pub_key_y[27],\n            pub_key_y28: pub_key_y[28], pub_key_y29: pub_key_y[29], pub_key_y30: pub_key_y[30], pub_key_y31: pub_key_y[31],\n        }\n    }\n\n    pub fn default() -> Self {\n        Guardian_PK::new([0; 20], [0; 32], [0; 32])\n    }\n\n    pub fn as_array(Guardian_PK: Guardian_PK) -> [u8; 20] {\n        [Guardian_PK.value0, Guardian_PK.value1, Guardian_PK.value2, Guardian_PK.value3, Guardian_PK.value4, \n         Guardian_PK.value5, Guardian_PK.value6, Guardian_PK.value7, Guardian_PK.value8, Guardian_PK.value9,\n         Guardian_PK.value10, Guardian_PK.value11, Guardian_PK.value12, Guardian_PK.value13, Guardian_PK.value14,\n         Guardian_PK.value15, Guardian_PK.value16, Guardian_PK.value17, Guardian_PK.value18, Guardian_PK.value19]\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        [self.pub_key_x0, self.pub_key_x1, self.pub_key_x2, self.pub_key_x3,\n         self.pub_key_x4, self.pub_key_x5, self.pub_key_x6, self.pub_key_x7,\n         self.pub_key_x8, self.pub_key_x9, self.pub_key_x10, self.pub_key_x11,\n         self.pub_key_x12, self.pub_key_x13, self.pub_key_x14, self.pub_key_x15,\n         self.pub_key_x16, self.pub_key_x17, self.pub_key_x18, self.pub_key_x19,\n         self.pub_key_x20, self.pub_key_x21, self.pub_key_x22, self.pub_key_x23,\n         self.pub_key_x24, self.pub_key_x25, self.pub_key_x26, self.pub_key_x27,\n         self.pub_key_x28, self.pub_key_x29, self.pub_key_x30, self.pub_key_x31]\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        [self.pub_key_y0, self.pub_key_y1, self.pub_key_y2, self.pub_key_y3,\n         self.pub_key_y4, self.pub_key_y5, self.pub_key_y6, self.pub_key_y7,\n         self.pub_key_y8, self.pub_key_y9, self.pub_key_y10, self.pub_key_y11,\n         self.pub_key_y12, self.pub_key_y13, self.pub_key_y14, self.pub_key_y15,\n         self.pub_key_y16, self.pub_key_y17, self.pub_key_y18, self.pub_key_y19,\n         self.pub_key_y20, self.pub_key_y21, self.pub_key_y22, self.pub_key_y23,\n         self.pub_key_y24, self.pub_key_y25, self.pub_key_y26, self.pub_key_y27,\n         self.pub_key_y28, self.pub_key_y29, self.pub_key_y30, self.pub_key_y31]\n    }\n\n    // Add ONE optimization - return Fields for ECDSA verification without breaking existing code\n    pub fn get_pub_key_x_field(self) -> Field {\n        let bytes = self.get_pub_key_x();\n        Field::from_le_bytes(bytes)\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        let bytes = self.get_pub_key_y();\n        Field::from_le_bytes(bytes)\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian {\n    pub address: Guardian_PK,\n}\n\nimpl Guardian {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian { address: Guardian_PK::new(address, pub_key_x, pub_key_y) }\n    }\n    \n    pub fn default() -> Self {\n        Guardian { address: Guardian_PK::default() }\n    }\n\n    pub fn get_address(g: Self) -> [u8; 20] {\n        Guardian_PK::as_array(g.address)\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        self.address.get_pub_key_x()\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        self.address.get_pub_key_y()\n    }\n\n    // Add the same optimization here\n    pub fn get_pub_key_x_field(self) -> Field {\n        self.address.get_pub_key_x_field()\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        self.address.get_pub_key_y_field()\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Signature {\n    pub r: [u8; 32],\n    pub s: [u8; 32],\n    pub v: u8,\n    pub guardian_index: u8\n}\n\nimpl Signature {\n    pub fn new(r: [u8; 32], s: [u8; 32], v: u8, guardian_index: u8) -> Self {\n        Signature { r, s, v, guardian_index }\n    }\n\n    pub fn default() -> Self {\n        Signature { r: [0; 32], s: [0; 32], v: 0, guardian_index: 0 }\n    }\n\n    pub fn from_bytes(bytes: [u8; 66]) -> Self {\n        // Wormhole VAA signature format:\n        // byte 0: guardian index\n        // bytes 1-32: r (32 bytes) - BIG ENDIAN\n        // bytes 33-64: s (32 bytes) - BIG ENDIAN  \n        // byte 65: recovery id (v)\n        \n        let guardian_index = bytes[0];\n        \n        // Extract r (bytes 1-32) - keep as big endian\n        let r = [bytes[1], bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7], bytes[8],\n                 bytes[9], bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16],\n                 bytes[17], bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24],\n                 bytes[25], bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32]];\n        \n        // Extract s (bytes 33-64) - keep as big endian\n        let s = [bytes[33], bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40],\n                 bytes[41], bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48],\n                 bytes[49], bytes[50], bytes[51], bytes[52], bytes[53], bytes[54], bytes[55], bytes[56],\n                 bytes[57], bytes[58], bytes[59], bytes[60], bytes[61], bytes[62], bytes[63], bytes[64]];\n        \n        let v = bytes[65];\n        \n        Signature { r, s, v, guardian_index }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Body {\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n}\n\nimpl Body {\n    pub fn new(\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n    ) -> Self {\n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n    \n    pub fn default() -> Self {\n        Body {\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n        }\n    }\n\n    pub fn from_bytes(bytes: [u8; 1060]) -> Body {\n        let timestamp: u32 = u32_from_u8s_le([bytes[0], bytes[1], bytes[2], bytes[3]]);\n        let nonce: u32 = u32_from_u8s_le([bytes[4], bytes[5], bytes[6], bytes[7]]);\n        let emitter_chain_id: u16 = u16_from_u8s_le([bytes[8], bytes[9]]);\n\n        // Parse emitter bytes into aztec address\n        let emitter_address_bytes: [u8; 32] = [\n            bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16], bytes[17],\n            bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24], bytes[25],\n            bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32], bytes[33],\n            bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40], bytes[41],\n        ];\n\n        let emitter_address_field: Field = Field::from_le_bytes(emitter_address_bytes);\n        let emitter_address: AztecAddress = AztecAddress {\n            inner: emitter_address_field,\n        };\n        \n        let sequence: u64 = u64_from_u8s_le([bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48], bytes[49]]);\n        let consistency_level: u8 = bytes[50];\n        \n        // Extract payload (1024 bytes starting from index 51)\n        let mut payload = [0; 1024];\n        for i in 0..1024 {\n            payload[i] = bytes[51 + i];\n        }\n        \n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct VAA {\n    pub version: u8,\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n    pub guardian_set_index: u32,\n    pub signatures: [Signature; 13],\n    pub hash: [u8; 32], \n}\n\nimpl VAA {\n    pub fn default() -> Self {\n        VAA {\n            version: 0,\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n            guardian_set_index: 0,\n            signatures: [Signature::new([0;32], [0;32], 0, 0); 13],\n            hash: [0; 32]\n        }\n    }\n\n    pub fn new(\n        version: u8,\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n        guardian_set_index: u32,\n        signatures: [Signature; 13],\n        hash: [u8; 32]\n    ) -> Self {\n        VAA {\n            version,\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload,\n            guardian_set_index,\n            signatures,\n            hash\n        }\n    }\n\n    pub fn get_guardian_set_index(vaa: Self) -> u32{\n        vaa.guardian_set_index\n    }\n\n    pub fn get_timestamp(vaa: Self) -> u32 {\n        vaa.timestamp\n    }\n\n    pub fn get_payload(vaa: Self) -> [u8; 1024] {\n        vaa.payload\n    }\n\n    pub fn get_hash(vaa: Self) -> [u8; 32] {\n        vaa.hash\n    }\n\n    pub fn get_emitter_chain_id(vaa: Self) -> u16 {\n        vaa.emitter_chain_id\n    }\n\n    pub fn get_sequence(vaa: Self) -> u64 {\n        vaa.sequence\n    }\n\n    pub fn get_consistency_level(vaa: Self) -> u8 {\n        vaa.consistency_level\n    }\n}\n\n// Helper functions\npub fn u32_from_u8s_le(bytes: [u8; 4]) -> u32 {\n    let mut result = 0;\n    for i in 0..4 {\n        result |= (bytes[i as u32] as u32) << (i * 8);\n    }\n    result\n}\n\npub fn u16_from_u8s_le(bytes: [u8; 2]) -> u16 {\n    let mut result = 0;\n    for i in 0..2 {\n        result |= (bytes[i as u32] as u16) << (i * 8);\n    }\n    result\n}\n\npub fn u64_from_u8s_le(bytes: [u8; 8]) -> u64 {\n    let mut result = 0;\n    for i in 0..8 {\n        result |= (bytes[i as u32] as u64) << (i * 8);\n    }\n    result\n}\n\n// Governance structures\npub struct ContractUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_contract: Field\n}\n\npub struct GuardianSetUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_guardian_set_index: u32\n}\n\npub struct SetMessageFee {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub message_fee: Field\n}\n\npub struct TransferFees {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub amount: Field,\n    pub recipient: [u8; 32]\n}\n\npub struct RecoverChainId {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub evm_chain_id: Field,\n    pub new_chain_id: u16\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct EmitterRegistry {\n    pub next_id: u64,\n}\n\npub struct EmitterCapability {\n    pub emitter: u64,\n    pub sequence: u64,\n}\n\nimpl EmitterRegistry {\n    pub fn new() -> Self {\n        EmitterRegistry { next_id: 0 }\n    }\n\n    pub fn get_next_id(&mut self) -> u64 {\n        let id = self.next_id;\n        self.next_id += 1;\n        id\n    }\n}\n\nimpl EmitterCapability {\n    pub fn new(registry: &mut EmitterRegistry) -> Self {\n        let emitter = registry.get_next_id();\n        registry.next_id += 1;\n        EmitterCapability { emitter, sequence: 0 }\n    }\n\n    pub fn use_sequence(&mut self) -> u64 {\n        let sequence = self.sequence;\n        self.sequence += 1;\n        sequence\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct WormholeStorage {\n    pub provider: Provider,\n    pub guardian_set_index: u64,\n    pub guardian_set_expiry: u64,\n    pub message_fee: u128,\n    pub emitter_registry: EmitterRegistry,\n}\n\nimpl WormholeStorage {\n    pub fn init(provider: Provider) -> Self {\n        WormholeStorage {\n            provider: provider,\n            guardian_set_index: 0,\n            guardian_set_expiry: 86400,\n            message_fee: 1,\n            emitter_registry: EmitterRegistry::new(),\n        }\n    }\n\n    // Getters\n    pub fn get_provider(state: Self) -> Provider {\n        state.provider\n    }\n\n    pub fn get_message_fee(state: Self) -> u128 {\n        state.message_fee\n    }\n\n    pub fn get_chain_id(state: Self) -> u16 {\n        state.provider.chain_id\n    }\n\n    pub fn get_guardian_set_index(state: Self) -> u64 {\n        state.guardian_set_index\n    }\n\n    pub fn get_guardian_set_expiry(state: Self) -> u64 {\n        state.guardian_set_expiry\n    }\n\n    // Setters\n    pub fn set_guardian_set_expiry(mut state: Self, guardian_set_expiry: u64) -> Self {\n        state.guardian_set_expiry = guardian_set_expiry;\n        state\n    }\n\n    pub fn set_guardian_set_index(mut state: Self, guardian_set_index: u64) -> Self {\n        state.guardian_set_index = guardian_set_index;\n        state\n    }\n\n    pub fn set_chain_id(mut state: Self, chain_id: u16) -> Self {\n        state.provider.chain_id = chain_id;\n        state\n    }\n\n    pub fn set_provider(mut state: Self, provider: Provider) -> Self {\n        state.provider = provider;\n        state\n    }\n\n    pub fn set_message_fee(mut state: Self, message_fee: u128) -> Self {\n        state.message_fee = message_fee;\n        state\n    }\n}"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "61": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "62": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n"
    },
    "69": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "70": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "71": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n\n    pub fn get_preimage_and_assert_empty<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n        assert_eq(self.hash, 0);\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "72": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "75": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "77": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "94": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "99": {
      "path": "/home/jdev/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    }
  }
}
