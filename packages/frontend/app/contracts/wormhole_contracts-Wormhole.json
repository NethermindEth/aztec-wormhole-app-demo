{
  "transpiled": true,
  "noir_version": "1.0.0-beta.7+0000000000000000000000000000000000000000",
  "name": "Wormhole",
  "functions": [
    {
      "name": "_publish_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_publish_message"
      ]
    },
    {
      "name": "compute_vaa_hash_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "body_bytes",
            "type": {
              "kind": "array",
              "length": 1860,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "body_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "compute_vaa_hash_unconstrained"
      ]
    },
    {
      "name": "expire_guardian_set",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEgdAIBIgEgELgiASAABJQAAAEwlAAAAcCgCAAEEgEknAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJSHgIAAgAeAgADADMqAAIAAwAEJAIABAAAAJQlAAACexwKAQIAJwIBAAAtCAEDJwIEBAQACAEEAScDAwQBACIDAgQtCgQFLQ4BBQAiBQIFLQ4BBQAiBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAIAQYBJwMFBAEAIgUCBi0KBgctDgEHACIHAgctDgEHACIHAgctDgEHACIHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuDIBFAAUtCAEGAAABAgEuDIBEAAYnAgcAHScCCAQJLQgACS0KBAotCgMLLQoFDC0KBg0tCgcOAAgACAAlAAACjS0CAAAnAgcECC0IAAgtCgQJLQoDCi0KBQstCgYMLQoCDQAIAAcAJQAAAo0tAgAALQsGAgsiAAKARAAHJAIABwAAAdAnAggEADwGCAEnAgIEBy0IAActCgQILQoDCS0KBQotCgYLAAgAAgAlAAADsS0CAAAtCwMCASIAAoBHAAQtCwQDCioDAQILIgACgEQAASQCAAEAAAIhJQAABMQeAgABBikCAAIFAAFRgAAqAQIEDioBBAUkAgAFAAACRiUAAATWHAoEAQAwCgABAAMmKACABAR4AA0AAACABIADJACAAwAAAnoqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYlAAACUi0LBAYLIgAGgEQAByQCAAcAAAKvJwIIBAA8BggBLQsDBgsiAAaAQwAHJAIABwAAA0IjAAACyC0LAwYtCwEHLQsCCC0LBAkNIgAGgEMACiQCAAoAAALtJQAABOguAgAHgAMoAIAEBAAEJQAABPouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARwAFDioGBQckAgAHAAADLSUAAATWLQ4KAS0OCAItDgUDLQ4JBCMAAAOwJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA7EtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAAT6LgiABQAJASIACYBHAAotDgUKLQ4JAS0OBwIuDIBHAAMtDggEIwAAA7AmJQAAAlIuCIBFAAUjAAADwQ0iAAWAQwAGJAIABgAABDEjAAAD1i0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAERyMAAASzLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAASzASIABYBHAAYtCgYFIwAAA8EqAQABBQLcbieAdhKdPAQCASYqAQABBUWnynEZQeQVPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcm",
      "debug_symbols": "tZjdTiM9DIbvpcc9SBw7P9zKaoUKlFWlqqAufNInxL2vncmbaStNxA7aE3jqSd6xY8dJ+7F52j+8/7o/nJ5ffm/ufnxsHs6H4/Hw6/748rh7O7yc1PqxcfbH+7S54+3GE23ukv3Xz94pBFHwChwAWUEURC1kYyQ3iARIDRIsCZYMS44NigMIoExAjgH2Cn07UWkQAgCPGBaGRWCR1CB6QGyQHEAAeEVmgIVcFAoB0gTBeYA08A7AgDY9UACUBgGWgDFsLyWD0kBgqetsUNe5QmxQo6iAwQmDcwDAUjDdojBgi2ICAbS3sw8ADCYMpvZ2DrBYtRAb2HQtEubUQKRBdABzNRqUBikAUoPsAQLA4ILppVnEBYBN1zIWLwAdE7SQhLhBoAbsADo4BAUxCxuUBubqBLCYhxWsnkM2sC2k1RItTayrES1NrILRsjNBbmBJmSA1KBopq2DyNksMYgNyAAbkBgFjGI+sbFgXIdmCV6huVEgNbJ0nyA0yLNUfXbFkm9EgOwfIDawkJmiDs5XEBJgVzJ9sUBrY9pwgNRAPEAAGR0yPsCRMT5ieMd1qg3Xv5LqGFfIExUpigtKg+mxQfRYDAZQGARZrF6K1USzL4g1iA+taEwigTHn3ztpWowyqizZRt1G3UbeFbgvdxl2Pu02oUwTZ1mrUZ8Q+w1bQglHSNZBqq85PVKYwvDfvG3Wbed/I5gYjOysadZt1AuFKEWQbrFFXFtcpgSJ1yqDU35u6LfdxSIb3pesVvINcnfv5ud3gwLt/O+/3dt5dnIB6Lr7uzvvT2+bu9H48bjf/7Y7vddDv192p/n/bnfWprtz+9KT/VfD5cNwbfW7n2W55qp6ikdt0XZhSuoTm4krED0SctdhJwzFdSPCVBC1LaPNMTYKLi10iXUcSlhV0F2MdMvOiwjCMUhCGZmsxDPl2GPHfhiG5ZyMvZyMPJCQJJGLwS06UZYUiDk4UEf/NMHRDL4YxKG69SjHSoZy5i8iNGzTaIfMGYT9L6L3xWmNQm9oOIFFyVwh84wUPQgl9i+n9UmYN4a97IfCCHC17MSjOpDXdJPQUDrOG6l1ppGWNIAiE/VzeROFaYVCd5ItHIOTKssagPoWw1SW4dQp9p0cv6+KgXHpOLzLyVxrJ96SmQSQU/q2Gj9H1jpHyOg29/UEjFVqnodepvtVosKajHc89L14uWvDtjqdBXvRija6RtPXMGv56t9GgwlJEmaeLFdVe8hf9r+Te/9JFmd70vzDow5FzL3S+6F63J/NgQXMmSOTMsiTx9UhoMZKvnwYlLa6GjGrD+X4aUFrMShgd8aFr5OAXz8aQRofSfOO6Pg7K192gfrBlystXrkGFZhd7YvXOuyTBowuonkrzOR8v2vnXq+Pq/hmXm/HQjX7t0i8DeZ1E7F74vM6L0A8VxXVeCLm5eaV1EnHuf7msC2Ruw4HWBRJ4/mIiqwJJjIQkjmsECku/xK4Kojjks9A6D3pNlSTfDOFW4Kd+3D0ezle/un6a1Pmwezju28fn99PjxdO3/1/xBL/avp5fHvdP7+e9Kc0/3eqfH6Qtl2L+ad/j9aPu9q1+/bWPvj71W/1x9OenOfMH",
      "brillig_names": [
        "expire_guardian_set"
      ]
    },
    {
      "name": "get_guardian_by_index_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian_idx",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "guardians",
            "type": {
              "kind": "array",
              "length": 19,
              "type": {
                "kind": "struct",
                "path": "structs::Guardian",
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "kind": "struct",
                      "path": "structs::Guardian_PK",
                      "fields": [
                        {
                          "name": "value0",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value1",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value2",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value3",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value4",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value5",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value6",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value7",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value8",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value9",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value10",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value11",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value12",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value13",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value14",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value15",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value16",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value17",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value18",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value19",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x0",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x1",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x2",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x3",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x4",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x5",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x6",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x7",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x8",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x9",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x10",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x11",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x12",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x13",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x14",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x15",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x16",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x17",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x18",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x19",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x20",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x21",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x22",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x23",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x24",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x25",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x26",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x27",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x28",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x29",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x30",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x31",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y0",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y1",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y2",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y3",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y4",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y5",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y6",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y7",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y8",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y9",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y10",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y11",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y12",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y13",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y14",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y15",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y16",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y17",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y18",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y19",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y20",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y21",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y22",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y23",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y24",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y25",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y26",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y27",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y28",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y29",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y30",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y31",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "structs::Guardian",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "struct",
                  "path": "structs::Guardian_PK",
                  "fields": [
                    {
                      "name": "value0",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value1",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value2",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value3",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value4",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value5",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value6",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value7",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value8",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value9",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value10",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value11",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value12",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value13",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value14",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value15",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value16",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value17",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value18",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "value19",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x0",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x1",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x2",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x3",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x4",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x5",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x6",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x7",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x8",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x9",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x10",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x11",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x12",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x13",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x14",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x15",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x16",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x17",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x18",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x19",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x20",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x21",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x22",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x23",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x24",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x25",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x26",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x27",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x28",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x29",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x30",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_x31",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y0",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y1",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y2",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y3",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y4",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y5",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y6",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y7",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y8",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y9",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y10",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y11",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y12",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y13",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y14",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y15",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y16",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y17",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y18",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y19",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y20",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y21",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y22",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y23",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y24",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y25",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y26",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y27",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y28",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y29",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y30",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    },
                    {
                      "name": "pub_key_y31",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_guardian_by_index_unconstrained"
      ]
    },
    {
      "name": "get_hardcoded_guardians",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 19,
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_hardcoded_guardians"
      ]
    },
    {
      "name": "get_provider",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "structs::Provider",
            "fields": [
              {
                "name": "chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              },
              {
                "name": "evm_chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAASyUAAABMLgIAAYBELgIAAoBFKAIAAwSARCcCBAQCOw4ABAADJiUAAAGRHgIAAgAeAgADADMqAAIAAwAEJwICAQEkAgAEAAAAdSUAAAG6JwICAAAtCAEDJwIEBAcACAEEAScDAwQBACIDAgQtCgQFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBS0IAQIAAAECAS0OAwInAgMEACcCBAQGJwIFAAEnAgYEAS0KAwEjAAAA8QwqAQQDJAIAAwAAAUUjAAABAy0LAgEAKgEGAy0LAwInAgMEAgAqAQMFLQsFBBwKAgMDHAoDAQAcCgECAxwKBAMDHAoDAQAcCgEDAy0KAgEtCgMCJhwKAQMAACoFAwcvCgAHAAMtCwIHLgIAB4ADKACABAQAByUAAAHMLgiABQAIACIIAgkAKgkBCi0OAwotDggCACoBBgMtCgMBIwAAAPEoAIAEBHgADQAAAIAEgAMkAIADAAABuSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAAecjAAAB8i4AgAOABSMAAAJZLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAkUuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAhQoAYAFBAABAwCABgACgAYjAAACWSY=",
      "debug_symbols": "tZZRjuIwDIbv0uc+xImT2FxlNEIFyqhSVVAHVloh7r5OiQuslGp22Hkhf9z2ix07Jpdq127OH+tu2B8+q9XbpdqMXd93H+v+sG1O3WEQ66Uy6YegWmFdUahWsa5YZmBkZBmhrsBgFmBVRBFehLUqQhYOVKgF1YJq8UYFquAsglNBWURdIuqipEBSICuQvYoMtMapyEA7+RNETItKwHZalJOgLKZFJxGzILWkRa0VkfbpJrLFGVChFlCLFcesE+HEVYtJJIu44ZI/1ifhb/44Dyooi8nDSWSfXUQVaiF9h5LP8XqtK031+jS2bcr0Q+6lIo7N2A6najWc+76ufjX9eXrp89gM03hqRnkqpdAOOxkFuO/6Nqlrff/alD8F5wPmz6UgmGcEmPgEgQWISTt4Yxi0Dwh8QtgyAoljRiCbMCPicySuTCB0ug+EWCQshsGsYQBwMQz/chjhZ8PwNGeDytmgBYSPXhHBQckJLhPYG3WCvYcXw5AuVgxjobilSYDLDNEPgfi/3FioTACc9wLi/YhJb3tmLNRmJNADEsm54m7gAgIJFIEPWf0XxD0nIvl7CHYzgsuIxb0w971AKiIWytMa+R/QvBobcYY4CF+mIBlNLJKjIsOa/8BYKHRmmI+r9NwZ4fnraQlOO1cM+L3MBosvI2Au0eBNCWH98mG792Dk5zp/l1mz7canC9I10cau2fRtnu7Pw/bh6en3UZ/oBes4Hrbt7jy2iXS/ZcnPG5tamv97ulTJTM4chTSBNIk18fs1+fEH",
      "brillig_names": [
        "get_provider"
      ]
    },
    {
      "name": "guardian_set_expired",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEgdAIBIgEgELgiASAABJQAAAFIlAAAAdi4CAAGASSgCAAIEgEknAgMEATsOAAMAAigAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJLHgIAAgAeAgADADMqAAIAAwAEJAIABAAAAJolAAACdBwKAQIAJwIBAAAtCAEDJwIEBAQACAEEAScDAwQBACIDAgQtCgQFLQ4BBQAiBQIFLQ4BBQAiBQIFLQ4BBSsCAAQAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAIAQYBJwMFBAEAIgUCBi0KBgctDgEHACIHAgctDgEHACIHAgctDgEHACIHAgctDgQHLQgBBAAAAQIBLQ4DBC0IAQMAAAECAS0OBQMtCAEFAAABAgEuDIBFAAUtCAEGAAABAgEuDIBEAAYnAgcAHScCCAQJLQgACS0KBAotCgMLLQoFDC0KBg0tCgcOAAgACAAlAAAChi0CAAAnAgcECC0IAAgtCgQJLQoDCi0KBQstCgYMLQoCDQAIAAcAJQAAAoYtAgAALQsGAgsiAAKARAAHJAIABwAAAdYnAggEADwGCAEnAgIEBy0IAActCgQILQoDCS0KBQotCgYLAAgAAgAlAAADqi0CAAAtCwMCASIAAoBHAAQtCwQDCioDAQILIgACgEQAASQCAAEAAAInJQAABL0vCgADAAEcCgEDBRwKAwIAHAoCAQUeAgACBgwqAQIDLQoDASYoAIAEBHgADQAAAIAEgAMkAIADAAACcyoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJiUAAAJLLQsEBgsiAAaARAAHJAIABwAAAqgnAggEADwGCAEtCwMGCyIABoBDAAckAgAHAAADOyMAAALBLQsDBi0LAQctCwIILQsECQ0iAAaAQwAKJAIACgAAAuYlAAAEzy4CAAeAAygAgAQEAAQlAAAE4S4IgAUACgAiCgILACoLBgwtDgUMASIABoBHAAUOKgYFByQCAAcAAAMmJQAABW8tDgoBLQ4IAi0OBQMtDgkEIwAAA6knAgYEBy0IAActCgEILQoCCS0KAwotCgQLAAgABgAlAAADqi0CAAAtCwEGLQsCBy0LBAguAgAGgAMoAIAEBAAEJQAABOEuCIAFAAkBIgAJgEcACi0OBQotDgkBLQ4HAi4MgEcAAy0OCAQjAAADqSYlAAACSy4IgEUABSMAAAO6DSIABYBDAAYkAgAGAAAEKiMAAAPPLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAARAIwAABKwtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAAThLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABKwBIgAFgEcABi0KBgUjAAADuioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABPwjAAAFBy4AgAOABSMAAAVuLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABVouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABSkoAYAFBAABAwCABgACgAYjAAAFbiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjRaiM7DIbfJde5sGXJtvoqSylpmy6BkJZse+BQ+u4reSRPEhizO2Vvki8a+x/JluSZfG6e948fPx8Op5fXX5u7H5+bx/PheDz8fDi+Pu3eD68nsX5ugn5ESJs73Mp33dwV+U7yOwYBjAJRgQ0IBUhBLKBjMjpUg5Ic3FLdUt3C4JAngBAdyCAGB72F3B0SObAB+iV0C7mF3JKTQzEo4JANanTwW3Bw0JBZoU6QQnIoBjE6ZAMIDujABhrFBG5BH0N6U1Agg+yWts4NqkGLokE2qD64+uDKBuwWtumoUUxQDDSKCcjBpiP4YPDBCRzcotkCqKDTJUmQkkGODtmgqKtZgRzYoGVLg2LA0cEGUwgO3WLTKep0SWOC6CBjkiQSpeBQDTAbkAxOpCA3TTorg4NbdMFRBxexoORG1lkICnILTAKabA1KdMgGujsTyF6gLFRR55EU2ECdn6AYaBQT+Jjkl1D9yQrVoLmhoGkzQTZo/jRwS/OnKFQDThNULcYJskEMDuhgs6qmBFYBTYkJsgEGB3SoBuSDyadnt2SfXnx68enaUlAqpbY1VNDcmCBPwAEMms8NcFoxbj4rADi4RfsGyeayJiRFBTbQhJygGmj70n1nLhPEEGKn7BS7LXYbdBt0W+q21PWw27ScjNhJK8uoz8h9hi6gxhKDriA1W/O9kTqvUQgVoxigU3bS5aPUiJyg27SvETZiJz04jLoyJidtbkbkpD4b9fuWbit9nO9FjLXr1X4PbnO/vrYbP90e3s/7vR5uF8edHIJvu/P+9L65O30cj9vNf7vjRxv06213at/vu7NclZXbn57lWwRfDse90td2nh2Wp8ZEGW16TJm5S8heXInEgUjQfjppBIQLCbySgGUJrFxMAjnkLlGuI0nLChWTr4NU76LCMAxmD0P2aDEM+nYY+d+GQbXvRl3ejTqQoEIukVNccoKXFZiCO8FyVn0zjAjLYQySG3KFZBrCea4PunEDRhUyFwhGnP0oN/UxyM1Ys0tw7QoJb7zAQSiplxjIA9msQfjnXpB7AQGWvRgkZ5GcNonClGYN0bvSKMsaiTwQjHN6A6RrhUF2QuTogUDgZY1BfhJ4qctD1jqFXuk50ro4oHLf04sd+SuNEvumlkEkkP6thhyHoXeMUtdplOLVKucnrNPg0Hs4w2BNRxWPfV/k/TEvVjwM9iWX4F2jQL7QiNfVBoMMK9nTvFysqPSSlf2vwFL/S6M+HLGfBbGERT/SYEVLjV70paa0eLqn4WL01cgUFiVwHMl8wONFht2KDEMJcyhYFyXyKL/mHEW47OX8Fztbse8sh7i4s6MclRdWb2HIy6EMUrRWcAlxiJYkRg+gcirN5zxd5KiszJ9qXD5/5uVmPHSjP3ZJatR1Erl7Ees6L1I/VATXeUEQ5uZV1knkuf9VXhfInOIJ1gWScH4xoVWBFOylinmNAPfWx7QqCA6+nwzrPOg5Je/53wzhVuBefu6eDuerv1i/VOp82D0e9/bz5eP0dHH1/f83v+J/0b6dX5/2zx/nvSrN/9PKxw/5w3MLme717V1+SoVv5Z1cf0a9mrNcrfdf6sxv",
      "brillig_names": [
        "guardian_set_expired"
      ]
    },
    {
      "name": "init",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "evm_chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "wormhole_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "init"
      ]
    },
    {
      "name": "parse_vaa_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 66,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 1860,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "parse_vaa_unconstrained"
      ]
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_message"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "publish_message_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8AL4mD8rpZJV1QwsqV\ntS4kyiNnAM9t4E/NCTgnix0MrH8hjAwLOAHBWGOZFtagLFxKqGa/wvaK7DnLixcPhOULmwycfivN\nHqUtY6OZhH3H1mS4gHA0L8jodH6aoYRWobJMBg1LBbPtj6cgxA2JJUoPA6RsjQiJfJZY8YY0m9Ws\nfp0DVyJcH4F6ISiB+xTXY0UTqGFGTKEiH4UqwE6MvHYDQhAg+RoZQnLqe0nFXpofcEwr87nkFKbY\nk3y/R8xKfaNuFcQDluk4rHURDb+fW4u3xbygbaZTkJsSOm6NmzTUwOAHdvfzSYgesrXUWd0rJMDM\nwqc+dGGwk5pIyWMlWsLgowaCF5eRnvnuebRRZ1CJQwxzDxPPlLGxq8OfNNXKGVJDHLuOQ6sfaW9J\nBJr45hjEbvFt8qaVjTIUIlDp33kNuPIrwJn0Rx7slli1YTxCqGXOhhBIG7+Gwj0Zac8mqKJHGCF4\ngZayDIG66j+lbv6ILe9BbowwgqAqCR/hrEyt9ClGEabVvIpfVK1Cmo0sICvRD9kVavxZhNfishhT\njnOjarMEaHGye2msWK1jh5dtDtpyAx4+e0Dduaitynb2eIOYxSmMMxH8kXD5LelAsEKquZDVPGo7\nJjOc2mtz35IIMUFZB7BfQIphKEclkBa5IErkvzdTfrGWsFwdmPpRAWqbrLsuqBmHQKab8s3ZZQmB\nDBMwUqavGc2sq4NGb6w9oXBB2Be23fVqCo3vZv9/lb0ZwU5Wryp4me5H4y+1HC4Lh9bBKWOau4C9\n05CLYkb0IcmBqWXaruRQn/qesFdwCF7u4zkH99I3Ec/MSD+N6qagrqpt+9oazE2kwu5FiMnEQoYt\n2SHrSJuRmKhkLL92LlSOA5ve52T8+85x9jwkt2+sZv9oEf1BtfmTbZMquuTG6TPg05wk6o4uDu5w\nKlMm81nJR8AUoX18ClXS1F7o7fbsFlwRPSgrmEfVYv1BQCIOR+GCrxpw0tC/U/KBmNxua015bsn0\nE4YWuRKVxKct3D6sKlhhDGdb/oI6ljy95kofb/sCoLD+uO/tAhEc7XV9YbN5cNEBjas4cA/+Hd96\nCWfZ0UDchqvx6+IibWECDs0VanvZqw2Pb+Ow4l5wTVF0wO4tQnwphhcDiRhhb4BXhriKyIq9LYca\na31lgAvhM4RZZPCj21CIwRjYfGKgPXLmq/EYzhMXHSi5gKkjSaSNAcbV09fyxapeS8O0+TUh8Gtz\n+iaemBnmWTG04qAEMA8PiudigAyAc8jAfuNTdgssfrCDwyHaLHqeoZ89lxlsbgMr/5qxJEvVO2Rh\n8x5+jUg9fRkybjYs2V3x5C45Gu5INrMklAQLQk9ck9FEZMaYv4mHNt1JIiPfndjdHrXcw7itlY7U\n7EjNt8vTi9VmEcWK91dmpr9FADbHEbgEbf5CLvaRyHhmwyHqBHSWM+eDzi9z1ZZrPEoAnEwnZmNy\nqV6V9lS6HyPYeXCh6zS/b7hRW/K1HAZoORjWMze154ZAqZ5F/Gof8w5M0ktHzbzyf7gA3mYP359T\nLe7zw0//zeeBosnJyJlJhM0CQ2A2VrZhzTQiRGbfcW8oFgq26ZPG5n0QW3LiFbgELbpUI4IhQWE0\nIids9eZMBQG1fWo8aYkFSn102pKL+8Rs1APfk78FW6fuXtUZ7XvAKopj2NH9LRWjmSmMrPPbHLaM\nX8oY73uGFeQj040Q1/MUW/phDeMvDNeqQgmEvZEQ3rkdbSXu7XYkXHxrMwofOi3sHjVd7J6DY3qD\n4zwdiXwIizGpkpkOmsXmv2lUHm9dFgNigURAzAG5jOh48uuc1I99qoKuGzegOBSxIR4jff8dqj7C\nvwMvicT59q9QWRhkvk/5GDLYAu/kSsRA0CN9QArcicSNdbVxY29bvrSoBvb0WWICMBtq5OsOu+rd\nIDNABm8oE1dI8RljHD/gf6nXAANOPidFTvmStL+EuXuqdHEuJXg1Ud9QwATsfNH03Ys7ZKZvKsSX\nm2XlZWjFoxsU7Rj3bPDO7MtHmN50GuibZOglj4RHfBtiVlpVm6e7OIMuLSmftoZ40BULzFsW3IJS\nNT1D+nDpkjnBwcZ+JxoO6sUV06xaGZq7dJM6TvyYxZsoFO3nzSfa7QDDPBKGC8SwRi041tS6Hkdj\np07NsRyh80aWgMJw5VFRU0RZL1kYj6dlEts56JKCazJhDuCCUeAF/OkXwNXcoBlHfFL2B1MythIA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACJV2CRgOylk67EDVHRNK7UwCJXF213zIYMPHL1LGmNXYIXs2ywPmZOkx1LK5Ia/+cu1SW\nQEsfYZW5fRWLUki0GgDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJiS18GKk8\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "publish_message_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "publish_message_in_public"
      ]
    },
    {
      "name": "set_guardian1",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICdJwAABAMnAlYEVScCVwQAHwoAVgBXgEgdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgIyAjAIdAICNgI0CHQCAjoCOAh0AgI+AjwIdAICQgJACHQCAkYCRAh0AgJKAkgIdAICTgJMCHQCAlICUAh0AgJWAlQIdAICWgJYCHQCAl4CXAh0AgJiAmAIdAICZgJkCHQCAmoCaAh0AgJuAmwIdAICcgJwELgiASAABLgiASQACLgiASgADLgiASwAELgiATAAFLgiATQAGLgiATgAHLgiATwAILgiAUAAJLgiAUQAKLgiAUgALLgiAUwAMLgiAVAANLgiAVQAOLgiAVgAPLgiAVwAQLgiAWAARLgiAWQASLgiAWgATLgiAWwAULgiAXAAVLgiAXQAWLgiAXgAXLgiAXwAYLgiAYAAZLgiAYQAaLgiAYgAbLgiAYwAcLgiAZAAdLgiAZQAeLgiAZgAfLgiAZwAgLgiAaAAhLgiAaQAiLgiAagAjLgiAawAkLgiAbAAlLgiAbQAmLgiAbgAnLgiAbwAoLgiAcAApLgiAcQAqLgiAcgArLgiAcwAsLgiAdAAtLgiAdQAuLgiAdgAvLgiAdwAwLgiAeAAxLgiAeQAyLgiAegAzLgiAewA0LgiAfAA1LgiAfQA2LgiAfgA3LgiAfwA4LgiAgAA5LgiAgQA6LgiAggA7LgiAgwA8LgiAhAA9LgiAhQA+LgiAhgA/LgiAhwBALgiAiABBLgiAiQBCLgiAigBDLgiAiwBELgiAjABFLgiAjQBGLgiAjgBHLgiAjwBILgiAkABJLgiAkQBKLgiAkgBLLgiAkwBMLgiAlABNLgiAlQBOLgiAlgBPLgiAlwBQLgiAmABRLgiAmQBSLgiAmgBTLgiAmwBULgiAnABVJQAABJAlAAAEtCgCAAEEgJ0nAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAuAHgIAVwAeAgBYADMqAFcAWABZJAIAWQAABNglAAALqRwKVVcAJwJVAAAtCAFYJwJZBAQACAFZAScDWAQBACJYAlktCllaLQ5VWgAiWgJaLQ5VWgAiWgJaLQ5VWisCAFkAAAAAAAAAAAIAAAAAAAAAAC0IAVonAlsEBQAIAVsBJwNaBAEAIloCWy0KW1wtDlVcACJcAlwtDlVcACJcAlwtDlVcACJcAlwtDllcLQgBWQAAAQIBLQ5YWS0IAVgAAAECAS0OWlgtCAFaAAABAgEuDIBFAFotCAFbAAABAgEuDIBEAFsnAlwACicCXQReLQgAXi0KWV8tClhgLQpaYS0KW2ItClxjAAgAXQAlAAALuy0CAAAnAlwEXS0IAF0tClleLQpYXy0KWmAtClthLQpXYgAIAFwAJQAAC7stAgAALQtbVwsiAFeARABcJAIAXAAABhQnAl0EADwGXQEnAlcEXC0IAFwtClldLQpYXi0KWl8tCltgAAgAVwAlAAAM3y0CAAAtC1lXLQtYXC0LWl0tDldZLQ5cWC0OXVouDIBGAFsBIgBcgEcAWC0LWFcKKldVWAsiAFiARABVJAIAVQAABn8lAAAN8hwKAVUAHAoCAQAcCgMCABwKBAMAHAoFBAAcCgYFABwKBwYAHAoIBwAcCgkIABwKCgkAHAoLCgAcCgwLABwKDQwAHAoODQAcCg8OABwKEA8AHAoREAAcChIRABwKExIAHAoUEwAcChUUABwKFhUAHAoXFgAcChgXABwKGRgAHAoaGQAcChsaABwKHBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian1"
      ]
    },
    {
      "name": "set_guardian10",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP+Uq5xbiaKIJGSFhEjEhk/6FHHv6/K4noFI3dqd7J7AQw39lt+2q+xu+Hn6cvfp+Y+P949fv/15evf+5+nT0/3Dw/0fHx++fb79cf/tcUR/njb/kvLWT+/qzYBUT+90woikzSnroORUJKiO65JMGrE8f082qEI9qBFrxJSYWpBlSIN6gtqisnk2H0vJCZKgwqeFWCVWL7EeJAWyoJYhDVKyaQsyvxt9UoV6UC+QLqpbhlpQ2iAJcm+LiBV+r/gIslNNELE5H2eqkAVNb2fiCuUKlSAjZqi4tzO5t0W6SLYECRRXSCpQjEUyMV9r2ReiFFeRST2oapBkyEffnFqCBOpBWiANMq4wVDqxjkoPlbYVKFRaSpBAXDHXpFdUKwUa1xZfxa3mIJ+tRRbUxhVlqjQLUmJKzIgZsU6sR0y3AhFLxBKxTCwTK8QKsUqsEhNiQgwfig/Fh+JD8aH4UHwoPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+Gj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46OHj7yFj0HEErFELBPLxAqxQqwSq8SEmBBrxBoxJabEpg+dpEE9QxFLW4aIeXUvkqC8QRXqQaVAFlRRrigLyt7DztRQbmRrKCvZFGW8JbwlvKUeynlLUCjntEEVimw5Fyiy5ZKhyJYrypVsgrKQTVBuZGsoK9kUZSObodzJ1kN5ngUWVSiylVSgyFZyhiJbKQmKbPPMsIhsFWUhm6DcyNZQVrIpykY2Q7mTraPcI1vdChTZaspQZJtnhkWRbZ4ZFgmEcq0QykI2QbmRraGsZFOUjWyGspGto9wjm1B5QuUJlScpsgmVJ1mgUJZSIZRrgVAWslF58/SwCGUlG5UnSjYqT4xsVJ7QVRqV17bI1qi8RldpVF6jqzQqr9FVGpXX6CqNymt0lUblNbpKo/IaXaVReY2u0qi8RldpVF6jqyiVp3QVpfKUrqJUntJVlMpTuopSeUpXUSpP6SpK5SldRak8pasolad0FaXylK6iVJ7SVZTKM7qKUXlGVzEqz+gqRuUZXcWoPKOrGJVndBWj8oyucj5bdCdfV3WcDnP3mqlpkseyk/eDRcS8H9Q6yWPl5lTmPl3FaV7RnLy2FlmQr7pFGuQzU9XJ+0G1SS3Ia2ZRhSzI+L3Op36f6/BWkq+hM81RnUmDfOUssqBCzMcnm5OvlzP5ellkQb5KFnGF97BFXOudS9KkHuSda5EumvvqIoHiirmvLiKWC4RKQcVXiWQnv8+LLMjXxqIeNH1Mch/znmb3sagHWcSKd1bxdVC88qROakG+OhcJ1Nd6mXveolhDc89bREyJKTEjZsQ6ej1i8+l4UQvyjrmoQlwx72mZ5Hdjxuboz9SXj/kkvIjYXBFn8mt9jVfvG4uIed8QndSCvG8sCmXZNkiDUoYsKBeIGPMhzIcwH1LJMddBfXm5OcXbnI8/nu7u/GXOq9c746XP99unu8cfp3ePzw8PN6f/3T48z1/68/vt4/z+4/ZpfDpW/N3jl/F9CH69f7hzerm5XL3tXzrel7S6Lh/vSXpHYhyi34ikA5HNH//PGlvNryTqG4m8LzEOGLokxqw0JPStk7KvMB4D4z6MvryrcGij97CRUt+1Ib9to/23NsSYDdufDTuQEJWQaCXtDaLvK3TZYhBdJP2mjfEWc9fGweIe/baUpTFYBBH5ZRj5qEIuBTKa12Uc+kt9HKzN8cYhJLqhMPrjW4V6YKVQYuMB52KkSP37o5AYxXiC3x/FweIcB62QGCetctEYem80dF+jSBip6bK8x7b6VuFgdY7NOIWRsVnvaxysz/HYsSSkbNcpUOnjIeA6H+M4yJy+mpF/pKGJSdUDJ7n8txrjHedGx1C7TmO8VQwN7fk6jb7Rw3s+uKdHFV+Zl/HSuu1WfD6Yl6ZbdA0dT2sXjfS22vLBCtMWy1xf3dHRS67sf832+l856sN1S/S/rLvjKAd31Aoa44lqdzcoRxNbrCkHFbNXLTD9MpD6r6gc7PKN0te0vWrF/R+4kczuNl4Spf1xHN3WzNY0XpHvH5rsqKNTcwPrNRK29WgflrZ2nYSl35VIHDhsPHVeNwrWxpCwPYl6NK9jj72cWtqrzUn//pH89Wm67W8tRxKJQ2Qa3ew6icYokl03itIvtdavG4Xk7dKK9TqJdunm1q8zctlUxoP4dRL18pglVxnRGhOitV0j0KtwJL/KxHhTFQL5uhGwprrKb1r4VeDD+PH28/3Tm3+QeHGpp/vbTw9368evz4+fX3364//f45P4B4vvT98+3315frpzpct/WYwv78eL1ZvxZ9gP4+9n/uN4jr8RMf9xvFx471u+bu3Diw/mLw==",
      "brillig_names": [
        "set_guardian10"
      ]
    },
    {
      "name": "set_guardian11",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICdJwAABAMnAlYEVScCVwQAHwoAVgBXgEgdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgIyAjAIdAICNgI0CHQCAjoCOAh0AgI+AjwIdAICQgJACHQCAkYCRAh0AgJKAkgIdAICTgJMCHQCAlICUAh0AgJWAlQIdAICWgJYCHQCAl4CXAh0AgJiAmAIdAICZgJkCHQCAmoCaAh0AgJuAmwIdAICcgJwELgiASAABLgiASQACLgiASgADLgiASwAELgiATAAFLgiATQAGLgiATgAHLgiATwAILgiAUAAJLgiAUQAKLgiAUgALLgiAUwAMLgiAVAANLgiAVQAOLgiAVgAPLgiAVwAQLgiAWAARLgiAWQASLgiAWgATLgiAWwAULgiAXAAVLgiAXQAWLgiAXgAXLgiAXwAYLgiAYAAZLgiAYQAaLgiAYgAbLgiAYwAcLgiAZAAdLgiAZQAeLgiAZgAfLgiAZwAgLgiAaAAhLgiAaQAiLgiAagAjLgiAawAkLgiAbAAlLgiAbQAmLgiAbgAnLgiAbwAoLgiAcAApLgiAcQAqLgiAcgArLgiAcwAsLgiAdAAtLgiAdQAuLgiAdgAvLgiAdwAwLgiAeAAxLgiAeQAyLgiAegAzLgiAewA0LgiAfAA1LgiAfQA2LgiAfgA3LgiAfwA4LgiAgAA5LgiAgQA6LgiAggA7LgiAgwA8LgiAhAA9LgiAhQA+LgiAhgA/LgiAhwBALgiAiABBLgiAiQBCLgiAigBDLgiAiwBELgiAjABFLgiAjQBGLgiAjgBHLgiAjwBILgiAkABJLgiAkQBKLgiAkgBLLgiAkwBMLgiAlABNLgiAlQBOLgiAlgBPLgiAlwBQLgiAmABRLgiAmQBSLgiAmgBTLgiAmwBULgiAnABVJQAABJAlAAAEtCgCAAEEgJ0nAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAuAHgIAVwAeAgBYADMqAFcAWABZJAIAWQAABNglAAALqRwKVVcAJwJVAAAtCAFYJwJZBAQACAFZAScDWAQBACJYAlktCllaLQ5VWgAiWgJaLQ5VWgAiWgJaLQ5VWisCAFkAAAAAAAAAAAIAAAAAAAAAAC0IAVonAlsEBQAIAVsBJwNaBAEAIloCWy0KW1wtDlVcACJcAlwtDlVcACJcAlwtDlVcACJcAlwtDllcLQgBWQAAAQIBLQ5YWS0IAVgAAAECAS0OWlgtCAFaAAABAgEuDIBFAFotCAFbAAABAgEuDIBEAFsnAlwAFCcCXQReLQgAXi0KWV8tClhgLQpaYS0KW2ItClxjAAgAXQAlAAALuy0CAAAnAlwEXS0IAF0tClleLQpYXy0KWmAtClthLQpXYgAIAFwAJQAAC7stAgAALQtbVwsiAFeARABcJAIAXAAABhQnAl0EADwGXQEnAlcEXC0IAFwtClldLQpYXi0KWl8tCltgAAgAVwAlAAAM3y0CAAAtC1lXLQtYXC0LWl0tDldZLQ5cWC0OXVouDIBGAFsBIgBcgEcAWC0LWFcKKldVWAsiAFiARABVJAIAVQAABn8lAAAN8hwKAVUAHAoCAQAcCgMCABwKBAMAHAoFBAAcCgYFABwKBwYAHAoIBwAcCgkIABwKCgkAHAoLCgAcCgwLABwKDQwAHAoODQAcCg8OABwKEA8AHAoREAAcChIRABwKExIAHAoUEwAcChUUABwKFhUAHAoXFgAcChgXABwKGRgAHAoaGQAcChsaABwKHBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP+Uq5xbiaKIJGSFhEjEhk/6FHHv6/K4noFI3dqd7J7AQw39lt9uV9lt+Hn6cvfp+Y+P949fv/15evf+5+nT0/3Dw/0fHx++fb79cf/tcUR/njb/kvLWT+/qzYBUT+90woikzSnroORUJKiO65JMGrE8f082qEI9qBFrxJSYWpBlSIN6gtqisnk2H0vJCZKgwqeFWCVWL7EeJAWyoJYhDVKyaQsyvxt9UoV6UC+QLqpbhlpQ2iAJcm+LiBV+r/gIslNNELH5PM5UIQua3s7EFcoVKkFGzFBxb2dyb4t0kWwJEiiukFSgGItkYj7Xsk9EKa4ik3pQ1SDJkI++ObUECdSDtEAaZFxhqHRiHZUeKm0rUKi0lCCBuGLOSa+oVgo0ri0+i1vNQf60FllQG1eUqdIsSIkpMSNmxDqxHjHdCkQsEUvEMrFMrBArxCqxSkyICTF8KD4UH4oPxYfiQ/Gh+DB8GD4MH4YPw4fhw/Bh+DB8GD4MH4YPw4fhw/Bh+DB8GD4MH4aPjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo8ePvIWPgYRS8QSsUwsEyvECrFKrBITYkKsEWvElJgSmz50kgb1DEUsbRki5tW9SILyBlWoB5UCWVBFuaIsKHsPO1NDuZGtoaxkU5TxlvCW8JZ6KOctQaGc0wZVKLLlXKDIlkuGIluuKFeyCcpCNkG5ka2hrGRTlI1shnInWw/luRdYVKHIVlKBIlvJGYpspSQoss09wyKyVZSFbIJyI1tDWcmmKBvZDOVOto5yj2x1K1BkqylDkW3uGRZFtrlnWCQQyrVCKAvZBOVGtoaykk1RNrIZyka2jnKPbELlCZUnVJ6kyCZUnmSBQllKhVCuBUJZyEblzd3DIpSVbFSeKNmoPDGyUXlCV2lUXtsiW6PyGl2lUXmNrtKovEZXaVReo6s0Kq/RVRqV1+gqjcprdJVG5TW6SqPyGl2lUXmNrqJUntJVlMpTuopSeUpXUSpP6SpK5SldRak8pasolad0FaXylK6iVJ7SVZTKU7qKUnlKV1Eqz+gqRuUZXcWoPKOrGJVndBWj8oyuYlSe0VWMyjO6ynlv0Z18XtWxO8zda6amSR7LTt4PFhHzflDrJI+Vm1OZ63QVp3lFc/LaWmRBPusWaZA/mapO3g+qTWpBXjOLKmRBxu91PvX7XIe3knwOnWmO6kwa5DNnkQUVYj4+2Zx8vpzJ58siC/JZsogrvIct4lrvXJIm9SDvXIt00VxXFwkUV8x1dRGxXCBUCio+SyQ7+X1eZEE+Nxb1oOljkvuY9zS7j0U9yCJWvLOKz4PilSd1Ugvy2blIoL7my1zzFsUcmmveImJKTIkZMSPW0esRm2/Hi1qQd8xFFeKKeU/LJL8bMzZHf6a+fMw34UXE5ow4k1/rc7x631hEzPuG6KQW5H1jUSjLtkEalDJkQblAxHgewvMQnodUcsx5UF9ebk5xmvPxx9PdnR/mvDreGYc+32+f7h5/nN49Pj883Jz+d/vwPH/pz++3j/P7j9un8emY8XePX8b3Ifj1/uHO6eXmcvW2f+k4L2l1XT7OSXpHYmyi34ikA5HNX//PGlvNryTqG4m8LzE2GLokxlNpSOhbJ2VfYbwGxn0YfXlX4dBG72Ejpb5rQ37bRvtvbYjxNGz/adiBhKiERCtpbxB9X6HLFoPoIuk3bYxTzF0bB5N7bBpbWxqDzRCRX4aRjyrkUiCjeV3Gob/Ux8HcHCcOIdEvgxj98a1CPbBSKLHxgiMXDal/fxTCzdjy/igOJufYaIXE2GmVi8bQe6Oh+xpFwkhNl+k9ltW3CgezcyzGKYyMxXpf42B+jteOJSFlu06BSh8vAdf5GNtBnumrJ/KPNDTxUPXASS7/rcY449zoGGrXaYxTxdDQnq/T6Bs9vOeDe3pU8ZXnMg6t227F54Pn0nSLrqHjbe2ikd5WWz6YYdpimuurOzp6yXX9b5zs7/W/ctSH65bof1l3x1EO7qgVNMYb1e5qUI4ebLGmbFTMXrXA9MtA6r+icrDKN0pf0/aqFfd/4EYyq9s4JEr74zi6rZmlaRyR72+a7KijU3MD6zUStvWYZJa2dp2Epd+VSGw4bLx1XjcK5saQsD2JevRcxxp72bW0V4uT/v0t+evddNtfWo4kEpvINLrZdRKNUSS7bhSlX2qtXzcKydulFet1Eu3Sza1fZ+SyqIwX8esk6uU1S64yojUeiNZ2jUCvwpb8KhPjpCoE8nUjYE51ld+08KvAh/Hj7ef7pzf/IPHiUk/3t58e7taPX58fP7/69Mf/v8cn8Q8W35++fb778vx050qX/7IYX96Pg9Wb8WfYD+PvZ/7jeI+/ETH/cRwuvPclX7f24cUH8xc=",
      "brillig_names": [
        "set_guardian11"
      ]
    },
    {
      "name": "set_guardian12",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICdJwAABAMnAlYEVScCVwQAHwoAVgBXgEgdAIBIgEgCHQCASYBJAh0AgEqASgIdAIBLgEsCHQCATIBMAh0AgE2ATQIdAIBOgE4CHQCAT4BPAh0AgFCAUAIdAIBRgFECHQCAUoBSAh0AgFOAUwIdAIBUgFQCHQCAVYBVAh0AgFaAVgIdAIBXgFcCHQCAWIBYAh0AgFmAWQIdAIBagFoCHQCAW4BbAh0AgFyAXAIdAIBdgF0CHQCAXoBeAh0AgF+AXwIdAIBggGACHQCAYYBhAh0AgGKAYgIdAIBjgGMCHQCAZIBkAh0AgGWAZQIdAIBmgGYCHQCAZ4BnAh0AgGiAaAIdAIBpgGkCHQCAaoBqAh0AgGuAawIdAIBsgGwCHQCAbYBtAh0AgG6AbgIdAIBvgG8CHQCAcIBwAh0AgHGAcQIdAIBygHICHQCAc4BzAh0AgHSAdAIdAIB1gHUCHQCAdoB2Ah0AgHeAdwIdAIB4gHgCHQCAeYB5Ah0AgHqAegIdAIB7gHsCHQCAfIB8Ah0AgH2AfQIdAIB+gH4CHQCAf4B/Ah0AgICAgAIdAICBgIECHQCAgoCCAh0AgIOAgwIdAICEgIQCHQCAhYCFAh0AgIaAhgIdAICHgIcCHQCAiICIAh0AgImAiQIdAICKgIoCHQCAi4CLAh0AgIyAjAIdAICNgI0CHQCAjoCOAh0AgI+AjwIdAICQgJACHQCAkYCRAh0AgJKAkgIdAICTgJMCHQCAlICUAh0AgJWAlQIdAICWgJYCHQCAl4CXAh0AgJiAmAIdAICZgJkCHQCAmoCaAh0AgJuAmwIdAICcgJwELgiASAABLgiASQACLgiASgADLgiASwAELgiATAAFLgiATQAGLgiATgAHLgiATwAILgiAUAAJLgiAUQAKLgiAUgALLgiAUwAMLgiAVAANLgiAVQAOLgiAVgAPLgiAVwAQLgiAWAARLgiAWQASLgiAWgATLgiAWwAULgiAXAAVLgiAXQAWLgiAXgAXLgiAXwAYLgiAYAAZLgiAYQAaLgiAYgAbLgiAYwAcLgiAZAAdLgiAZQAeLgiAZgAfLgiAZwAgLgiAaAAhLgiAaQAiLgiAagAjLgiAawAkLgiAbAAlLgiAbQAmLgiAbgAnLgiAbwAoLgiAcAApLgiAcQAqLgiAcgArLgiAcwAsLgiAdAAtLgiAdQAuLgiAdgAvLgiAdwAwLgiAeAAxLgiAeQAyLgiAegAzLgiAewA0LgiAfAA1LgiAfQA2LgiAfgA3LgiAfwA4LgiAgAA5LgiAgQA6LgiAggA7LgiAgwA8LgiAhAA9LgiAhQA+LgiAhgA/LgiAhwBALgiAiABBLgiAiQBCLgiAigBDLgiAiwBELgiAjABFLgiAjQBGLgiAjgBHLgiAjwBILgiAkABJLgiAkQBKLgiAkgBLLgiAkwBMLgiAlABNLgiAlQBOLgiAlgBPLgiAlwBQLgiAmABRLgiAmQBSLgiAmgBTLgiAmwBULgiAnABVJQAABJAlAAAEtCgCAAEEgJ0nAgIEADsOAAIAASgAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAuAHgIAVwAeAgBYADMqAFcAWABZJAIAWQAABNglAAALqRwKVVcAJwJVAAAtCAFYJwJZBAQACAFZAScDWAQBACJYAlktCllaLQ5VWgAiWgJaLQ5VWgAiWgJaLQ5VWisCAFkAAAAAAAAAAAIAAAAAAAAAAC0IAVonAlsEBQAIAVsBJwNaBAEAIloCWy0KW1wtDlVcACJcAlwtDlVcACJcAlwtDlVcACJcAlwtDllcLQgBWQAAAQIBLQ5YWS0IAVgAAAECAS0OWlgtCAFaAAABAgEuDIBFAFotCAFbAAABAgEuDIBEAFsnAlwAFScCXQReLQgAXi0KWV8tClhgLQpaYS0KW2ItClxjAAgAXQAlAAALuy0CAAAnAlwEXS0IAF0tClleLQpYXy0KWmAtClthLQpXYgAIAFwAJQAAC7stAgAALQtbVwsiAFeARABcJAIAXAAABhQnAl0EADwGXQEnAlcEXC0IAFwtClldLQpYXi0KWl8tCltgAAgAVwAlAAAM3y0CAAAtC1lXLQtYXC0LWl0tDldZLQ5cWC0OXVouDIBGAFsBIgBcgEcAWC0LWFcKKldVWAsiAFiARABVJAIAVQAABn8lAAAN8hwKAVUAHAoCAQAcCgMCABwKBAMAHAoFBAAcCgYFABwKBwYAHAoIBwAcCgkIABwKCgkAHAoLCgAcCgwLABwKDQwAHAoODQAcCg8OABwKEA8AHAoREAAcChIRABwKExIAHAoUEwAcChUUABwKFhUAHAoXFgAcChgXABwKGRgAHAoaGQAcChsaABwKHBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP+Uq5xbiaKIJGSFhEjEhk/6FHHv6/K4noFI3dqd7J7AQw39lt+2q+xu+Hn6cvfp+Y+P949fv/15evf+5+nT0/3Dw/0fHx++fb79cf/tcUR/njb/kvLWT+/qzYBUT+90woikzSnroORUJKiO65JMGrE8f082qEI9qBFrxJSYWpBlSIN6gtqisnk2H0vJCZKgwqeFWCVWL7EeJAWyoJYhDVKyaQsyvxt9UoV6UC+QLqpbhlpQ2iAJcm+LiBV+r/gIslNNELE5H2eqkAVNb2fiCuUKlSAjZqi4tzO5t0W6SLYECRRXSCpQjEUyMV9r2ReiFFeRST2oapBkyEffnFqCBOpBWiANMq4wVDqxjkoPlbYVKFRaSpBAXDHXpFdUKwUa1xZfxa3mIJ+tRRbUxhVlqjQLUmJKzIgZsU6sR0y3AhFLxBKxTCwTK8QKsUqsEhNiQgwfig/Fh+JD8aH4UHwoPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+HD8GH4MHwYPgwfhg/Dh+Gj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46Pjo+Oj46OHj7yFj0HEErFELBPLxAqxQqwSq8SEmBBrxBoxJabEpg+dpEE9QxFLW4aIeXUvkqC8QRXqQaVAFlRRrigLyt7DztRQbmRrKCvZFGW8JbwlvKUeynlLUCjntEEVimw5Fyiy5ZKhyJYrypVsgrKQTVBuZGsoK9kUZSObodzJ1kN5ngUWVSiylVSgyFZyhiJbKQmKbPPMsIhsFWUhm6DcyNZQVrIpykY2Q7mTraPcI1vdChTZaspQZJtnhkWRbZ4ZFgmEcq0QykI2QbmRraGsZFOUjWyGspGto9wjm1B5QuUJlScpsgmVJ1mgUJZSIZRrgVAWslF58/SwCGUlG5UnSjYqT4xsVJ7QVRqV17bI1qi8RldpVF6jqzQqr9FVGpXX6CqNymt0lUblNbpKo/IaXaVReY2u0qi8RldpVF6jqyiVp3QVpfKUrqJUntJVlMpTuopSeUpXUSpP6SpK5SldRak8pasolad0FaXylK6iVJ7SVZTKM7qKUXlGVzEqz+gqRuUZXcWoPKOrGJVndBWj8oyucj5bdCdfV3WcDnP3mqlpkseyk/eDRcS8H9Q6yWPl5lTmPl3FaV7RnLy2FlmQr7pFGuQzU9XJ+0G1SS3Ia2ZRhSzI+L3Op36f6/BWkq+hM81RnUmDfOUssqBCzMcnm5OvlzP5ellkQb5KFnGF97BFXOudS9KkHuSda5EumvvqIoHiirmvLiKWC4RKQcVXiWQnv8+LLMjXxqIeNH1Mch/znmb3sagHWcSKd1bxdVC88qROakG+OhcJ1Nd6mXveolhDc89bREyJKTEjZsQ6ej1i8+l4UQvyjrmoQlwx72mZ5Hdjxuboz9SXj/kkvIjYXBFn8mt9jVfvG4uIed8QndSCvG8sCmXZNkiDUoYsKBeIGPMhzIcwH1LJMddBfXm5OcXbnI8/nu7u/GXOq9c746XP99unu8cfp3ePzw8PN6f/3T48z1/68/vt4/z+4/ZpfDpW/N3jl/F9CH69f7hzerm5XL3tXzrel7S6Lh/vSXpHYhyi34ikA5HNH//PGlvNryTqG4m8LzEOGLokxqw0JPStk7KvMB4D4z6MvryrcGij97CRUt+1Ib9to/23NsSYDdufDTuQEJWQaCXtDaLvK3TZYhBdJP2mjfEWc9fGweIeB0RmdBwM82UY8ssw8lGFXApkNK/LOPSX+jhYm+ONQ0h0Q2H0x7cK9cBKocTGA45cNKT+/VFIjGI8we+P4mBxjoNWSIyTVrloDL03GrqvUSSM1HRZ3mNbfatwsDrHZpzCyNis9zUO1ud47FgSUrbrFKj08RBwnY9xHGROX83IP9LQxKTqgZNc/luN8Y5zo2OoXacx3iqGhvZ8nUbf6OE9H9zTo4qvzMt4ad12Kz4fzEvTLbqGjqe1i0Z6W235YIVpi2Wur+7o6CVX9r9S9/pfOerDdUv0v6y74ygHd9QKGuOJanc3KEcTW6wpBxWzVy0w/TKQ+q+oHOzyjdLXtL1qxf0fuJHM7jZeEqX9cRzd1szWNF6R7x+a7KijU3MD6zUStvVoH5a2dp2Epd+VSBw4bDx1XjcK1saQsD2JejSvY4+9nFraq81J//6R/PVpuu1vLUcSiUNkGt3sOonGKJJdN4rSL7XWrxuF5O3SivU6iXbp5tavM3LZVMaD+HUS9fKYJVcZ0RoTorVdI9CrcCS/ysR4UxUC+boRsKa6ym9a+FXgw/jx9vP905t/kHhxqaf7208Pd+vHr8+Pn199+uP/3+OT+AeL70/fPt99eX66c6XLf1mML+/Hi9Wb8WfYD+PvZ/7jeI6/ETH/cbxceO9bvm7tw4sP5i8=",
      "brillig_names": [
        "set_guardian12"
      ]
    },
    {
      "name": "set_guardian13",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian13"
      ]
    },
    {
      "name": "set_guardian14",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian14"
      ]
    },
    {
      "name": "set_guardian15",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian15"
      ]
    },
    {
      "name": "set_guardian16",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP+Uq5xbiaKIJGSFhEjEwid9irj3dXlczwxI09qd7J7AQw39lt+2q+xu+HX4dvfl5Y/P94/ff/x5+PDx1+HL0/3Dw/0fnx9+fL19vv/xOKK/Dpt/SXnrhw/1ZkCqhw86YUTS5pR1UHIqElTHdUkmjVievycbVKEe1Ig1YkpMLcgypEE9QW1R2Tybj6XkBElQ4dNCrBKrp1gPkgJZUMuQBinZtAWZ340+qUI9qBdIF9UtQy0obZAEubdFxAq/V3wE2akmiNicjyNVyIKmtyNxhXKFSpARM1Tc25Hc2yJdJFuCBIorJBUoxiKZmK+17AtRiqvIpB5UNUgy5KNvTi1BAvUgLZAGGVcYKp1YR6WHStsKFCotJUggrphr0iuqlQKNa4uv4lZzkM/WIgtq44oyVZoFKTElZsSMWCfWI6ZbgYglYolYJpaJFWKFWCVWiQkxIYYPxYfiQ/Gh+FB8KD4UH4YPw4fhw/Bh+DB8GD4MH4YPw4fhw/Bh+DB8GD4MH4YPw4fhw/DR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHDR97CxyBiiVgilollYoVYIVaJVWJCTIg1Yo2YElNi04dO0qCeoYilLUPEvLoXSVDeoAr1oFIgC6ooV5QFZe9hR2ooN7I1lJVsijLeEt4S3lIP5bwlKJRz2qAKRbacCxTZcslQZMsV5Uo2QVnIJig3sjWUlWyKspHNUO5k66E8zwKLKhTZSipQZCs5Q5GtlARFtnlmWES2irKQTVBuZGsoK9kUZSObodzJ1lHuka1uBYpsNWUoss0zw6LINs8MiwRCuVYIZSGboNzI1lBWsinKRjZD2cjWUe6RTag8ofKEypMU2YTKkyxQKEupEMq1QCgL2ai8eXpYhLKSjcoTJRuVJ0Y2Kk/oKo3Ka1tka1Reo6s0Kq/RVRqV1+gqjcprdJVG5TW6SqPyGl2lUXmNrtKovEZXaVReo6s0Kq/RVZTKU7qKUnlKV1EqT+kqSuUpXUWpPKWrKJWndBWl8pSuolSe0lWUylO6ilJ5SldRKk/pKkrlGV3FqDyjqxiVZ3QVo/KMrmJUntFVjMozuopReUZXOZ4tupOvqzpOh7l7zdQ0yWPZyfvBImLeD2qd5LFycyhzn67iNK9oTl5biyzIV90iDfKZqerk/aDapBbkNbOoQhZk/F7nU7/PdXgrydfQkeaojqRBvnIWWVAh5uOTzcnXy5F8vSyyIF8li7jCe9girvXOJWlSD/LOtUgXzX11kUBxxdxXFxHLBUKloOKrRLKT3+dFFuRrY1EPmj4muY95T7P7WNSDLGLFO6v4OiheeVIntSBfnYsE6mu9zD1vUayhuectIqbElJgRM2IdvR6x+XS8qAV5x1xUIa6Y97RM8rsxY3P0R+rLx3wSXkRsrogj+bW+xqv3jUXEvG+ITmpB3jcWhbJsG6RBKUMWlAtEjPkQ5kOYD6nkmOugvr7eHOJtzufnp7s7f5lz9npnvPT5eft09/h8+PD48vBwc/jf7cPL/KU/f94+zu/Pt0/j07Hi7x6/je9D8Pv9w53T683p6u3ypeN9Savr8vGepHckxiH6jUjaEdn88f+osdV8JlHfSOTLEuOAoUtizEpDQt86KZcVxmNg3IfRly8q7NroPWyk1C/akN+20f5bG2LMhl2eDduREJWQaCVdGkS/rNBli0F0kfSbNsZbzIs2dhb3OJSVtDT8qFYQkXfDyHsVciqQ0bxO49B39bGzNscbh5DohsLoj28V6o6VQomNBxw5aUj9+6OQGMV4gr88ip3FOQ5aITFOWqfbOc4cbzX0skaRMFLTaXmPbfWtws7qHJsxszo268saO+tzPHYsCSnbdQpU+lhZ1/kYx0Hm9GxG/pGGJiZVd5zk8t9qjHecGx1D7TqN8VYxNLTn6zT6Rg/veeee7lV8ZV7GS+t2seLzzrw03aJr6HhaO2mkt9WWd1aYtljmenZHRy+5sv+dDeNd/yt7fbhuif6X9eI4ys4dtYLGeKK6uBuUvYkt1pSDitlZC0zvBlL/FZWdXb5R+pq2s1bc/4Ebyexu4yVRujyOvdua2ZrGK/LLhybb6+jU3MB6jYRtPdqHpa1dJ2HpdyUSBw4bT53XjYK1MSTskkTdm9exx55OLe1sc9K/fyQ/P023y1vLnkTiEJlGN7tOojGKZNeNovRTrfXrRiF5O7VivU6inbq59euMnDaV8SB+nUQ9PWbJVUa0xoRobdcI9Cocya8yMd5UhUC+bgSsqa7ymxbeC3waP95+vX968w8Sry71dH/75eFu/fj95fHr2afP//8Zn8Q/WPx8+vH17tvL050rnf7LYnz5OF6s3ow/w34afz/zH8dz/I2I+Y/j5cJH3/J1a59efTB/AQ==",
      "brillig_names": [
        "set_guardian16"
      ]
    },
    {
      "name": "set_guardian17",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZrdThw5E4bvZY45aP+Uq5xbiaKIJGSFhEjEwid9irj3dXlczwxI09qd7J7AQw39lt+2q+xu+HX4dvfl5Y/P94/ff/x5+PDx1+HL0/3Dw/0fnx9+fL19vv/xOKK/Dpt/SXnrhw/1ZkCqhw86YUTS5pR1UHIqElTHdUkmjVievycbVKEe1Ig1YkpMLcgypEE9QW1R2Tybj6XkBElQ4dNCrBKrp1gPkgJZUMuQBinZtAWZ340+qUI9qBdIF9UtQy0obZAEubdFxAq/V3wE2akmiNicjyNVyIKmtyNxhXKFSpARM1Tc25Hc2yJdJFuCBIorJBUoxiKZmK+17AtRiqvIpB5UNUgy5KNvTi1BAvUgLZAGGVcYKp1YR6WHStsKFCotJUggrphr0iuqlQKNa4uv4lZzkM/WIgtq44oyVZoFKTElZsSMWCfWI6ZbgYglYolYJpaJFWKFWCVWiQkxIYYPxYfiQ/Gh+FB8KD4UH4YPw4fhw/Bh+DB8GD4MH4YPw4fhw/Bh+DB8GD4MH4YPw4fhw/DR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHx0fHR8dHDR97CxyBiiVgilollYoVYIVaJVWJCTIg1Yo2YElNi04dO0qCeoYilLUPEvLoXSVDeoAr1oFIgC6ooV5QFZe9hR2ooN7I1lJVsijLeEt4S3lIP5bwlKJRz2qAKRbacCxTZcslQZMsV5Uo2QVnIJig3sjWUlWyKspHNUO5k66E8zwKLKhTZSipQZCs5Q5GtlARFtnlmWES2irKQTVBuZGsoK9kUZSObodzJ1lHuka1uBYpsNWUoss0zw6LINs8MiwRCuVYIZSGboNzI1lBWsinKRjZD2cjWUe6RTag8ofKEypMU2YTKkyxQKEupEMq1QCgL2ai8eXpYhLKSjcoTJRuVJ0Y2Kk/oKo3Ka1tka1Reo6s0Kq/RVRqV1+gqjcprdJVG5TW6SqPyGl2lUXmNrtKovEZXaVReo6s0Kq/RVZTKU7qKUnlKV1EqT+kqSuUpXUWpPKWrKJWndBWl8pSuolSe0lWUylO6ilJ5SldRKk/pKkrlGV3FqDyjqxiVZ3QVo/KMrmJUntFVjMozuopReUZXOZ4tupOvqzpOh7l7zdQ0yWPZyfvBImLeD2qd5LFycyhzn67iNK9oTl5biyzIV90iDfKZqerk/aDapBbkNbOoQhZk/F7nU7/PdXgrydfQkeaojqRBvnIWWVAh5uOTzcnXy5F8vSyyIF8li7jCe9girvXOJWlSD/LOtUgXzX11kUBxxdxXFxHLBUKloOKrRLKT3+dFFuRrY1EPmj4muY95T7P7WNSDLGLFO6v4OiheeVIntSBfnYsE6mu9zD1vUayhuectIqbElJgRM2IdvR6x+XS8qAV5x1xUIa6Y97RM8rsxY3P0R+rLx3wSXkRsrogj+bW+xqv3jUXEvG+ITmpB3jcWhbJsG6RBKUMWlAtEjPkQ5kOYD6nkmOugvr7eHOJtzufnp7s7f5lz9npnvPT5eft09/h8+PD48vBwc/jf7cPL/KU/f94+zu/Pt0/j07Hi7x6/je9D8Pv9w53T683p6u3ypeN9Savr8vGepHckxiH6jUjaEdn88f+osdV8JlHfSOTLEuOAoUtizEpDQt86KZcVxmNg3IfRly8q7NroPWyk1C/akN+20f5bG2LMhl2eDduREJWQaCVdGkS/rNBli0F0kfSbNsZbzIs2dhb3OICxuP0wdrqb8m4Yea9CTgUymtdpHPquPnbW5njjEBLdUBj98a1C3bFSKLHxgCMnDal/fxQSoxhP8JdHsbM4x0ErJMZJq5w0ht4bDb2sUSSM1HSakLGtvlXYWZ1jM05hZGzWlzV21ud47FgSUrbrFKj08RBwnY9xHGROz2bkH2loYlJ1x0ku/63GeMe50THUrtMYbxVDQ3u+TqNv9PCed+7pXsVX5mW8tG4XKz7vzEvTLbqGjqe1k0Z6W215Z4Vpi2WuZ3d09JIr+9/Z5v6u/5W9Ply3RP/LenEcZeeOWkFjPFFd3A3K3sQWa8pBxeysBaZ3A6n/isrOLt8ofU3bWSvu/8CNZHa38ZIoXR7H3m09Ta+d727vb6vtdXRqbmC9RsK2Hu3D0tauk7D0uxKJA4eNp87rRsHaGBJ2SaLuzevYY0+nlna2OenfP5Kfn6bb5a1lTyJxiEyjm10n0RhFsutGUfqp1vp1o5C8nVqxXifRTt3c+nVGTpvKeBC/TqKeHrPkKiNaY0K0tmsEehWO5FeZGG+qQiBfNwLWVFf5TQvvBT6NH2+/3j+9+QeJV5d6ur/98nC3fvz+8vj17NPn//+MT+IfLH4+/fh69+3l6c6VTv9lMb58HC9Wb8afYT+Nv5/5j+M5/kbE/MfxcuGjb/m6tU+vPpi/AA==",
      "brillig_names": [
        "set_guardian17"
      ]
    },
    {
      "name": "set_guardian18",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian18"
      ]
    },
    {
      "name": "set_guardian19",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian19"
      ]
    },
    {
      "name": "set_guardian2",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian2"
      ]
    },
    {
      "name": "set_guardian3",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian3"
      ]
    },
    {
      "name": "set_guardian4",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian4"
      ]
    },
    {
      "name": "set_guardian5",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian5"
      ]
    },
    {
      "name": "set_guardian6",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian6"
      ]
    },
    {
      "name": "set_guardian7",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian7"
      ]
    },
    {
      "name": "set_guardian8",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian8"
      ]
    },
    {
      "name": "set_guardian9",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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HBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQuCIBFAFYjAAALPgwqVgECJAIAAgAAC1EjAAALUCYcClYCAAAqVwIDACJUAgQAKgRWBS0LBQIwCgACAAMBIgBWgEcAAi0KAlYjAAALPigAgAQEeAANAAAAgASAAyQAgAMAAAuoKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmJQAAC4AtCwQGCyIABoBEAAckAgAHAAAL3ScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAAxwIwAAC/YtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAMGyUAAA4ELgIAB4ADKACABAQABCUAAA4WLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAADFslAAAOpC0OCgEtDggCLQ4FAy0OCQQjAAAM3icCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAzfLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAOFi4IgAUACQEiAAmARwAKLQ4FCi0OCQEtDgcCLgyARwADLQ4IBCMAAAzeJiUAAAuALgiARQAFIwAADO8NIgAFgEMABiQCAAYAAA1fIwAADQQtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAADXUjAAAN4S0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAADhYuCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAN4QEiAAWARwAGLQoGBSMAAAzvKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAOMSMAAA48LgCAA4AFIwAADqMuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAOjy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAOXigBgAUEAAEDAIAGAAKABiMAAA6jJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "set_guardian9"
      ]
    },
    {
      "name": "set_provider",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "provider",
            "type": {
              "kind": "struct",
              "path": "structs::Provider",
              "fields": [
                {
                  "name": "chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                },
                {
                  "name": "evm_chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQdAIBEgEQDHQCARYBFAy4IgEQAAS4IgEUAAiUAAABZJQAAAGEoAgABBIBGJwICBAA7DgACAAEoAIBDBAADJiUAAAJgHgIABAAeAgAFADMqAAQABQAGJwIEAQEkAgAGAAAAiiUAAAKJJwIEAAAtCAEFJwIGBAcACAEGAScDBQQBACIFAgYtCgYHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBy0IAQQAAAECAS0OBQQnAgUEACcCBgQGJwIHAAEnAggEAS0KBQMjAAABBgwqAwYJJAIACQAAAhQjAAABGC0LBAkBIgAJgEMACi0LCgQcCgQLBRwKCwoAJwIEBAQAKgkEDC0LDAscCgsMBRwKDAQAJwILBAUAKgkLDS0LDQwcCgwNBhwKDQsAACoJBg0tCw0MHAoMDQUcCg0JABwKAQwAHAoCAQAtCAECJwINBAcACAENAScDAgQBACICAg0tCg0OLQ4MDgAiDgIOLQ4BDgAiDgIOLQ4KDgAiDgIOLQ4EDgAiDgIOLQ4LDgAiDgIOLQ4JDi0KBQMjAAAB1QwqAwYBJAIAAQAAAegjAAAB5yYcCgMBAAAqBwEEACICAgUAKgUDCS0LCQEwCgABAAQAKgMIAS0KAQMjAAAB1RwKAwkAACoHCQovCgAKAAktCwQKLgIACoADKACABAQAByUAAAKbLgiABQALACILAgwAKgwDDS0OCQ0tDgsEACoDCAktCgkDIwAAAQYoAIAEBHgADQAAAIAEgAMkAIADAAACiCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAArYjAAACwS4AgAOABSMAAAMoLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAxQuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAuMoAYAFBAABAwCABgACgAYjAAADKCY=",
      "debug_symbols": "tZdRbiIxDIbvMs88xImT2L3KqqpoO62QECAKK60q7r72EGegUqIWdl+Yb5zMHzuJHfI5vI7Px/en1eZt+zE8/Pocnver9Xr1/rTeviwPq+1GrJ+D0x9wfnjAhTzz8JDlCfIOTsBLO4BCLBCCAQlEAQwGuUD0BmZJZklmyWAQC5AzQAMuwDYEl0G98wZF0AMYpALeGaBBEfSTP0lgGjQraB8WYG8gOl4iDQ4M0rkpTGNNYBYda+qjEzVBcKUpxAJoFpSxvFfgArGMHiIXSBKyRwUqkMUSnAIVILXoWJQLqPNnKBZ03sAs6vwZYgF1/gxowAVCMKACaIJogtEEYyqQ9PMgQPqVOI+6giEqqEVmPrpgYBbddYEU1CKLEoNaWEHGQgk56ujoFaQPylhx2mzaOVKBFAtkZ5AKEBiYha0P6xLk02kxWII8HfbjqPlxkTGSR7vlftwchofNcb1eDL+X6+PU6WO33EzPw3IvreLsuHmVpwi+rdaj0mkxf+3an0KICcvnEBJzlZAEvRKBjojTjXXWcOgvJPBKwrclkDgXCWSXqkS+jiS0FQiDzQMhNhW6YTBbGADcDCPeHUb6v2FEqqtB7dWgjkTM0SRSgJYT3FZgSbWiwDHCnWGAb4fR2dw+u2ArKhxzFYlf3OjsTACscwF5TjGgdK3R2ZuZwBIkUwjN2cCOBBKYBF6s6k8k5jUR5NskOFQJbkt058LNc4HUlOhsTzmRk0UinLGKyCH5bRUkZwuLFKip4XvlE10tGejjrBH5+xpprp4p8E0a344l3B9LP+HIzQl3sUG+JJyPXT9g9iM3E873qmioGiT/oFqbzOfeyUgp15ORKLYnlf6JSq+aOjujGXJ7g3Sjib6W08AMbT960+rrnwXy1D6lO+U0c64VhC8y9wcS5DiZF+DSbRK1mt4sAbWaElysyo+8qHtDJJqlMPTWFWKaj8l0Y1VP9ZjMCW+U8Hi3BNQTLkXXkkDon9XzXzjk62PyUd6WL6v91a30pGr71fJ5PZbXt+Pm5aL18GdnLXar3e23L+PrcT+q0ny1lZ9fIHcSuZM+6gVXX6W0g8/6CtMrLSC4x5M68xc=",
      "brillig_names": [
        "set_provider"
      ]
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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TbEpNsWm2BSbYlNsik2xTWwT28Q2sU1sE9vENrFNbGc2+m52ZuOJBaxgAzt42M7d07PxQgUneNjqsf/6KLfAw1bVsYIN7OAABVRwgpbo2XghtoKtYCvYPBvrdBRQwQlaomfjhYfNJ7jzsW+BDTxsrTkOUEAFJ2iJ5/STvrznBJQnVrCBbvMlOyeiPFESzxkni6MXM8fjr/Xz3x5/rft281C4UMEJWqKHwoVH3e42D4ULG9hBt/kyeChceNiOmX6qD3QLtEQPhQsLWMHDNsSxgwMU0G2++jwULnSbL6SHwoUFrOBhExd7KFw4QAEVnOBhE18cD4ULC1hBt/lCeihcOEC3+d7noXDhTPSev9CL+a84J6X0ncBb+vq3x5LpsZD9nJHyxAJWsIHHkh3TO1Qf1RYooIITtERv6flwLGAFG3jYZnEcoICHbfqSeUtfaIne0rM7uu2cCNJt6tjADg5QQAUPm50KS/SWvrCAFWxgBwcooILYGraOrWPznjf/xd7zFwqo4AQt0RvSztkwH6ArfBMKiy4surDo3iLmK8pb5EIFJ2iJ3iIXFrCCDewgtoltYpvYJjbDZtj8CGnT0SuY47PC85Lc0QJ9vFdgASvYwA4OUEAFJ4itYCvYCraCrWAr2Aq2gq1gK9gqtoqtYqvYKraKrWKr2Cq2iq1ha9gatoatYWvYGraGrWFr2Dq2jq1j69g6to6tY+vYOraObWAb2Aa2gW1gG9gGtoFtYBvYBJtgE2yCTbAJNsEm2ASbYFNsik2xKTbFptgUm2JTbIptYpvYJraJbWKb2Ca2iW1im9gMm2EzbIbNsBk2w2bYyJJBlghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJ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",
      "brillig_names": [
        "sync_private_state"
      ]
    },
    {
      "name": "verify_vaa",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "211358376073803959": {
            "error_kind": "string",
            "string": "Need at least 1 signature"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3163564695355654215": {
            "error_kind": "string",
            "string": "Insufficient valid signatures"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4790011804579310016": {
            "error_kind": "string",
            "string": "VM version incompatible"
          },
          "5003515106221862139": {
            "error_kind": "string",
            "string": "Too many signatures"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14656550611213696286": {
            "error_kind": "string",
            "string": "guardian index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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+1bRvlO07xXtB0X7UdF+UrSfFe0XRftV0X5TtN8V7Q9F+1PR/lI0X4PDtShFK6Zo0YpWXNFKKFpJRSulaKUVLUbRYhWtjKKVVbRyilZe0SooWpyiVVS0SopWWdGqKFpVRaumaNUVrYai1VS0WopWW9HqKFpdRaunaPUVrYGiNVS0RorWWNGaKFpTRWumaM0VrYWitVS0VorWWtHaKFpbRWunaMcpWryi+RUtQdESFS1J0ZIVLUXRUhUtTdHSFe14RTtB0U5UtJMU7WRFO0XR2itaB0U7VdE6KlonReusaKcpWhdF66po3RTtdEXrrmg9FK2novVStN6Kdoai9VG0vorWT9H6K9oARRuoaIMUbbCinaloZyna2Yo2RNHOUbRzFe08RRuqaBmKlqloWYqWrWg5iparaMMUbbiijVC0kYo2StFGK9oYRRuraOMUbbyiTVC0iYo2SdEmK9oURZuqaNMUbbqizVC0mYo2S9FmK9ocRZuraPMULaBoeYo2X9EWKNpCRVukaIsVbYmiLVW0ZYq2XNFWKNpKRVulaKsVbY2irVW0dYq2XtE2KNpGRdukaJsVbYuibVW0bYq2XdF2KNpORdulaLsVbY+i7VW0fYq2X9HOV7QLFO1CRbtI0S5WtEsU7VJFu0zRLle0KxTtSkW7StGuVrRrFO1aRbtO0a5XtBsU7UZFu0nRbla0WxTtgKLdqmi3KdrtinaHot2paHcp2t2Kdo+i3ato9yna/Yr2gKI9qGgPKdrDivaIoj2qaI8p2uOK9oSiPaloTyna04r2jKI9q2jPKdrzivaCor2oaC8p2suK9oqivaporyna64r2hqK9qWhvKdrbivaOor2raO8p2vuK9oGifahoHynax4r2iaJ9qmifKdrnivaFon2paF8p2teK9o2ifato3yna94r2g6L9qGg/KdrPivaLov2qaL8p2u+K9oei/alofyma04Gx1KIUrZiiRStacUUroWglFa2UopVWtBhFi1W0MopWVtHKKVp5RaugaHGKVlHRKilaZUWromhVFa2aolVXtBqKVlPRailabUWro2h1Fa2eotVXtAaK1lDRGilaY0VromhNFa2ZojVXtBaK1lLRWilaa0Vro2htFa2doh2naPGK5le0BEVLVLQkRUtWtBRFS1W0NEVLV7TjFe0ERTtR0U5StJMV7RRFa69oHRTtVEXrqGidFK2zop2maF0UrauidVO00xWtu6L1ULSeitZL0Xor2hmK1kfR+ipaP0Xrr2gDFG2gog1StMGKdqainaVoZyvaEEU7R9HOVbTzFG2oomUoWqaiZSlatqLlKFquog1TtOGKNkLRRiraKEUbrWhjFG2soo1TtPGKNkHRJiraJEWbrGhTFG2qok1TtOmKNkPRZiraLEWbrWhzFG2uos1TtICi5SnafEVboGgLFW2Roi1WtCWKtlTRlinackVboWgrFW2Voq1WtDWKtlbR1inaekXboGgbFW2Tom1WtC2KtlXRtinadkXboWg7FW2Xou1WtD2KtlfR9inafkU7X9EuULQLFe0iRbtY0S5RtEsV7TJFu1zRrlC0KxXtKkW7WtGuUbRrFe06Rbte0W5QtBsV7SZFu1nRblG0A4p2q6Ldpmi3K9odinanot2laHcr2j2Kdq+i3ado9yvaA4r2oKI9pGgPK9ojivaooj2maI8r2hOK9qSiPaVoTyvaM4r2rKI9p2jPK9oLivaior2kaC8r2iuK9qqivaZoryvaG4r2pqK9pWhvK9o7ivauor2naO8r2geK9qGifaRoHyvaJ4r2qaJ9pmifK9oXivalon2laF8r2jeK9q2ifado3yvaD4r2o6L9pGg/K9ovivarov2maL8r2h+K9qei/aVozgBGUotStGKKFq1oxRWthKKVVLRSilZa0WIULVbRyihaWUUrp2jlFa2CosUpWkVFq6RolRWtiqJVVbRqilZd0WooWk1Fq6VotRWtjqLVVbR6ilZf0RooWkNFa6RojRWtiaI1VbRmitZc0VooWktFa6VorRWtjaK1VbR2inacosUrml/REhQtUdGSFC1Z0VIULVXR0hQtXdGOV7QTFO1ERTtJ0U5WtFMUrb2idVC0UxWto6J1UrTOinaaonVRtK6K1k3RTle07orWQ9F6KlovReutaGcoWh9F66to/RStv6INULSBijZI0QYr2pmKdpaina1oQxTtHEU7V9HOU7ShipahaJmKlqVo2YqWo2i5ijZM0YYr2ghFG6looxRttKKNUbSxijZO0cYr2gRFm6hokxRtsqJNUbSpijZN0aYr2gxFm6losxRttqLNUbS5ijZP0QKKlqdo8xVtgaItVLRFirZY0ZYo2lJFW6ZoyxVthaKtVLRVirZa0dYo2lpFW6do6xVtg6JtVLRN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",
      "debug_symbols": "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rfbcas+t9txqz6323GrPrfbcas+t9txqz6323GrPrfbcas+t9txqz6323GrPrfbcas+t9txqz6323GrPrfbcas+99txrz7323GvPvfbca8+99txrz7323GvPvfbca8+99txrz7323GvPvfbca8+99txrz7323GvPvfbca8+99txrz7323GvPvfbca8+99txrz7323GvPvfbca8+99txrz7323GvPvfbca8+zDrZH0iqSIi2yIi+Kov3o2/NLo6gcWg4th5bj2/M9k7woivajb88vjaJZtIqkSIvKYeWwclg5vBxeDi+Hl8PL4eXwcng5vBxejihHlCPKEeWIckQ5ohxRjihHlGOXY5djl2OXY5djl2OXY5djl2M/RxbJLo2iWbSKpEiLrMiLoqgcoxyjHKMcoxyjHKMcoxzfnm9LiqL96NvzHUmjaBatIinSIivyoijaj1Y5VjlWOVY5VjlWOVY5VjlWOVY5pBxSDimHlEPKIeWQckg5pBxSDi2HlkPLoeXQcmg5tBxaDi2HlsPKYeWwclg5rBxWDiuHlcPKYeXwcng5vBxeDi+Hl8PL4eXwcng5ohxRjihHlCPKEeWIckQ5ohxRjl2OXY5djl2OXY5djl2OXY5djv0cWVa7NIpm0SqSIi2yIi+KonKMcoxyjHKMcoxyjHKMcoxyjHKMctSe79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+157v2fNee79rzXXu+a8937fmuPd+15/vt+fy9PZ+/t+fz9/Z8/t6ez9/b8/l7ez5/b8/n7+35/L09n79fOUY5RjlGOUY5RjlGOUY5RjlGOUY5ZjlmOWY5ZjlmOWY5ZjlmOWY5ZjlWOVY5VjlWOVY5VjlWOVY5VjlWOaQcUg4ph5RDyiHlkHJIOaQcUg4th5ZDy6Hl0HJoObQcWg4th5bDymHlsHJYOawcVg4rh5XDymHl8HJ4ObwcXg4vh5fDy+Hl8HJ4OaIcUY4oR5Qj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vNK80rzSvNq82rzavNq82rzavHq8nuyNo/GG7dd4NJ6NV2NprI2b15rXmtea15vXm9eb15vXm9eb15vXm9eb15s3mjeaN5o3mjeaN5o3mjeaN5o3mnc3727e3by7eXfz7ubdzbubdzfvxpuFruLReDZejaWxNrbG3jgaN+9o3tG8o3lH847mHc07mnc072je0byzeWfzzuadzTubdzbvbN7ZvLN5Z/Ou5l3Nu5p3Ne9q3tW8q3lX867mXc0rzSvNK80rzSvNK80rzSvNK80rzavNq82rzavNq82rzdvyylpeWcsra3llLa+s5ZW1vLKWV9byylpeWcsra3llLa+s5ZW1vLKWV9byylpeWcsra3llLa+s5ZW1vLKWV9byylpeWcsra3llLa+s5ZW1vLKWV9byylpeWcsra3llLa+s5ZW1vLKWV9byylpeWcsra3nlLa+85ZW3vPKWV97yylteecsrb3nlLa+85ZW3vPKWV97yylteecsrb3nlLa+85ZW3vPKWV97yylteecsrb3nlLa+85ZW3vPKWV97yylteecsrb3nlLa+85ZW3vPKWV97yylteecsrb3nlLa+85ZW3vPKbVzs5vd87qOYnry5bY28cjTd88uryaDwbr8bNq82rzavNq82rzWvNa8178up749f85NVlaayNrbE3Pl5N3vDJq8vHm9fz5NXl1Vgaa2Nr7I3Tm+9D+smrfEfRT15dHo1n49VYGmtja+yNo3Hz7ubdzbubdzfvbt7dvLt5d/Pu5t144/drPBrPxquxNNbG1tgbR+PmHc07mnc072je0byjeUfzjuYdzTuadzbvbN7ZvLN5Z/PO5p3NO5t3Nu9s3tW8q3lX867mXc27mnc172re1byreaV5pXmleaV5pXmleaV5pXmleaV5tXm1ebV5tXm1ebV5tXm1ebV5tXmtea15rXmtea15rXmtea15rXmteb15vXm9eb15vXm9eb15vXm9eVteRcuraHkVLa+i5VW0vIqWV9HyKlpeRcuraHkVLa+i5VW0vIqWV9HyKlpeRcuraHkVLa+i5dVuebVbXu2WV7vl1W55tVte7ZZXu+XVbnm1W17tlle75dVuebVbXu2WV7vl1W55tVte7ZZXu+XVbnm1W17tlle75dVuebVbXu2WV7vl1W55tVte7ZZXu+XVbnm1W17tlle75dVuebVbXu2W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zN2ceefK3bwooIIGOhjgLszdvDhAbI7NsTk2x+bYHFtu7MxlyN38ih8rX1h4aKCD34SV977czYO5mxcHOMEFCpi2vFfng/DKu3Ju7MUA98N8teHhACe4QAEVNNDBALENbAPbwJYb+/XMVr5esL+a2co/X9rfu1UrXznY3xtIK/94aUv+Z/nAKvlvc4+/d31W/uXS/l5TWPmHSw8NdDDAXZh7fDFteQy5xxcXKKCCBjoY4C7MPb6ITbAJNsEm2ASbYBNsgk2xKTbFptgUm2JTbIpNsSk2w2bYDJthM2yGzbAZNsNm2BybY3Nsjs2xOTbH5tgcm2MLbIEtsAW2wBbYAltgC2yBbWPb2Da2jW1j29g2to1tY9tly79OejjACS5QQAUNdDBAbAPbwDawDWwD28A2sA1sA9vANrFNbBPbxDaxTWwT28Q2sU1sCxtZMsmSSZZMsmSSJZMsmWTJJEsmWTLJkkmWTLJkkiWTLJlkySRLJlkyyZJJlkyyZJIlkyyZZMkkSyZZMsmSSZZMsmSSJZMsmWTJJEsmWTLJkkmWTLJkkiWTLJlkySRLJlkyyZJJlkyyZJIlkyyZZMkkSyZZMsmSSZZMsmSSJZMsmWTJJEsmWTLJkkmWTLJkkiWTLJlkySRLJlkyyZJJlkyyZJIliyxZZMkiSxZZssiSRZYssmSRJYssWWTJIksWWbLIkkWWLLJkkSWLLFlkySJLFlmyyJJFliyyZJEliyxZZMkiSxZZssiSRZYssmSRJYssWWTJIksWWbLIkkWWLLJkkSWLLFlkySJLFlmyyJJFliyyZJEliyxZZMkiSxZZssiSRZYssmSRJYssWWTJIksWWbLIkkWWLLJkkSWLLFlkySJLFlmyyJJFliyyZJEliyxZZMkiSxZZssiSRZYssmSRJYssWWTJIksWWbLIkkWWLLJkkSWLLFlkySJLFlmyyJJFliyyZJEliyxZZMkiSxZZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZImSJkCVClghZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZomSJkiVKlihZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZYmSJkSVGlhhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZ4mSJkyVOljhZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZEmRJkCVBlgRZssmSTZZssmSTJZss2WTJJks2WbLJkk2WbLJkkyWbLNlkySZLNlmyyZJNlmyyZJMlmyzZZMkmSzZZssmSTZZssmSTJZss2WTJJks2WbLJkk2WbLJkkyWbLNlkySZLNlmyyZJNlmyyZJMlmyzZZMkmSzZZssmSTZZssmSTJZss2WTJJks2WbLJkk2WbLJkkyWbLNlkySZLNlmyyZJNlmyyZJMlmyzZZMkmSzZZssmSTZZssmSTJZss2WTJJks2WbLJkk2WbLJkkyWbLNlkySZLNlmyyZJNlmyyZJMlmyzZZMkmSzZZssmSTZZssmRXlsivskR+lSXyqyyRX2WJ/CpL5FdZIr/KEvlVlsivskR+P2wD28A2sA1sA9vANrANbAPbwDaxTWwT28Q2sU1sE9vENrFNbAvbwrawLWwL28K2sC1sC9vCJtgEm2ATbIJNsAk2wSbYBJtiU2yKTbEpNsWm2BSbYlNshs2wGTbDZtgMm2EzbIbNsDk2x+bYHJtjc2yOzbE5NscW2AJbYAtsgS2wBbbAFtgC28a2sW1sG9vGtrFtbBvbxkaWDLJkkCWDLBlkySBLBlkyyJJBlgyyZJAlgywZZMkgSwZZMsiSQZYMsmSQJYMsGWTJIEsGWTLIkkGWDLJkkCWDLBlkySBLBlkyyBJ6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0LvVei9Cr1Xofcq9F6F3qvQexV6r0Lv9Q+xkSX0XoXeq9B7FXqvQu9V6L0KvVeh9yr0XoXeq9B7FXqvQu9V6L0KvVeh9yr0XoXeq9B7FXqvQu9V6L0KvVeh9yr0XoXeq9B7FXqvQu9V6L0KvVeh9yr0XoXeq9B7FXqvQu9V6L0KvVeh9yr0XoXeq9B7FXqvQu9V6L0KvVeh9yr0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b0qvVel96r0XpXeq9J7VXqvSu9V6b3+ITayhN6r0ntVeq9K71XpvSq9V6X3qvReld6r0ntVeq9K71XpvSq9V6X3qvReld6r0ntVeq9K71XpvSq9V6X3qvReld6r0ntVeq9K71XpvSq9V6X3qvReld6r0ntVeq9K71XpvSq9V6X3qvReld6r0ntVeq9K71XpvSq9V6X3qvReld6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1eq9G79XovRq9V6P3avRejd6r0Xs1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SxN9l7yuCyftQGO9ysZGI1E7N1BAIqtRld03jXr3dpEu4zdjLmco5LGu1rD1z+Awl4uf6zBElfQo6VHSo6RHSY+aHjU9anrkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87zyHkeOc8j53nkPI+c55HzPHKeR87znvO85zzvOc97zvOe87znPO85z3vO857zvOc87znPe87znvO85zzvOc97zvOe87znPO85z3vO857zvOc87znPe87znvO85zzvOc97zvOe87znPO85z3vO857zvOc87znPe87znvO85zzvOc97zvOe87znPO85z3vO857zvOc87znPe87znvO85zzvOc97zvOe87znPO85z3vO857zvOc87znPe87znvO85zzvOc97zvOe87znPO85z3vO857zvOc87znPe87znvO85zzvOc97zvOe87znPO85z3vO857zvOc87znPe87zkYc7HsSLkYd7KU/VUkWqfqqR/p6qpKqpJFV69PTo6dHTo6dHf3n0kYd7qZKqppJUmspSeaqWKlKlR0mPkh4lPUp6lPQo6VHSo6RHSY+SHjU9anrU9KjpUdOjpkdNj5oeNT1qekh6SHpIekh6SHpIekh6SHpIekh6aHpoemh6aHpoemh6aHpoemh6aHpYelh6WHpYelh6WHpYelh6WHpYenh6eHp4enh6eHp4enh6eHp4enh6tPRo6dHSo6VHS49jnh+PwvaRh3uplipS9VMd8/ylSqqaSlJpqvSI9Ij0iPSI9Ojp0dOjp0dPj54ePT16evT06OnRT4+Rh3upkqqmklSaylJ5qpYqUqVHSY+SHiU9SnqU9CjpUdKjpEdJj5IeNT1qetT0qOlR06OmR02Pmh41PWp6SHpIekh6SHpIekh6SHpIekh6SHpoemh6aHpoemh6aHpoemh6aHpoeox5bkOVVDXV4RFDaSpL5alaqkjVTzXm+VQlVU2VHp4enh6eHp4enh6eHi09Wnq09Gjp0dKjpUdLj5YeLT1aekR6RHpEekR6RHpEekR6RHpEekR69PTo6dHTo6dHT4+eHj09enr09Oinx8jDvVRJVVNJKk1lqTxVSxWp0qOkR0mPkh4lPUp6lPQo6VHSo6RHSY+aHjU9anrU9KjpUdOjpkdNj5oeNT0kPSQ9JD0kPSQ9JD0kPSQ9JD0kPTQ9ND00PTQ9ND00PTQ9ND00PTQ9LD0sPSw9cp7XnOc153nNeV5zntec5zXnec15XnOe15znNed5zXlec57XnOc153nNeV5zntec5zXnec15XnOe15znNed5zXlec57XnOc153nNeV5zntec5zXnec15XnOe15znNed5zXlec57XnOc153nNeV5zntec5zXnec15XnOe15znNee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynkvOc8l5LjnPJee55DyXnOeS81xynmvOc815rjnPNee55jzXnOea81xznmvOc815rjnPNee55jzXnOea81xznmvOc815rjnPNee55jzXnOea81xznmvOc815rjnPNee55jzXnOea81xznmvOc815rjnPNee55jzXnOea81xznmvOc815rjnPNee55jzXnOfzHctlqJYqUvVTjfefTVVS1VSSSlNZqvSw9LD0sPQYyyTVoUqqmkpSaSpL5alaqkjVT9XSo6VHS4+WHi09Wnq09Gjp0dKjpUekR6RHpEekR6RHpEekR6RHpEekR0+Pnh49PXp69PTo6dHTo6dHT49+esy3JU9VUtVUkkpTWSpP1VJFqvQo6VHSo6RHSY+SHiU9SnqU9CjpUdKjpsd4CaIPVVNJqsMjhrJUnqqlilT9VOPdh1OVVDWVpEoPSQ9JD0kPSQ9JD00PTQ9ND00PTQ9ND00PTQ9ND00PSw9LD0sPSw9LD0sPSw9LD0sPSw9PD08PTw9PD08PTw9PD08PTw9Pj5YeLT1aerT0aOnR0qOlR0uPlh4tPSI9Ij0iPSI9Ij0iPSI9Ij0iPSI9enr09Ojp0dOjp0dPj54ePT16evTTY66FNlVJVVNJKk1lqTxVSxWp0qOkR0mPkh4lPUp6lPQo6VHSo6RHSY+aHjU9anrU9Mh57jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zz3nOee89xznnvOc8957jnPPee55zxvOc9bzvOW87zlPG85z1vO85bzvOU8bznPW87zlvO85TxvOc9bzvOW87zlPG85z1vO85bzvOU8bznPW87zlvO85TxvOc9bzvOW87zlPG85z1vO85bzvOU8bznPW87zlvO85TxvOc9bzvOW87zlPG85z1vO85bzvOU8bznPW87zlvO85TxvOc9bzvOW87zlPG85z1vO85bzvOU8bznPW87zlvO85TxvOc9bzvOW87zlPG85z1vO85bzvOU8bznPW87zlvO85TxvOc9bzvOW87zlPG85z1vO85bzvOU8bznPW87zlvO85TxvOc9bzvOW87zlPG85z1vO85bzvOU8bznP21zmtAypS9qSvmRbMpbsp4y5mvGUZcm6pCx5fKQ2lKXyVC1VpOqnGlN+qpKqppJU6VHSo6RHSY+SHiU9anrU9KjpUdOjpkdNj5oeNT1qetT0kPSQ9JD0kPSQ9JD0kPSQ9JD0kPTQ9ND00PTQ9ND00PTQ9ND00PTQ9LD0sPSw9LD0sPQYS6qN/eD1Kt4hx96hQ+qStqQv2ZaMJXvK16tKhixL1iWXWyy3WG6x3GK5xXKL5daXW19ufbn15daXW19ufbn15daXW0+312t1pyxL1iVlSV3SlvQl25Kx5HIry60st7LcynIry60st7LcynIry60st7rc6nKry60ut7rc6nJ7rTE+ZFsyluwpX+uLD1mWPNzG7tlf65YOqUvakofbsa5pn2/MfcnD7Vhl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XlXwqoJXFbyq4FUFryp4VcGrCl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4JeCXglYBXAl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4peKXglYJXCl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl4ZeGXglYFXBl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl45eOXglYNXDl418KqBVw28auBVA68aeNXAqwZeNfCqgVcNvGrgVQOvGnjVwKsGXjXwqoFXDbxq4FUDrxp41cCrBl418KqBVw28auBVA68aeNXAqwZeNfCqgVcNvGrgVQOvGnjVwKsGXjXwqoFXDbxq4FUDrxp41cCrBl418KqBVw28auBVA68aeNXAqwZeNfCqgVcNvGrgVQOvGnjVwKsGXjXwqoFXDbxq4FUDrxp41cCrBl418KqBVw28auBVA68aeNXAqwZeNfCqgVcNvGrgVQOvGnjVwKsGXjXwqoFXDbxq4FUDrxp41cCrBl418KqBVw28auBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVgFcBXgV4FeBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBq754JY/FqyN2D12hBVqhDdqhG3RAw7fAt8C3wLfAt8C3wLfAt8C3wLfAt8K3wrfCt8K3wrfCt8K3wrfCt8JX4CvwFfgKfAW+Al+Br8BX4CvwVfgqfBW+Cl+Fr8JX4avwVfgqfA2+Bl+Dr8HX4GvwNfgafA2+Bl+Hr8PX4evwdfg6fB2+Dl+Hr8O3wbfBt8G3wbfBt8G3wbfBt8G3wTfgG/AN+AZ8A74B34BvwDfgG/Dt8O3w7fDt8O3w7fDt8O3w7fAFr5BvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk258avuAV8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itwvy7YJ8uyDfLsi3C/Ltgny7IN8uyLcL8u2CfLsg3y7Itz81fMEr5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkG+XZBvF+TbBfl2Qb5dkG8X5NsF+XZBvl2Qbxfk2wX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvf2r4glfItyvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLfrsi3K/Ltiny7It+uyLcr8u2KfLsi367Ityvy7Yp8uyLf/tTwBa+Qb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+TbFfl2Rb5dkW9X5NsV+XZFvl2Rb1fk2xX5dkW+XZFvV+Tb9ZVvb2XovvTkVRv/ZvLqpYdvi6EF+ukb1oYctq0P7dANOqB76le8/aULdIUWaIU2aIdu0AEN3wLfAt8C3wLfAt8C3wLfAt8C3wLfCt8K3wrfCt8K3wrfCt8K3wrfCl+Br8BX4CvwFfgKfAW+Al+Br8BX4avwVfgqfBW+Cl+Fr8JX4avwNfgafA2+Bl+Dr8HX4GvwNfgafB2+Dl+Hr8PX4evwdfg6fB2+Dt8G3wbfBt8G3wbfBt8G3wbfBt8G34BvwDfgG/AN+AZ8A74B34BvwLfDt8O3w7fDt8MXvGrgVQOvGnjVwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsArwK8CvAqwKsOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXHbzq4FUHrzp41cGrDl518KqDVx286uBVB686eNXBqw5edfCqg1cdvOrgVQevOnjVwasOXnXwqoNXffHKHotX9li8ssfilT0Wr+yxeGWPxSt7LF7ZY/HKHotX9njAt8C3wLfAt8C3wLfAt8C3wLfAt8C3wrfCt8K3wrfCt8K3wrfCt8K3wlfgK/AV+Ap8Bb4CX4GvwFfgK/BV+Cp8Fb4KX4Wvwlfhq/BV+Cp8Db4GX4Ovwdfga/A1+Bp8Db4GX4evw9fh6/B1+Dp8Hb4OX4evw7fBt8G3wbfBt8G3wbfBt8G3wbfBN+Ab8A34BnwDvgHfgG/AN+Ab8O3w7fDt8O3w7fDt8O3w7fDt8AWvCnhVwKsCXhXwqoBXBbwq4FUBrwp4VcCrAl4V8KqAVwW8KuBVAa8KeFXAqwJeFfCqgFcFvCrgVQGvCnhVwKsCXhXwqoBXBbwq4FUBrwp4VcCrAl4V8KqAVwW8KuBVAa8KeFXAqwJeFfCqgFcFvCrgVQGvCnhVwKsCXhXwqoBXBbwq4FUBrwp4VcCrAl4V8KqAVwW8KuBVAa8KeFXAqwJeFfCqgFcFvCrgVQGvCnhVwKsCXhXwqoBXBbwq4FUBrwp4VcCrAl4V8KqAVwW8KuBVAa8KeFXAqwJeFfCqgFcFvCrgVQGvCnhVwKsCXhXwqoJXFbyq4FUFryp4VcGrCl5V8KqCVxW8quBVBa8qeFXBqwpeVfCqglcVvKrgVQWvKnhVwasKXlXwqoJXFbyq4FUFryp4VcGrCl5V8KqCVxW8quBVBa8qeFXBqwpeVfCqglcVvKrgVQWvKnhVwasKXlXwqoJXFbyq4FUFryp4VcGrCl5V8KqCVxW8quBVBa8qeFXBqwpeVfCqglcVvKrgVQWvKnhVwasKXlXwqoJXFbyq4FUFryp4VcGrCl5V8KqCVxW8quBVBa8qeFXBqwpeVfCqglcVvKrgVQWvKnhVwasKXlXwqoJXFbyq4FUFrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrwS8EvBKwCsBrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrxS8UvBKwSsFrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrwy8MvDKwCsDrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSsHrxy8cvDKwSvk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk2w35dkO+3ZBvN+TbDfl2Q77dkG835NsN+XZDvt2Qbzfk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",
      "brillig_names": [
        "discover_new_messages",
        "verify_vaa_unconstrained",
        "directive_integer_quotient",
        "directive_invert"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8AL3051iGPKZ0NBMKp\nGA/rvVgwFdl+g6JAW8DJozxv46Yq10sdh7SOGBu3UvX4JaP+hFxU1abj0oeYf8UooTKgFgJYREcf\nphL26InhdTjcE2sRouRC2xJ0Xa91aD+oTiRIEu76to/92KdlyS0C2ZhKJ2giECqcOaSvHciMKtsw\nugoPy+3py8YjamwqXQNiNPI5pCFY109afgBIBjukgyk2fyo+/ggxYrK/hPOYYfvAaVv4mC4sAohO\nMRa/4HOsFqZII6JgbVmZkp++giygnF8miWSPnzYjvEQxemrkEXXQ89wm0yPj/iPQOs7E+qSKfV8r\nSqnrdGtZa4oAAJgoc0UeLjAqDpvDNb1ooJHms9v/N+CZe/pu/iNKQuqFxgOPGAnQH9PsY1xj3Jww\n0fyI6RCfIczkKhiPvqR+eAb2A3IDL/YZlVPd+oL5cchjoCqBGiWxBwC1ujV2rODxy6Jd6iaiugTR\ntaiUPAYJ5YdCMm7estJaD/0jn96JoBjfTVi28mHaEabVvIpfVK1Cmo0sICvRD9kVavxZhNfishhT\njnOjarMEaHGye2msWK1jh5dtDtpyAx4+e0Dduaitynb2eIOYxQbDoDckJN0+t3aDmp3TBsjNQ12c\n6kZaqVBXCkZFy+OGJLmpeE9iZgVuz7YbGHov/gHgXspoO5m7uAvkLpOVADMo2YeAzLjTe3Mryr6f\nYB8eduKiEnlyBj/nccCD+ArWMCYze/g7/1gsXHQQNSAQBuGx+eRVLUvBUi1Db6H+nA0tKWybFGSl\ncjRCQgLwn8FS829uUGv6itQJhKm0PXv8diwXcDwftkIPON9aRPIuID7tp69ItDlVDnNAWZoATN32\nLSHrSJuRmKhkLL92LlSOA5ve52T8+85x9jwkt2+sZv9oEf1BtfmTbZMquuTG6TPg05wk6o4uDu5w\nKlMm81nJR8AYKManIboNK+giDPWCP/iuUOWwuyRCAqKUvI9lVCTrdy4vVaXhZiMZNfeflfb/rcn/\nBAddGOhbAK47GjXuPTW7GMEFOBJ+7qIY43w9g0w9YVzzL/1weq/e83HbnBvGXwoWQbB5QVsYdLQV\nPnPt61pnx0vzd6F/o9l8c/2lN6MMLhu9gUexwi4cM9SJ9RLsGwRl5UovLQdxVqasfYtj0j3qDALz\nraaaMHPJI4qIJEkQVTjmt7fMHRakjRpUewUKvqsOph7jBwg89atUjqLzgOCEyTSsmMTw/3fSVEdv\nvkbeag18MBoXMLxycDcitkOYT9JwQ1vDk7UmanJ2uqITNrM2LUuYZC3kTsbbubxB9vGnsk2Xnm6s\nw/vHM2T9Q6ngY+cjQ6LRVcEgtG206jLdzeATrk6TxDkcMX388woJH+MnhA2QQXCDfI1F6dB2qyjn\nxsUpIbOavKFTQCu6CY53PJ2DKZYLRXnO1Wtfl4LY8KuDFD8uLqtonmZODRIkRFeSpTUTKYkvuEDW\n5jJJwLuJORO9zeVc05ewOJnwLmN/afiw/CVLhg+vorUFsSm+mNlGSxvKnqIJJmHT4qjDxjVfNihG\nJ7c6cI/8tX8HXRXMbTkcX2yOsn2Spi+mSy6LFS/U9WQrK9kc5RZetAngX4LU9ZHB3N6sd0q934fw\nNR9LJqLPaxcXNyua3gLBRwbC0LWCAehMmeI6mL+zzj+TbvPU+pucInKV7sual4UnUqomycS6Hk10\nxn5n64tqxSnHNsKLK0AksckC5x1i9AgBI8R5FcuabqzFc/tS9IEqCR8rV5ADoB8CPAi78u6OEwod\n/+w+DHMAFnAWAcc0wq3TWKrQ0/2tJ+BbTP0QFD7TmcIjk8cZONj5jsR0fLMev4aPYei7oAEIbnNd\n/TUQu2/Y0t3UcYq/PNeAL6mm2Aj6IfNtYdrCVy8pN3u+A/+RVNhCzowxX3fk1rLKJLHgSWrOylvP\n6UGOG/nsqhoRsFV+wil4tB1ht3jlC87K8AkfEQs7LhQwtRoB3mXk34Cu/5K9KM9Cwq1SO24j77Px\nyVS3d5e8RB70MxkiI8FXRaCuGKmII1tDQYL9wJbxxuFF5mETjL0EyG4tC847s+66Mkh/OYmIyM9X\nFfYBoBvSjoV5lNLRQMUTRG0ljTsUljB1bKyOQHZw7siyXWYmAFSf4NLfwc986mT44BrlVrBwSjYf\nTDBmiKQzlde0wdSVaQqKDCv42HCZaeTqIc34qag1H1l4RYqy825J1UnPb+Kq5FHFJ1yFt2HRz3QA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACGVBSQVQHaZJ1IbidCOMXu4uflMr4fswo2VLcOJyuCcgIyg1wm+uUgZ8lhg0VTZPUe3tL\nDWtW34vcHgXGFbCtBADENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0nypzPAUKZI6Ydhyx8IkxCZGgckTai/ecTczXvcW/s3hkrGm07\nFN/lqa1jlR0tdm317kwTWEQ/WhQIa1GW4T5G"
    },
    {
      "name": "verify_vaa_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 32,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 32,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 64,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "211358376073803959": {
            "error_kind": "string",
            "string": "Need at least 1 signature"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4790011804579310016": {
            "error_kind": "string",
            "string": "VM version incompatible"
          },
          "5003515106221862139": {
            "error_kind": "string",
            "string": "Too many signatures"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14656550611213696286": {
            "error_kind": "string",
            "string": "guardian index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "verify_vaa_unconstrained"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Wormhole"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "state",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "sequences",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "wormhole_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_1",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_2",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_3",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_4",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_5",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_6",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_7",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000010"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_8",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000011"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_9",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000012"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_10",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000013"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_11",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000014"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_12",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000015"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_13",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000016"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_14",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000017"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_15",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000018"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_16",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000019"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_17",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_18",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_19",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "current_guardian_set_index",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::_publish_message_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::_publish_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "body_bytes",
                    "type": {
                      "kind": "array",
                      "length": 1860,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "body_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::compute_vaa_hash_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::compute_vaa_hash_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::expire_guardian_set_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::expire_guardian_set_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian_idx",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "guardians",
                    "type": {
                      "kind": "array",
                      "length": 19,
                      "type": {
                        "fields": [
                          {
                            "name": "address",
                            "type": {
                              "fields": [
                                {
                                  "name": "value0",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value1",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value2",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value3",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value4",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value5",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value6",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value7",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value8",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value9",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value10",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value11",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value12",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value13",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value14",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value15",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value16",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value17",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value18",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "value19",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x0",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x1",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x2",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x3",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x4",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x5",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x6",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x7",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x8",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x9",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x10",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x11",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x12",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x13",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x14",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x15",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x16",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x17",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x18",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x19",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x20",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x21",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x22",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x23",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x24",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x25",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x26",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x27",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x28",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x29",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x30",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_x31",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y0",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y1",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y2",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y3",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y4",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y5",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y6",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y7",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y8",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y9",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y10",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y11",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y12",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y13",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y14",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y15",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y16",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y17",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y18",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y19",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y20",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y21",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y22",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y23",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y24",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y25",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y26",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y27",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y28",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y29",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y30",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                },
                                {
                                  "name": "pub_key_y31",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "structs::Guardian_PK"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "structs::Guardian"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::get_guardian_by_index_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "address",
                    "type": {
                      "fields": [
                        {
                          "name": "value0",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value1",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value2",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value3",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value4",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value5",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value6",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value7",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value8",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value9",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value10",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value11",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value12",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value13",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value14",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value15",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value16",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value17",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value18",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "value19",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x0",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x1",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x2",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x3",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x4",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x5",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x6",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x7",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x8",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x9",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x10",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x11",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x12",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x13",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x14",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x15",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x16",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x17",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x18",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x19",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x20",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x21",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x22",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x23",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x24",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x25",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x26",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x27",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x28",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x29",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x30",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_x31",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y0",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y1",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y2",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y3",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y4",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y5",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y6",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y7",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y8",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y9",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y10",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y11",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y12",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y13",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y14",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y15",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y16",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y17",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y18",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y19",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y20",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y21",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y22",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y23",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y24",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y25",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y26",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y27",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y28",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y29",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y30",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        },
                        {
                          "name": "pub_key_y31",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian_PK"
                    }
                  }
                ],
                "kind": "struct",
                "path": "structs::Guardian"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_guardian_by_index_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_hardcoded_guardians_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 19,
                "type": {
                  "fields": [
                    {
                      "name": "address",
                      "type": {
                        "fields": [
                          {
                            "name": "value0",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value1",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value2",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value3",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value4",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value5",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value6",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value7",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value8",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value9",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value10",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value11",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value12",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value13",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value14",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value15",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value16",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value17",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value18",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "value19",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x0",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x1",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x2",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x3",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x4",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x5",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x6",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x7",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x8",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x9",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x10",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x11",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x12",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x13",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x14",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x15",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x16",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x17",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x18",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x19",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x20",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x21",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x22",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x23",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x24",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x25",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x26",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x27",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x28",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x29",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x30",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_x31",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y0",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y1",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y2",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y3",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y4",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y5",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y6",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y7",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y8",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y9",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y10",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y11",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y12",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y13",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y14",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y15",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y16",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y17",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y18",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y19",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y20",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y21",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y22",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y23",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y24",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y25",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y26",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y27",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y28",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y29",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y30",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          },
                          {
                            "name": "pub_key_y31",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "structs::Guardian_PK"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "structs::Guardian"
                }
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_hardcoded_guardians_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_provider_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  }
                ],
                "kind": "struct",
                "path": "structs::Provider"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::guardian_set_expired_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::guardian_set_expired_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "wormhole_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::init_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::init_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::parse_vaa_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 66,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 1860,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::parse_vaa_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian10_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian10_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian11_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian11_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian12_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian12_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian13_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian13_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian14_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian14_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian15_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian15_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian16_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian16_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian17_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian17_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian18_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian18_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian19_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian19_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian1_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian1_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian2_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian2_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian3_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian3_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian4_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian4_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian5_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian5_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian6_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian6_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian7_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian7_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian8_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian8_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian9_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian9_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "provider",
                    "type": {
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        },
                        {
                          "name": "evm_chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Provider"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_provider_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::verify_vaa_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::verify_vaa_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::verify_vaa_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 64,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::verify_vaa_unconstrained_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "103": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n    size_in_fields,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n"
    },
    "104": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "107": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "109": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ, _) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "110": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "112": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "113": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "114": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "115": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "116": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "117": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "118": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "119": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "135": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "148": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "151": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "155": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "156": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "157": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "158": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "159": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "165": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "166": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "168": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "173": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "177": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "186": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "200": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "203": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "204": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "206": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "207": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "209": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "211": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "223": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "241": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "284": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "301": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "302": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "316": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "318": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "319": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "329": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] != 0,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] != 0,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] != 0,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] != 0,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "340": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "354": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "359": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as u8 as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as u16 as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as u32 as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as u64 as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "360": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "378": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "381": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "391": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "393": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr",
      "source": "mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n"
    },
    "415": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        array_concat(note_completion_log, padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "/Users/stavrosvlachakis/AztecProjects/nethermindEth/wormhole/aztec/contracts/src/main.nr",
      "source": "use dep::aztec::macros::aztec;\nmod structs;\n\n/**\nTo deploy on testnet, use the following commands (following the tutorial):\n1. Set the environment variable for the node URL:\nexport NODE_URL=https://aztec-alpha-testnet-fullnode.zkv.xyz\nexport SPONSORED_FPC_ADDRESS=0x1260a43ecf03e985727affbbe3e483e60b836ea821b6305bea1c53398b986047\n2. Create a new wallets:\n2a. Create a new wallet for the owner:\naztec-wallet create-account \\\n    --register-only \\\n    --node-url $NODE_URL \\\n    --alias owner-wallet\n2b. Create a new wallet for the receiver:\naztec-wallet create-account \\\n    --register-only \\\n    --node-url $NODE_URL \\\n    --alias receiver-wallet\n3. Register owner account with FPC:\n3a. Register the owner wallet with the FPC:\naztec-wallet register-contract \\\n    --node-url $NODE_URL \\\n    --from owner-wallet \\\n    --alias sponsoredfpc \\\n    $SPONSORED_FPC_ADDRESS SponsoredFPC \\\n    --salt 0\n3b. Register the receiver wallet with the FPC:\naztec-wallet register-contract \\\n    --node-url $NODE_URL \\\n    --from receiver-wallet \\\n    --alias sponsoredfpc \\\n    $SPONSORED_FPC_ADDRESS SponsoredFPC \\\n    --salt 0\n4. Deploy accounts (may get error `Timeout awaiting isMined` but that is fine continue with the next step):\n4a. Deploy the owner wallet:\naztec-wallet deploy-account \\\n    --node-url $NODE_URL \\\n    --from owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --register-class\n4b. Deploy the receiver wallet:\naztec-wallet deploy-account \\\n    --node-url $NODE_URL \\\n    --from receiver-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --register-class\n5. Deploy the Token contract (wait for it to be mined on testnet check txhash at http://aztecscan.xyz/):\naztec-wallet deploy \\\n    --node-url $NODE_URL \\\n    --from accounts:owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --alias token \\\n    TokenContract \\\n    --args accounts:owner-wallet WormToken WORM 18 --no-wait\n6. Mint tokens to public & private now to call the upcoming functions:\n6a. Mint public tokens:\n7. Deploy the Wormhole contract (wait for it to be mined on testnet check txhash at http://aztecscan.xyz/):\naztec-wallet deploy \\\n    --node-url $NODE_URL \\\n    --from accounts:owner-wallet \\\n    --payment method=fpc-sponsored,fpc=contracts:sponsoredfpc \\\n    --alias wormhole \\\n    Wormhole \\\n    --args 13 13 *receiver address* *token contract address* --no-wait\n*/\n\n#[aztec]\npub contract Wormhole {\n    use crate::structs::{Provider, Guardian, WormholeStorage, Signature};\n    use dep::keccak256::keccak256;\n\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, public, private, internal, utility},\n            storage::storage,\n        },\n        prelude::{Map, PublicMutable, AztecAddress},\n        protocol_types::traits::ToField\n    };\n\n    use dep::token::Token; \n\n    // Replace your get_hardcoded_guardians() function with all 19 correct guardians:\n    #[utility]\n    unconstrained fn get_hardcoded_guardians() -> [crate::structs::Guardian; 19] {\n        [\n            // Guardian 0: 0xbeFA429d57cD18b7F8A4d91A2da9AB4AF05d0FBe\n            crate::structs::Guardian::new(\n                [0xbe, 0xfa, 0x42, 0x9d, 0x57, 0xcd, 0x18, 0xb7, 0xf8, 0xa4, 0xd9, 0x1a, 0x2d, 0xa9, 0xab, 0x4a, 0xf0, 0x5d, 0x0f, 0xbe],\n                [0xd4, 0xa4, 0x62, 0x99, 0x79, 0xf0, 0xc9, 0xfa, 0x0f, 0x0b, 0xb5, 0x4e, 0xdf, 0x33, 0xf8, 0x7c, 0x8c, 0x5a, 0x1f, 0x42, 0xc0, 0x35, 0x0a, 0x30, 0xd6, 0x8f, 0x7e, 0x96, 0x70, 0x23, 0xe3, 0x4e],\n                [0x49, 0x5a, 0x8e, 0xbf, 0x51, 0x01, 0x03, 0x6d, 0x0f, 0xd6, 0x6e, 0x3b, 0x0a, 0x8c, 0x7c, 0x61, 0xb6, 0x5f, 0xce, 0xea, 0xf4, 0x87, 0xab, 0x3c, 0xd1, 0xb5, 0xb7, 0xb5, 0x0b, 0xeb, 0x79, 0x70]\n            ),\n            // Guardian 1: 0x88D7D8B32a9105d228100E72dFFe2Fae0705D31c\n            crate::structs::Guardian::new(\n                [0x88, 0xd7, 0xd8, 0xb3, 0x2a, 0x91, 0x05, 0xd2, 0x28, 0x10, 0x0e, 0x72, 0xdf, 0xfe, 0x2f, 0xae, 0x07, 0x05, 0xd3, 0x1c],\n                [0xde, 0x95, 0x44, 0xa0, 0x79, 0x98, 0x8d, 0xf1, 0x0b, 0x0c, 0x84, 0x7a, 0x40, 0x18, 0x62, 0xb6, 0x2d, 0x80, 0x74, 0xb0, 0x2b, 0x99, 0x4e, 0xd5, 0xa4, 0xf9, 0x6e, 0x60, 0x78, 0xee, 0x04, 0x8b],\n                [0xd5, 0xfd, 0x0b, 0x55, 0xe7, 0x53, 0x45, 0xd6, 0x05, 0x11, 0xe8, 0xd8, 0x22, 0xf8, 0xb6, 0x18, 0xc5, 0xe8, 0xe1, 0xfa, 0x7a, 0x9d, 0xb8, 0x41, 0x01, 0x4a, 0x8a, 0x09, 0x1f, 0x7c, 0x41, 0x19]\n            ),\n            // Guardian 2: 0x58076F561CC62A47087B567C86f986426dFCD000\n            crate::structs::Guardian::new(\n                [0x58, 0x07, 0x6f, 0x56, 0x1c, 0xc6, 0x2a, 0x47, 0x08, 0x7b, 0x56, 0x7c, 0x86, 0xf9, 0x86, 0x42, 0x6d, 0xfc, 0xd0, 0x00],\n                [0xd0, 0xdd, 0xfb, 0x81, 0xee, 0xd4, 0xd5, 0xcc, 0xbb, 0x87, 0x92, 0x85, 0xc9, 0xe5, 0x26, 0x41, 0xca, 0x72, 0xcc, 0x9e, 0x89, 0xe0, 0x9b, 0x42, 0x36, 0xa1, 0x53, 0x0a, 0xbc, 0xe2, 0xd7, 0x3c],\n                [0xfc, 0xc7, 0x2a, 0x3d, 0x05, 0xef, 0xae, 0xc4, 0x00, 0xe7, 0xec, 0xa3, 0xdc, 0xb2, 0xbb, 0x6d, 0xdf, 0x5e, 0x1f, 0x79, 0x8f, 0x8c, 0x3f, 0xa3, 0xde, 0x97, 0xfd, 0x71, 0xd4, 0xe3, 0x3a, 0xa0]\n            ),\n            // Guardian 3: 0xBd6e9833490F8fA87c733A183CD076a6cBD29074\n            crate::structs::Guardian::new(\n                [0xbd, 0x6e, 0x98, 0x33, 0x49, 0x0f, 0x8f, 0xa8, 0x7c, 0x73, 0x3a, 0x18, 0x3c, 0xd0, 0x76, 0xa6, 0xcb, 0xd2, 0x90, 0x74],\n                [0x12, 0x08, 0x13, 0x27, 0xa0, 0x56, 0x66, 0xbb, 0x31, 0x51, 0x0a, 0x69, 0x30, 0xb0, 0x5d, 0x9b, 0x10, 0x3d, 0xc3, 0x6f, 0x47, 0xbc, 0x5b, 0xbd, 0x85, 0x81, 0x62, 0xe0, 0xbd, 0xfd, 0xfc, 0x7f],\n                [0xe9, 0x44, 0xd4, 0x06, 0xd1, 0x73, 0xa5, 0x4d, 0x57, 0x36, 0x6a, 0xae, 0x6a, 0x0c, 0xb8, 0x05, 0xea, 0x59, 0x42, 0xb7, 0x14, 0xf6, 0x4b, 0xfc, 0x05, 0x7a, 0xca, 0x35, 0xb6, 0x26, 0x59, 0x67]\n            ),\n            // Guardian 4: 0xb853FCF0a5C78C1b56D15fCE7a154e6ebe9ED7a2\n            crate::structs::Guardian::new(\n                [0xb8, 0x53, 0xfc, 0xf0, 0xa5, 0xc7, 0x8c, 0x1b, 0x56, 0xd1, 0x5f, 0xce, 0x7a, 0x15, 0x4e, 0x6e, 0xbe, 0x9e, 0xd7, 0xa2],\n                [0x3a, 0xb8, 0x10, 0x4c, 0x4b, 0xa4, 0xb5, 0xed, 0xd1, 0x83, 0xa8, 0x09, 0x83, 0x1b, 0x1e, 0xad, 0x4f, 0x54, 0x0a, 0xb6, 0x23, 0x28, 0x10, 0x12, 0x92, 0x8b, 0xc7, 0xb2, 0x6c, 0xd1, 0xd3, 0x43],\n                [0xe0, 0xe2, 0x81, 0x85, 0x53, 0x16, 0xbd, 0x89, 0x9f, 0x1e, 0x47, 0xa2, 0xd6, 0x3a, 0x58, 0x78, 0xac, 0x6c, 0xbb, 0xe5, 0x3a, 0x57, 0xb0, 0x3a, 0xd6, 0x64, 0xf0, 0xf1, 0xa7, 0xb7, 0xb6, 0x00]\n            ),\n            // Guardian 5: 0xAF3503dBD2E37518ab04D7CE78b630F98b15b78a\n            crate::structs::Guardian::new(\n                [0xaf, 0x35, 0x03, 0xdb, 0xd2, 0xe3, 0x75, 0x18, 0xab, 0x04, 0xd7, 0xce, 0x78, 0xb6, 0x30, 0xf9, 0x8b, 0x15, 0xb7, 0x8a],\n                [0x47, 0x54, 0x1e, 0x77, 0xc1, 0xff, 0xbd, 0x34, 0xed, 0x66, 0x6a, 0x2d, 0x86, 0xaa, 0x84, 0xc3, 0x72, 0xd5, 0x4c, 0x3e, 0x61, 0x1b, 0xa2, 0xbc, 0xcb, 0xcf, 0xad, 0xb5, 0xfa, 0xac, 0x5c, 0x16],\n                [0x39, 0x5b, 0x75, 0xee, 0x6a, 0x49, 0xf9, 0xdd, 0x5a, 0x4d, 0xc2, 0xd2, 0xfd, 0xc2, 0x8e, 0x4f, 0xa7, 0x4e, 0x38, 0x8e, 0x85, 0xa6, 0x89, 0x78, 0x58, 0xff, 0x28, 0x64, 0x4b, 0x9d, 0x87, 0x84]\n            ),\n            // Guardian 6: 0x785632deA5609064803B1c8EA8bB2c77a6004Bd1\n            crate::structs::Guardian::new(\n                [0x78, 0x56, 0x32, 0xde, 0xa5, 0x60, 0x90, 0x64, 0x80, 0x3b, 0x1c, 0x8e, 0xa8, 0xbb, 0x2c, 0x77, 0xa6, 0x00, 0x4b, 0xd1],\n                [0xba, 0xc0, 0x4f, 0x86, 0x0a, 0x22, 0x87, 0x40, 0x2a, 0x36, 0xda, 0xa7, 0x1e, 0xee, 0xeb, 0x46, 0x18, 0x87, 0x66, 0xf2, 0x46, 0x3a, 0x56, 0xc6, 0x84, 0x17, 0x1b, 0xd5, 0xed, 0xfb, 0xd7, 0xba],\n                [0x3d, 0xea, 0xac, 0x57, 0x4e, 0xc0, 0x93, 0x98, 0x27, 0x86, 0x0b, 0x03, 0x1d, 0x97, 0x47, 0xd2, 0x16, 0x3c, 0xa5, 0x34, 0xa0, 0x3e, 0x84, 0x0d, 0x4c, 0xe9, 0xa4, 0xd0, 0x65, 0xff, 0x9a, 0xa6]\n            ),\n            // Guardian 7: 0x09a281a698C0F5BA31f158585B41F4f33659e54D\n            crate::structs::Guardian::new(\n                [0x09, 0xa2, 0x81, 0xa6, 0x98, 0xc0, 0xf5, 0xba, 0x31, 0xf1, 0x58, 0x58, 0x5b, 0x41, 0xf4, 0xf3, 0x36, 0x59, 0xe5, 0x4d],\n                [0xfa, 0x0c, 0x20, 0x46, 0x33, 0x38, 0x6e, 0x43, 0x67, 0xd1, 0x0b, 0xda, 0x6a, 0x2a, 0xcd, 0x83, 0x24, 0x31, 0xc1, 0x2c, 0x7c, 0x90, 0x0a, 0xfc, 0x17, 0x45, 0xed, 0x3c, 0x75, 0x48, 0x65, 0xd3],\n                [0x7b, 0xfe, 0xaf, 0xc6, 0x07, 0xda, 0x4b, 0x79, 0xd2, 0x0e, 0xb7, 0xb0, 0xce, 0x14, 0x9e, 0xf0, 0x95, 0x99, 0x63, 0x0c, 0x11, 0x9f, 0x8c, 0xee, 0xba, 0x27, 0x23, 0x93, 0x76, 0xcd, 0xb4, 0x50]\n            ),\n            // Guardian 8: 0x3178443AB76a60E21690DBfB17f7F59F09Ae3Ea1\n            crate::structs::Guardian::new(\n                [0x31, 0x78, 0x44, 0x3a, 0xb7, 0x6a, 0x60, 0xe2, 0x16, 0x90, 0xdb, 0xfb, 0x17, 0xf7, 0xf5, 0x9f, 0x09, 0xae, 0x3e, 0xa1],\n                [0x30, 0xb8, 0x67, 0xbd, 0xd0, 0xaf, 0x1b, 0xa2, 0x7e, 0xc3, 0x90, 0xa8, 0x5f, 0x4b, 0xce, 0x0b, 0x05, 0xfa, 0xea, 0xe6, 0x0f, 0x60, 0xae, 0x93, 0x69, 0x28, 0x16, 0x69, 0x5e, 0x5b, 0x3e, 0x33],\n                [0xa6, 0x63, 0x7e, 0x6f, 0x90, 0xba, 0xde, 0x3f, 0xc7, 0x17, 0xe1, 0x85, 0x4f, 0x99, 0x18, 0x18, 0x28, 0xf2, 0x57, 0x98, 0xd8, 0x41, 0xc4, 0xf7, 0x8e, 0xdf, 0x67, 0x62, 0xa8, 0x91, 0xf1, 0x10]\n            ),\n            // Guardian 9: 0x647ec26ae49b14060660504f4DA1c2059E1C5Ab6\n            crate::structs::Guardian::new(\n                [0x64, 0x7e, 0xc2, 0x6a, 0xe4, 0x9b, 0x14, 0x06, 0x06, 0x60, 0x50, 0x4f, 0x4d, 0xa1, 0xc2, 0x05, 0x9e, 0x1c, 0x5a, 0xb6],\n                [0x83, 0xe2, 0x58, 0xec, 0xc3, 0xf9, 0xde, 0xb6, 0x89, 0x10, 0x0c, 0x83, 0x1d, 0x4d, 0xe3, 0xe7, 0x21, 0x9d, 0x6e, 0x72, 0x46, 0x6c, 0x68, 0x21, 0x48, 0xcb, 0x58, 0xf9, 0x34, 0x3b, 0x4b, 0xbd],\n                [0x81, 0xe1, 0x1d, 0x1f, 0x33, 0xd3, 0xd4, 0xdc, 0xa0, 0x40, 0x45, 0xa5, 0x0c, 0x07, 0x1f, 0xc5, 0xbe, 0xb3, 0xf9, 0x76, 0x2f, 0xce, 0x79, 0x26, 0x0e, 0xdd, 0x75, 0x90, 0xbd, 0xdf, 0x8b, 0x7b]\n            ),\n            // Guardian 10: 0x810AC3D8E1258Bd2F004a94Ca0cd4c68Fc1C0611\n            crate::structs::Guardian::new(\n                [0x81, 0x0a, 0xc3, 0xd8, 0xe1, 0x25, 0x8b, 0xd2, 0xf0, 0x04, 0xa9, 0x4c, 0xa0, 0xcd, 0x4c, 0x68, 0xfc, 0x1c, 0x06, 0x11],\n                [0xe7, 0xe3, 0x2b, 0xe9, 0xaf, 0x97, 0x7a, 0xd0, 0x8a, 0xa3, 0x7a, 0x1f, 0xab, 0x32, 0xca, 0x4b, 0x66, 0x89, 0x08, 0x16, 0xa9, 0x48, 0x39, 0x7e, 0x54, 0xa6, 0x3c, 0xcf, 0xa5, 0xd6, 0xd9, 0x2e],\n                [0x00, 0x30, 0xc2, 0x87, 0x44, 0x01, 0xc8, 0x58, 0xc1, 0x71, 0x03, 0x73, 0x24, 0x6c, 0xa4, 0xe3, 0x9b, 0x8f, 0x59, 0xd3, 0x42, 0x27, 0x8e, 0x43, 0x42, 0x32, 0x1d, 0x5e, 0xb3, 0x67, 0xc5, 0x48]\n            ),\n            // Guardian 11: 0x80610e96d645b12f47ae5cf4546b18538739e90F\n            crate::structs::Guardian::new(\n                [0x80, 0x61, 0x0e, 0x96, 0xd6, 0x45, 0xb1, 0x2f, 0x47, 0xae, 0x5c, 0xf4, 0x54, 0x6b, 0x18, 0x53, 0x87, 0x39, 0xe9, 0x0f],\n                [0x45, 0x6d, 0xfd, 0x9d, 0x19, 0xcc, 0x9d, 0x7d, 0x64, 0x9d, 0x7a, 0x2d, 0xa1, 0x19, 0x31, 0x47, 0x15, 0x07, 0xd5, 0x6d, 0x95, 0xd0, 0x0b, 0x35, 0x1e, 0x9e, 0x5b, 0x5c, 0x52, 0x19, 0x29, 0xd1],\n                [0x94, 0x47, 0xf0, 0xc5, 0x01, 0x77, 0x6d, 0x34, 0xbf, 0x25, 0x35, 0xa1, 0xe2, 0xb1, 0x70, 0x58, 0xb4, 0xa0, 0x16, 0xb7, 0x24, 0x37, 0x2d, 0xc4, 0xcc, 0x87, 0xa7, 0x06, 0x13, 0x99, 0xd0, 0x6f]\n            ),\n            // Guardian 12: 0x2edb0D8530E31A218E72B9480202AcBaeB06178d\n            crate::structs::Guardian::new(\n                [0x2e, 0xdb, 0x0d, 0x85, 0x30, 0xe3, 0x1a, 0x21, 0x8e, 0x72, 0xb9, 0x48, 0x02, 0x02, 0xac, 0xba, 0xeb, 0x06, 0x17, 0x8d],\n                [0xac, 0x8e, 0x60, 0xae, 0xda, 0x22, 0xb4, 0x70, 0xf6, 0x25, 0x50, 0x62, 0xff, 0x7e, 0x29, 0xfc, 0x74, 0xc2, 0x62, 0x90, 0xa7, 0x1a, 0xd6, 0xf5, 0xb6, 0xc3, 0xc5, 0xcb, 0xa2, 0x8a, 0x73, 0x4b],\n                [0xce, 0x67, 0x33, 0x23, 0x2a, 0xeb, 0xa9, 0x31, 0xe5, 0x67, 0xb1, 0x67, 0xe5, 0x9e, 0x8b, 0x07, 0x42, 0xee, 0x16, 0x0a, 0x5e, 0xfc, 0x21, 0x2a, 0x9e, 0x66, 0xf1, 0x90, 0x1c, 0x16, 0xb3, 0x3b]\n            ),\n            // Guardian 13: 0xa78858e5e5c4705CdD4B668FFe3Be5bae4867c9D\n            crate::structs::Guardian::new(\n                [0xa7, 0x88, 0x58, 0xe5, 0xe5, 0xc4, 0x70, 0x5c, 0xdd, 0x4b, 0x66, 0x8f, 0xfe, 0x3b, 0xe5, 0xba, 0xe4, 0x86, 0x7c, 0x9d],\n                [0xb8, 0x82, 0xd0, 0xbf, 0xac, 0xa1, 0x0c, 0x6e, 0x37, 0x85, 0xc1, 0xf5, 0xe9, 0x47, 0x3f, 0xf8, 0x3c, 0x35, 0x2c, 0xbf, 0x9c, 0xa6, 0x1d, 0x0d, 0x44, 0x61, 0x3c, 0x24, 0xb8, 0x61, 0x3e, 0x01],\n                [0x92, 0x1f, 0x32, 0x02, 0x14, 0x86, 0x47, 0x07, 0x18, 0x17, 0xac, 0x85, 0xcb, 0x84, 0x13, 0xc5, 0x57, 0x63, 0xd3, 0x4d, 0xf5, 0xc9, 0xfd, 0x66, 0x1b, 0xc6, 0x90, 0xcf, 0x59, 0x21, 0xff, 0x16]\n            ),\n            // Guardian 14: 0x5Efe3A05Efc62D60e1D19fAeB56A80223CDd3472\n            crate::structs::Guardian::new(\n                [0x5e, 0xfe, 0x3a, 0x05, 0xef, 0xc6, 0x2d, 0x60, 0xe1, 0xd1, 0x9f, 0xae, 0xb5, 0x6a, 0x80, 0x22, 0x3c, 0xdd, 0x34, 0x72],\n                [0x9a, 0xf4, 0x5b, 0x27, 0x0b, 0x79, 0xfe, 0xf7, 0xad, 0x1f, 0x97, 0xce, 0xfa, 0x09, 0xa3, 0x49, 0x22, 0x95, 0x48, 0x4c, 0x99, 0x0c, 0x3a, 0x07, 0x12, 0xcf, 0x6e, 0xe4, 0x7f, 0xe2, 0x88, 0x72],\n                [0x87, 0x1f, 0x97, 0x13, 0x5e, 0x1e, 0xf3, 0x2a, 0xc9, 0xff, 0x2d, 0x6f, 0x4e, 0x15, 0xd0, 0x9c, 0xb2, 0x73, 0x68, 0x8a, 0x4b, 0x8c, 0xe6, 0xf8, 0x3d, 0xe1, 0x9c, 0xb8, 0xe9, 0x6d, 0xe9, 0x50]\n            ),\n            // Guardian 15: 0xD791b7D32C05aBB1cc00b6381FA0c4928f0c56fC\n            crate::structs::Guardian::new(\n                [0xd7, 0x91, 0xb7, 0xd3, 0x2c, 0x05, 0xab, 0xb1, 0xcc, 0x00, 0xb6, 0x38, 0x1f, 0xa0, 0xc4, 0x92, 0x8f, 0x0c, 0x56, 0xfc],\n                [0x0e, 0x49, 0xf3, 0xcc, 0x63, 0x85, 0x69, 0x20, 0xb9, 0xaa, 0xf9, 0x26, 0x14, 0x2c, 0x72, 0x1d, 0x2d, 0xad, 0x2a, 0x32, 0xe7, 0xe5, 0x1d, 0xf6, 0x20, 0xcf, 0x2d, 0x37, 0x9c, 0xd6, 0x2a, 0xb3],\n                [0x73, 0x8e, 0x28, 0xf3, 0x16, 0x35, 0xcc, 0x75, 0xc6, 0xfb, 0xd1, 0x43, 0xc1, 0x0b, 0x98, 0xad, 0xc8, 0x14, 0xc6, 0x31, 0x9b, 0x81, 0xf5, 0x7c, 0x47, 0xa5, 0x55, 0xb2, 0x85, 0x76, 0x62, 0x03]\n            ),\n            // Guardian 16: 0x14Bc029B8809069093D712A3fd4DfAb31963597e\n            crate::structs::Guardian::new(\n                [0x14, 0xbc, 0x02, 0x9b, 0x88, 0x09, 0x06, 0x90, 0x93, 0xd7, 0x12, 0xa3, 0xfd, 0x4d, 0xfa, 0xb3, 0x19, 0x63, 0x59, 0x7e],\n                [0xb2, 0x17, 0x04, 0xa6, 0xa0, 0x7d, 0xa3, 0x57, 0xc9, 0xd2, 0x37, 0x68, 0xb8, 0x89, 0xbb, 0x57, 0xa6, 0xd2, 0x20, 0xad, 0x70, 0x61, 0x5c, 0xd8, 0xb7, 0xee, 0x82, 0x3c, 0x84, 0xd7, 0x72, 0x62],\n                [0xeb, 0x49, 0x46, 0xcb, 0xfe, 0x2e, 0x73, 0xb9, 0x65, 0xe0, 0x59, 0x19, 0xa2, 0x70, 0x5d, 0xbe, 0xa9, 0xfd, 0xf2, 0xe1, 0xbe, 0xde, 0x0b, 0xb0, 0x73, 0xfd, 0x52, 0x1f, 0xa3, 0x85, 0xcb, 0xef]\n            ),\n            // Guardian 17: 0x246Ab29FC6EBeDf2D392a51ab2Dc5C59d0902A03\n            crate::structs::Guardian::new(\n                [0x24, 0x6a, 0xb2, 0x9f, 0xc6, 0xeb, 0xed, 0xf2, 0xd3, 0x92, 0xa5, 0x1a, 0xb2, 0xdc, 0x5c, 0x59, 0xd0, 0x90, 0x2a, 0x03],\n                [0x53, 0xcd, 0x43, 0x54, 0xfd, 0x30, 0x6a, 0xe2, 0x1b, 0x46, 0x99, 0xdb, 0x7e, 0xeb, 0xc7, 0x4c, 0xd8, 0x5f, 0x71, 0x3a, 0x6e, 0x9a, 0x6a, 0x86, 0x14, 0xea, 0xfe, 0x61, 0x7f, 0x3b, 0x66, 0xf6],\n                [0xa8, 0xa6, 0xb3, 0x5c, 0x35, 0xc1, 0x02, 0xe0, 0x9b, 0xcd, 0xb5, 0x19, 0xc1, 0xea, 0x9f, 0xfc, 0x9f, 0x47, 0xb7, 0xd5, 0x9b, 0x2b, 0x04, 0xfb, 0x55, 0xa1, 0x90, 0xbf, 0xa5, 0x6e, 0xc2, 0x08]\n            ),\n            // Guardian 18: 0x132A84dFD920b35a3D0BA5f7A0635dF298F9033e\n            crate::structs::Guardian::new(\n                [0x13, 0x2a, 0x84, 0xdf, 0xd9, 0x20, 0xb3, 0x5a, 0x3d, 0x0b, 0xa5, 0xf7, 0xa0, 0x63, 0x5d, 0xf2, 0x98, 0xf9, 0x03, 0x3e],\n                [0xad, 0x7a, 0x5a, 0xca, 0x2a, 0xa2, 0x23, 0x5c, 0xc4, 0x3e, 0x3b, 0x4f, 0x0c, 0xe6, 0x0d, 0x83, 0xc6, 0xb1, 0x7b, 0x9b, 0xbe, 0x16, 0xbd, 0xb4, 0x2b, 0xac, 0x9a, 0xad, 0x1b, 0xbb, 0x85, 0xe1],\n                [0x9f, 0xb5, 0x12, 0x3c, 0x61, 0x02, 0xe6, 0xa0, 0xab, 0x1b, 0x64, 0x8a, 0x1d, 0xef, 0x10, 0xf4, 0x6a, 0xe3, 0x79, 0x58, 0x8a, 0x36, 0xea, 0xa4, 0x56, 0x1e, 0xed, 0x6d, 0xf0, 0xa5, 0x8c, 0xe0]\n            )\n        ]\n    }\n\n    #[utility]\n    unconstrained fn get_guardian_by_index_unconstrained(guardian_idx: u8, guardians: [crate::structs::Guardian; 19]) -> crate::structs::Guardian {\n        if guardian_idx < 19 {\n            guardians[guardian_idx as u32]\n        } else {\n            crate::structs::Guardian::default()\n        }\n    }\n\n    #[utility]\n    unconstrained fn parse_vaa_unconstrained(bytes: [u8; 2000], actual_length: u32) -> (u32, u8, [[u8; 66]; 13], [u8; 1860], u32) {\n        let guardian_set_index: u32 = (bytes[1] as u32) << 24 | \n                                    (bytes[2] as u32) << 16 | \n                                    (bytes[3] as u32) << 8 | \n                                    (bytes[4] as u32);\n        \n        let signatures_len = bytes[5];\n        \n        // Parse signatures\n        let mut signatures = [[0; 66]; 13];\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig_start: u32 = 6 + (i as u32 * 66);\n                for j in 0..66 {\n                    let byte_index: u32 = sig_start + j as u32;\n                    if byte_index < actual_length {\n                        signatures[i as u32][j] = bytes[byte_index];\n                    }\n                }\n            }\n        }\n\n        // Calculate where the body starts\n        let body_start: u32 = 6 + (signatures_len as u32 * 66);\n        \n        // Calculate actual body length\n        let body_length: u32 = actual_length - body_start;\n        \n        let mut body_bytes = [0; 1860];\n        for i in 0..1860 {\n            if i < body_length {\n                body_bytes[i] = bytes[body_start + i];\n            }\n        }\n\n        (guardian_set_index, signatures_len, signatures, body_bytes, body_length)\n    }\n\n    #[utility]\n    unconstrained fn compute_vaa_hash_unconstrained(body_bytes: [u8; 1860], body_length: u32) -> [u8; 32] {\n        // Extract only the actual body content\n        let mut actual_body = [0; 1860];\n        for i in 0..body_length {\n            actual_body[i] = body_bytes[i];\n        }\n        \n        // Double hash as per Wormhole spec\n        let hash: [u8; 32] = keccak256(actual_body, body_length);\n        let double_hash: [u8; 32] = keccak256(hash, 32);\n        \n        double_hash\n    }\n\n\n    #[storage]\n    struct Storage<Context> {\n        state: PublicMutable<WormholeStorage, Context>,\n        sequences: Map<AztecAddress, PublicMutable<u64, Context>, Context>,\n        wormhole_address: PublicMutable<AztecAddress, Context>,\n        token_address: PublicMutable<AztecAddress, Context>,\n        guardian_1: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_2: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_3: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_4: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_5: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_6: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_7: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_8: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_9: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_10: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_11: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_12: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_13: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_14: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_15: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_16: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_17: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_18: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_19: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        current_guardian_set_index: Map<u32, PublicMutable<u64, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn init(\n        chain_id: u16,\n        evm_chain_id: u16,\n        wormhole_address: AztecAddress, \n        token_address: AztecAddress, \n    ) {\n        let provider: Provider = Provider {\n            chain_id,\n            evm_chain_id,\n        };\n        storage.state.write(WormholeStorage::init(provider));\n        storage.wormhole_address.write(wormhole_address);\n        storage.token_address.write(token_address);\n        storage.current_guardian_set_index.at(0).write(18_446_744_073_709_551_615);\n    }\n\n    #[public]\n    fn publish_message_in_public(\n        nonce: u64,\n        payloads: [[u8; 31]; 8], \n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress,\n        token_nonce: Field,\n    ) -> u64 {\n        assert(storage.state.read().message_fee <= message_fee, \"insufficient fee\");\n\n        let receiver_address = storage.wormhole_address.read();\n        let token_address = storage.token_address.read();\n\n        let _ = Token::at(token_address).transfer_in_public(\n            from,\n            receiver_address, \n            message_fee,\n            token_nonce,  \n        ).call(&mut context);\n\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(), \n            sequence as Field,  \n            nonce as Field,\n            consistency as Field, \n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    #[private]\n    fn publish_message_in_private(\n        nonce: u64,\n        payloads: [[u8; 31]; 8], \n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress, \n        token_nonce: Field,\n    ) {\n        assert(1 <= message_fee, \"insufficient fee\");\n\n        let receiver_address = AztecAddress {\n            inner: 0x1f41267c06dae96c9c3906c5f77cbc28602cc70d6d7e9d2c3072cb0a5b13edd2\n        };\n        let token_address = AztecAddress {\n            inner: 0x290769b8eedc8c5671f6eb95b00d172421ce755088e05b48158416797f6b07e3\n        };\n\n        let _ = Token::at(token_address).transfer_in_private(\n            from,\n            receiver_address, \n            message_fee,\n            token_nonce,  \n        ).call(&mut context);\n\n        Wormhole::at(context.this_address())._publish_message(\n            nonce, \n            payloads, \n            consistency\n        ).enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _publish_message(\n        nonce: u64,\n        payloads: [[u8; 31]; 8], \n        consistency: u8,\n    ) -> u64 {\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(), \n            sequence as Field,  \n            nonce as Field,\n            consistency as Field, \n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    // Keep all your guardian setters exactly as they are\n    #[public]\n    fn set_guardian1(guardian: Guardian, index: u32) { \n        storage.guardian_1.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian2(guardian: Guardian, index: u32) { \n        storage.guardian_2.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian3(guardian: Guardian, index: u32) { \n        storage.guardian_3.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian4(guardian: Guardian, index: u32) { \n        storage.guardian_4.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian5(guardian: Guardian, index: u32) { \n        storage.guardian_5.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian6(guardian: Guardian, index: u32) { \n        storage.guardian_6.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian7(guardian: Guardian, index: u32) { \n        storage.guardian_7.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian8(guardian: Guardian, index: u32) { \n        storage.guardian_8.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian9(guardian: Guardian, index: u32) { \n        storage.guardian_9.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian10(guardian: Guardian, index: u32) { \n        storage.guardian_10.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian11(guardian: Guardian, index: u32) { \n        storage.guardian_11.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian12(guardian: Guardian, index: u32) { \n        storage.guardian_12.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian13(guardian: Guardian, index: u32) { \n        storage.guardian_13.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian14(guardian: Guardian, index: u32) { \n        storage.guardian_14.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian15(guardian: Guardian, index: u32) { \n        storage.guardian_15.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian16(guardian: Guardian, index: u32) { \n        storage.guardian_16.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian17(guardian: Guardian, index: u32) { \n        storage.guardian_17.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian18(guardian: Guardian, index: u32) { \n        storage.guardian_18.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian19(guardian: Guardian, index: u32) { \n        storage.guardian_19.at(index).write(guardian);\n    }\n\n    #[public]\n    fn expire_guardian_set(index: u32) {\n        storage.current_guardian_set_index.at(index).write(context.timestamp() + 86400);\n    }\n\n    #[public]\n    fn guardian_set_expired(index: u32) -> bool {\n        let timestamp = storage.current_guardian_set_index.at(index).read();\n        context.timestamp() > timestamp\n    }\n\n    #[public]\n    fn set_provider(provider: Provider) {\n        let updated_storage = WormholeStorage::set_provider(storage.state.read(), provider);\n        storage.state.write(updated_storage);\n    }\n\n    #[public]\n    fn get_provider() -> Provider {\n        WormholeStorage::get_provider(storage.state.read())\n    }\n\n    #[utility]\n    unconstrained fn verify_vaa_unconstrained(bytes: [u8; 2000], actual_length: u32) -> ([[u8; 32]; 13], [[u8; 32]; 13], [[u8; 64]; 13], [u8; 32], u8) {\n        let version = bytes[0];\n        assert(version == 1, \"VM version incompatible\");\n        \n        let (_, signatures_len, signatures, body_bytes, body_length) = parse_vaa_unconstrained(bytes, actual_length);\n\n        assert(signatures_len >= 1, \"Need at least 1 signature\");\n        assert(signatures_len <= 13, \"Too many signatures\");\n\n        // Compute the VAA hash\n        let hash = compute_vaa_hash_unconstrained(body_bytes, body_length);\n        \n        // Safety: get_hardcoded_guardians() doesn't need proving mode\n        let guardians = get_hardcoded_guardians();\n\n        // Prepare arrays for constrained verification\n        let mut pub_keys_x = [[0; 32]; 13];\n        let mut pub_keys_y = [[0; 32]; 13];\n        let mut signature_bytes_array = [[0; 64]; 13];\n\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig = Signature::from_bytes(signatures[i as u32]);\n                let guardian_idx = sig.guardian_index;\n\n                assert(guardian_idx < 19, \"guardian index out of bounds\");\n\n                // Safety: get_guardian_by_index_unconstrained() doesn't need proving mode\n                let guardian = get_guardian_by_index_unconstrained(guardian_idx, guardians);\n\n                // Get public key components as byte arrays\n                let pub_key_x = guardian.get_pub_key_x();\n                let pub_key_y = guardian.get_pub_key_y();\n\n                pub_keys_x[i as u32] = pub_key_x;\n                pub_keys_y[i as u32] = pub_key_y;\n\n                // Prepare signature bytes\n                let mut signature_bytes = [0; 64];\n                for j in 0..32 {\n                    signature_bytes[j] = sig.r[j];\n                    signature_bytes[32 + j] = sig.s[j];\n                }\n                signature_bytes_array[i as u32] = signature_bytes;\n            }\n        }\n\n        (pub_keys_x, pub_keys_y, signature_bytes_array, hash, signatures_len)\n    }\n\n    #[private]\n    fn verify_vaa(bytes: [u8; 2000], actual_length: u32) {\n\n        // Safety: verify_vaa_unconstrained performs parsing and validation that doesn't need constraints\n        let (pub_keys_x, pub_keys_y, signature_bytes_array, hash, signatures_len) = unsafe {\n            verify_vaa_unconstrained(bytes, actual_length)\n        };\n\n        // TODO svlachakis Change this for Testnet\n        let required_signatures = 1;\n        let mut verified_count = 0;\n\n        for i in 0..13 {\n            if i < signatures_len {\n                let is_valid = std::ecdsa_secp256k1::verify_signature(\n                    pub_keys_x[i as u32],\n                    pub_keys_y[i as u32],\n                    signature_bytes_array[i as u32],\n                    hash\n                );\n\n                if is_valid {\n                    verified_count += 1;\n                }\n            }\n        }\n\n        assert(verified_count >= required_signatures, \"Insufficient valid signatures\");\n    }\n\n}"
    },
    "51": {
      "path": "/Users/stavrosvlachakis/AztecProjects/nethermindEth/wormhole/aztec/contracts/src/structs.nr",
      "source": "use dep::aztec::{protocol_types::traits::{Deserialize, Packable, Serialize}, prelude::AztecAddress};\nuse std::meta::derive;\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Provider {\n    pub chain_id: u16,\n    pub evm_chain_id: u16,\n}\n\n// Keep your Guardian_PK EXACTLY as is - don't touch it\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian_PK {\n    // Address (20 bytes)\n    pub value0: u8, pub value1: u8, pub value2: u8, pub value3: u8, pub value4: u8,\n    pub value5: u8, pub value6: u8, pub value7: u8, pub value8: u8, pub value9: u8,\n    pub value10: u8, pub value11: u8, pub value12: u8, pub value13: u8, pub value14: u8,\n    pub value15: u8, pub value16: u8, pub value17: u8, pub value18: u8, pub value19: u8,\n    \n    // Public Key X (32 bytes)\n    pub pub_key_x0: u8, pub pub_key_x1: u8, pub pub_key_x2: u8, pub pub_key_x3: u8,\n    pub pub_key_x4: u8, pub pub_key_x5: u8, pub pub_key_x6: u8, pub pub_key_x7: u8,\n    pub pub_key_x8: u8, pub pub_key_x9: u8, pub pub_key_x10: u8, pub pub_key_x11: u8,\n    pub pub_key_x12: u8, pub pub_key_x13: u8, pub pub_key_x14: u8, pub pub_key_x15: u8,\n    pub pub_key_x16: u8, pub pub_key_x17: u8, pub pub_key_x18: u8, pub pub_key_x19: u8,\n    pub pub_key_x20: u8, pub pub_key_x21: u8, pub pub_key_x22: u8, pub pub_key_x23: u8,\n    pub pub_key_x24: u8, pub pub_key_x25: u8, pub pub_key_x26: u8, pub pub_key_x27: u8,\n    pub pub_key_x28: u8, pub pub_key_x29: u8, pub pub_key_x30: u8, pub pub_key_x31: u8,\n    \n    // Public Key Y (32 bytes)\n    pub pub_key_y0: u8, pub pub_key_y1: u8, pub pub_key_y2: u8, pub pub_key_y3: u8,\n    pub pub_key_y4: u8, pub pub_key_y5: u8, pub pub_key_y6: u8, pub pub_key_y7: u8,\n    pub pub_key_y8: u8, pub pub_key_y9: u8, pub pub_key_y10: u8, pub pub_key_y11: u8,\n    pub pub_key_y12: u8, pub pub_key_y13: u8, pub pub_key_y14: u8, pub pub_key_y15: u8,\n    pub pub_key_y16: u8, pub pub_key_y17: u8, pub pub_key_y18: u8, pub pub_key_y19: u8,\n    pub pub_key_y20: u8, pub pub_key_y21: u8, pub pub_key_y22: u8, pub pub_key_y23: u8,\n    pub pub_key_y24: u8, pub pub_key_y25: u8, pub pub_key_y26: u8, pub pub_key_y27: u8,\n    pub pub_key_y28: u8, pub pub_key_y29: u8, pub pub_key_y30: u8, pub pub_key_y31: u8,\n}\n\nimpl Guardian_PK {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian_PK { \n            // Address\n            value0: address[0], value1: address[1], value2: address[2], value3: address[3], value4: address[4],\n            value5: address[5], value6: address[6], value7: address[7], value8: address[8], value9: address[9],\n            value10: address[10], value11: address[11], value12: address[12], value13: address[13], value14: address[14],\n            value15: address[15], value16: address[16], value17: address[17], value18: address[18], value19: address[19],\n            \n            // Public Key X\n            pub_key_x0: pub_key_x[0], pub_key_x1: pub_key_x[1], pub_key_x2: pub_key_x[2], pub_key_x3: pub_key_x[3],\n            pub_key_x4: pub_key_x[4], pub_key_x5: pub_key_x[5], pub_key_x6: pub_key_x[6], pub_key_x7: pub_key_x[7],\n            pub_key_x8: pub_key_x[8], pub_key_x9: pub_key_x[9], pub_key_x10: pub_key_x[10], pub_key_x11: pub_key_x[11],\n            pub_key_x12: pub_key_x[12], pub_key_x13: pub_key_x[13], pub_key_x14: pub_key_x[14], pub_key_x15: pub_key_x[15],\n            pub_key_x16: pub_key_x[16], pub_key_x17: pub_key_x[17], pub_key_x18: pub_key_x[18], pub_key_x19: pub_key_x[19],\n            pub_key_x20: pub_key_x[20], pub_key_x21: pub_key_x[21], pub_key_x22: pub_key_x[22], pub_key_x23: pub_key_x[23],\n            pub_key_x24: pub_key_x[24], pub_key_x25: pub_key_x[25], pub_key_x26: pub_key_x[26], pub_key_x27: pub_key_x[27],\n            pub_key_x28: pub_key_x[28], pub_key_x29: pub_key_x[29], pub_key_x30: pub_key_x[30], pub_key_x31: pub_key_x[31],\n            \n            // Public Key Y\n            pub_key_y0: pub_key_y[0], pub_key_y1: pub_key_y[1], pub_key_y2: pub_key_y[2], pub_key_y3: pub_key_y[3],\n            pub_key_y4: pub_key_y[4], pub_key_y5: pub_key_y[5], pub_key_y6: pub_key_y[6], pub_key_y7: pub_key_y[7],\n            pub_key_y8: pub_key_y[8], pub_key_y9: pub_key_y[9], pub_key_y10: pub_key_y[10], pub_key_y11: pub_key_y[11],\n            pub_key_y12: pub_key_y[12], pub_key_y13: pub_key_y[13], pub_key_y14: pub_key_y[14], pub_key_y15: pub_key_y[15],\n            pub_key_y16: pub_key_y[16], pub_key_y17: pub_key_y[17], pub_key_y18: pub_key_y[18], pub_key_y19: pub_key_y[19],\n            pub_key_y20: pub_key_y[20], pub_key_y21: pub_key_y[21], pub_key_y22: pub_key_y[22], pub_key_y23: pub_key_y[23],\n            pub_key_y24: pub_key_y[24], pub_key_y25: pub_key_y[25], pub_key_y26: pub_key_y[26], pub_key_y27: pub_key_y[27],\n            pub_key_y28: pub_key_y[28], pub_key_y29: pub_key_y[29], pub_key_y30: pub_key_y[30], pub_key_y31: pub_key_y[31],\n        }\n    }\n\n    pub fn default() -> Self {\n        Guardian_PK::new([0; 20], [0; 32], [0; 32])\n    }\n\n    pub fn as_array(Guardian_PK: Guardian_PK) -> [u8; 20] {\n        [Guardian_PK.value0, Guardian_PK.value1, Guardian_PK.value2, Guardian_PK.value3, Guardian_PK.value4, \n         Guardian_PK.value5, Guardian_PK.value6, Guardian_PK.value7, Guardian_PK.value8, Guardian_PK.value9,\n         Guardian_PK.value10, Guardian_PK.value11, Guardian_PK.value12, Guardian_PK.value13, Guardian_PK.value14,\n         Guardian_PK.value15, Guardian_PK.value16, Guardian_PK.value17, Guardian_PK.value18, Guardian_PK.value19]\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        [self.pub_key_x0, self.pub_key_x1, self.pub_key_x2, self.pub_key_x3,\n         self.pub_key_x4, self.pub_key_x5, self.pub_key_x6, self.pub_key_x7,\n         self.pub_key_x8, self.pub_key_x9, self.pub_key_x10, self.pub_key_x11,\n         self.pub_key_x12, self.pub_key_x13, self.pub_key_x14, self.pub_key_x15,\n         self.pub_key_x16, self.pub_key_x17, self.pub_key_x18, self.pub_key_x19,\n         self.pub_key_x20, self.pub_key_x21, self.pub_key_x22, self.pub_key_x23,\n         self.pub_key_x24, self.pub_key_x25, self.pub_key_x26, self.pub_key_x27,\n         self.pub_key_x28, self.pub_key_x29, self.pub_key_x30, self.pub_key_x31]\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        [self.pub_key_y0, self.pub_key_y1, self.pub_key_y2, self.pub_key_y3,\n         self.pub_key_y4, self.pub_key_y5, self.pub_key_y6, self.pub_key_y7,\n         self.pub_key_y8, self.pub_key_y9, self.pub_key_y10, self.pub_key_y11,\n         self.pub_key_y12, self.pub_key_y13, self.pub_key_y14, self.pub_key_y15,\n         self.pub_key_y16, self.pub_key_y17, self.pub_key_y18, self.pub_key_y19,\n         self.pub_key_y20, self.pub_key_y21, self.pub_key_y22, self.pub_key_y23,\n         self.pub_key_y24, self.pub_key_y25, self.pub_key_y26, self.pub_key_y27,\n         self.pub_key_y28, self.pub_key_y29, self.pub_key_y30, self.pub_key_y31]\n    }\n\n    // Add ONE optimization - return Fields for ECDSA verification without breaking existing code\n    pub fn get_pub_key_x_field(self) -> Field {\n        let bytes = self.get_pub_key_x();\n        Field::from_le_bytes(bytes)\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        let bytes = self.get_pub_key_y();\n        Field::from_le_bytes(bytes)\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian {\n    pub address: Guardian_PK,\n}\n\nimpl Guardian {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian { address: Guardian_PK::new(address, pub_key_x, pub_key_y) }\n    }\n    \n    pub fn default() -> Self {\n        Guardian { address: Guardian_PK::default() }\n    }\n\n    pub fn get_address(g: Self) -> [u8; 20] {\n        Guardian_PK::as_array(g.address)\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        self.address.get_pub_key_x()\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        self.address.get_pub_key_y()\n    }\n\n    // Add the same optimization here\n    pub fn get_pub_key_x_field(self) -> Field {\n        self.address.get_pub_key_x_field()\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        self.address.get_pub_key_y_field()\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Signature {\n    pub r: [u8; 32],\n    pub s: [u8; 32],\n    pub v: u8,\n    pub guardian_index: u8\n}\n\nimpl Signature {\n    pub fn new(r: [u8; 32], s: [u8; 32], v: u8, guardian_index: u8) -> Self {\n        Signature { r, s, v, guardian_index }\n    }\n\n    pub fn default() -> Self {\n        Signature { r: [0; 32], s: [0; 32], v: 0, guardian_index: 0 }\n    }\n\n    pub fn from_bytes(bytes: [u8; 66]) -> Self {\n        // Wormhole VAA signature format:\n        // byte 0: guardian index\n        // bytes 1-32: r (32 bytes) - BIG ENDIAN\n        // bytes 33-64: s (32 bytes) - BIG ENDIAN  \n        // byte 65: recovery id (v)\n        \n        let guardian_index = bytes[0];\n        \n        // Extract r (bytes 1-32) - keep as big endian\n        let r = [bytes[1], bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7], bytes[8],\n                 bytes[9], bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16],\n                 bytes[17], bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24],\n                 bytes[25], bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32]];\n        \n        // Extract s (bytes 33-64) - keep as big endian\n        let s = [bytes[33], bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40],\n                 bytes[41], bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48],\n                 bytes[49], bytes[50], bytes[51], bytes[52], bytes[53], bytes[54], bytes[55], bytes[56],\n                 bytes[57], bytes[58], bytes[59], bytes[60], bytes[61], bytes[62], bytes[63], bytes[64]];\n        \n        let v = bytes[65];\n        \n        Signature { r, s, v, guardian_index }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Body {\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n}\n\nimpl Body {\n    pub fn new(\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n    ) -> Self {\n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n    \n    pub fn default() -> Self {\n        Body {\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n        }\n    }\n\n    pub fn from_bytes(bytes: [u8; 1060]) -> Body {\n        let timestamp: u32 = u32_from_u8s_le([bytes[0], bytes[1], bytes[2], bytes[3]]);\n        let nonce: u32 = u32_from_u8s_le([bytes[4], bytes[5], bytes[6], bytes[7]]);\n        let emitter_chain_id: u16 = u16_from_u8s_le([bytes[8], bytes[9]]);\n\n        // Parse emitter bytes into aztec address\n        let emitter_address_bytes: [u8; 32] = [\n            bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16], bytes[17],\n            bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24], bytes[25],\n            bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32], bytes[33],\n            bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40], bytes[41],\n        ];\n\n        let emitter_address_field: Field = Field::from_le_bytes(emitter_address_bytes);\n        let emitter_address: AztecAddress = AztecAddress {\n            inner: emitter_address_field,\n        };\n        \n        let sequence: u64 = u64_from_u8s_le([bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48], bytes[49]]);\n        let consistency_level: u8 = bytes[50];\n        \n        // Extract payload (1024 bytes starting from index 51)\n        let mut payload = [0; 1024];\n        for i in 0..1024 {\n            payload[i] = bytes[51 + i];\n        }\n        \n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct VAA {\n    pub version: u8,\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n    pub guardian_set_index: u32,\n    pub signatures: [Signature; 13],\n    pub hash: [u8; 32], \n}\n\nimpl VAA {\n    pub fn default() -> Self {\n        VAA {\n            version: 0,\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n            guardian_set_index: 0,\n            signatures: [Signature::new([0;32], [0;32], 0, 0); 13],\n            hash: [0; 32]\n        }\n    }\n\n    pub fn new(\n        version: u8,\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n        guardian_set_index: u32,\n        signatures: [Signature; 13],\n        hash: [u8; 32]\n    ) -> Self {\n        VAA {\n            version,\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload,\n            guardian_set_index,\n            signatures,\n            hash\n        }\n    }\n\n    pub fn get_guardian_set_index(vaa: Self) -> u32{\n        vaa.guardian_set_index\n    }\n\n    pub fn get_timestamp(vaa: Self) -> u32 {\n        vaa.timestamp\n    }\n\n    pub fn get_payload(vaa: Self) -> [u8; 1024] {\n        vaa.payload\n    }\n\n    pub fn get_hash(vaa: Self) -> [u8; 32] {\n        vaa.hash\n    }\n\n    pub fn get_emitter_chain_id(vaa: Self) -> u16 {\n        vaa.emitter_chain_id\n    }\n\n    pub fn get_sequence(vaa: Self) -> u64 {\n        vaa.sequence\n    }\n\n    pub fn get_consistency_level(vaa: Self) -> u8 {\n        vaa.consistency_level\n    }\n}\n\n// Helper functions\npub fn u32_from_u8s_le(bytes: [u8; 4]) -> u32 {\n    let mut result = 0;\n    for i in 0..4 {\n        result |= (bytes[i as u32] as u32) << (i * 8);\n    }\n    result\n}\n\npub fn u16_from_u8s_le(bytes: [u8; 2]) -> u16 {\n    let mut result = 0;\n    for i in 0..2 {\n        result |= (bytes[i as u32] as u16) << (i * 8);\n    }\n    result\n}\n\npub fn u64_from_u8s_le(bytes: [u8; 8]) -> u64 {\n    let mut result = 0;\n    for i in 0..8 {\n        result |= (bytes[i as u32] as u64) << (i * 8);\n    }\n    result\n}\n\n// Governance structures\npub struct ContractUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_contract: Field\n}\n\npub struct GuardianSetUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_guardian_set_index: u32\n}\n\npub struct SetMessageFee {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub message_fee: Field\n}\n\npub struct TransferFees {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub amount: Field,\n    pub recipient: [u8; 32]\n}\n\npub struct RecoverChainId {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub evm_chain_id: Field,\n    pub new_chain_id: u16\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct EmitterRegistry {\n    pub next_id: u64,\n}\n\npub struct EmitterCapability {\n    pub emitter: u64,\n    pub sequence: u64,\n}\n\nimpl EmitterRegistry {\n    pub fn new() -> Self {\n        EmitterRegistry { next_id: 0 }\n    }\n\n    pub fn get_next_id(&mut self) -> u64 {\n        let id = self.next_id;\n        self.next_id += 1;\n        id\n    }\n}\n\nimpl EmitterCapability {\n    pub fn new(registry: &mut EmitterRegistry) -> Self {\n        let emitter = registry.get_next_id();\n        registry.next_id += 1;\n        EmitterCapability { emitter, sequence: 0 }\n    }\n\n    pub fn use_sequence(&mut self) -> u64 {\n        let sequence = self.sequence;\n        self.sequence += 1;\n        sequence\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct WormholeStorage {\n    pub provider: Provider,\n    pub guardian_set_index: u64,\n    pub guardian_set_expiry: u64,\n    pub message_fee: u128,\n    pub emitter_registry: EmitterRegistry,\n}\n\nimpl WormholeStorage {\n    pub fn init(provider: Provider) -> Self {\n        WormholeStorage {\n            provider: provider,\n            guardian_set_index: 0,\n            guardian_set_expiry: 86400,\n            message_fee: 1,\n            emitter_registry: EmitterRegistry::new(),\n        }\n    }\n\n    // Getters\n    pub fn get_provider(state: Self) -> Provider {\n        state.provider\n    }\n\n    pub fn get_message_fee(state: Self) -> u128 {\n        state.message_fee\n    }\n\n    pub fn get_chain_id(state: Self) -> u16 {\n        state.provider.chain_id\n    }\n\n    pub fn get_guardian_set_index(state: Self) -> u64 {\n        state.guardian_set_index\n    }\n\n    pub fn get_guardian_set_expiry(state: Self) -> u64 {\n        state.guardian_set_expiry\n    }\n\n    // Setters\n    pub fn set_guardian_set_expiry(mut state: Self, guardian_set_expiry: u64) -> Self {\n        state.guardian_set_expiry = guardian_set_expiry;\n        state\n    }\n\n    pub fn set_guardian_set_index(mut state: Self, guardian_set_index: u64) -> Self {\n        state.guardian_set_index = guardian_set_index;\n        state\n    }\n\n    pub fn set_chain_id(mut state: Self, chain_id: u16) -> Self {\n        state.provider.chain_id = chain_id;\n        state\n    }\n\n    pub fn set_provider(mut state: Self, provider: Provider) -> Self {\n        state.provider = provider;\n        state\n    }\n\n    pub fn set_message_fee(mut state: Self, message_fee: u128) -> Self {\n        state.message_fee = message_fee;\n        state\n    }\n}"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "61": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "62": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n"
    },
    "69": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "70": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "71": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n\n    pub fn get_preimage_and_assert_empty<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n        assert_eq(self.hash, 0);\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "72": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "75": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "77": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "94": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "99": {
      "path": "/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v1.0.0-staging.6/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    }
  }
}
