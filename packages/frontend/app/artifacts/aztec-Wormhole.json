{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"Wormhole","functions":[{"name":"add_consumed_governance_action","hash":"664091480618558510","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"field"},"visibility":"private"},{"name":"cga","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+VaTW/kRBBtZ8bJ2JOJPZsNv8Mz+eREBCxXDhy4cBllEsQBLVqtOPuAxJ/gwL9A4sC/QOICEgfEhRvS7nXTu36ZN2/KjlfTrWi1LY1sd1W/V11dVW53krg3bef2lzT3Q+rTBp3L5lpt12YBsaqYdiYB7UzIzp2NGzKe7y35y+aaiY6XDwJOPhPekPgX1cl55tZbYPuPM8KMgD8H/jAOfrXX4Hxar+M74UXfk3rlyyc0xrdJc88xBlzIONYwfnT7K9zqfkp4vn1GPMDOBC9w3JxFXtfZYYv9mJtvn9RRuI/HjZ//EF9irV04rgrY6fbYc+1ATO0StsbHXpz1O02Ez7n1WHHCn4utoeMpET7Yo/5BvMF3I8PW0pBx/WEZ84wMnncJCzEK37Avk5YreLSvzc8hsLKAWHkALOTamGSXzbXarl3Azn3DTvBOqD9gTp30zXHw52JrrByfiD3qH13jA8PW0pCN6Z5lzHNg8FhYSUCsoci4pu+LjPMZdS9zUWvvHNxZBzfHhAvHXYE7N3wSOT/u3u0HcfBnE8J0Mhfv34+o3/+wh0zdKsYw1jfsp1LR/5UwP27uC9HhuIOsJNlIZFOSZSJ7RLJS5gCZozlwn+YJj4deZvCErItYl0OyS2vy4zjcvfdd4M/F1lg1+bHYw2vjm74rjyKtDez5wLDn0LDHx+mB21wztg9YvNdCbFk1uRAZ1+RDkXHNnIqPGNOF89HMqpnMxXY5w39c8wpjjro/w3Pq7t+/wqahMZ5reyr6XzVXj/2X2M3j+fvbY2GdF99/+/l3V0+X1188f/ps8fX1l8++eX7tpOlB0ahlotbpnm/WIYAWDnbOQxQO8Odia6zCYX2wsH/aNv881komDSwroDOD513C0g82PmRIWq7g0b736YMNWIWBhTzkjcVDfFSBPxdbY+VhKfaof9R3U8PW0pDpR9XU4JkaPBZWEhBLP6pSknW9wLvycVdk1kfJfZv6H9z6HDHnvpt66P9EmD8294Xb9GMqMq73uqlnm3VTz3VtR+bAB6sDo099yuOhNzHGac5G+sDt/e4Ef274JEbO7hp+td6dekAVo6ZxjLM91jrzppvXjO0DVtemm3M2EZm1ybRydiCyrk3xTsf8Ere5KebYwNhxizxr4bLyXusC6//cXL1ff+mw523y3tqMQ8brl4t9VjxY8Qn9roM9nj+4OV4mPbCSDu7C0J90cLNduo+YyLMV19AZ1CsZ56tvw3qd/7Lpr7Zrp359/yY72EbfUuJtW0fW7+NLax1L0WffvW2Oj0Vm7bmtHEf8cr4kbjNerBxEvlvv9IRw8U63DtU077GXast7PuRj/d+I7/cOvhiHeJr3fQ+DoH9k6OsBGnPzQcRRD6yig9s6KDrq4Ga7eKxyq50YZ+U9fPMQec+HYpr31jpah2hdvrTWsRR99l2MAzUr7xG/nC9d9atv3heEiwP6mOt6frH6ryfEVOrWvxGc8Kei/2fzzP7BdbiFnTfni9nN8eJmcbpYLk+uFo8E3zfeF4Xmr+bLq7Pr+a2Lzs9m8w+X9/HfrV29knOe+rbXPHu7BoY+79tY/x/o3v7+be5RC1KDz+u96NBLWq6vMYy+Yb3el9Wb+oN6U//uj7v1po2QjUnGNcS3/eaZ/cVYsCMV/f+b57t/jKIxGF8a/CPhX7Pb6OMaplgDow/6fn3+A15z5bmH/t57zSn43Ke2IXZ8XL8CBxUG0IoqAAA=","debug_symbols":"7d3fatswGAXwd/F1LvTpv/oqY5S0zUogJCVNB6P03Web2GktYzM+T6bSuSnLojryD2afI2f2e/W0e3h7vt8ff51eq7sf79Xh9Li97E/H+tX7x6Z6OO8Ph/3z/ee/rkTzg3w7/vVle2xevl6250t1pyT5TbU7PjV/NLbewq/9YVfdGfGxiQaTsOo6mIhUP5iMGRtt7HWwFLIfq8iNjHVBm+tgF8Jty9KPzUM5cR2slb6NHRsqJXUbllKp6cG2H2u/Dv25qSiAj8EnBfg4fAQ+Dp8EH4dPgY/Dp8HH4TPg4/BZ8HH4HPg4fGgdLD60Dg6fQutg8aF1sPjQOlh8aB2xiYZJZIJ+EJsg9McmSPKxCeJ5bILMHZloBOnYpMx0rKibslTSTg8mo3W3f8bRELDMfLwgYJkJeUFADUAeYJnZe0HAMoP6goBlpvoFAcusAAsCltkXlgM0ZZaLBQHRRJiAaCJMQDSRecDQ75+l4WKC0QDkAaKJMAHRRJiAaCJMQDQRHqAt8yzsdDdWOjMzmFxw3f55mtF2ttuws3poXebh8r9Zh94iODu0LvPIuo51mQfhdazLXDlaxdqVuci0jnWZ61HrWJe5dPXfrEn0Wybhw1AbCTultoZ2Qu0yV9DW0kZ/TKmNBplSGx0ypTZaZEJtjx6ZUhtNkqHdAKIeMgHR+JiAGoA8QPQyJiCq1ixgUP3+BR0Boj0xARcoROS7wSS1mQE0JnRzt17e5h7CmKClDtD524brS97N1MO3nXoQ33fq9H2nPp847dzUteg+gLR0Xz4hHu2F6/7peeFvBwBLI4O1777FqsNtw0qZduoq+dSV7adu/PTUnVehY/dBTA8m0t70B1zz6XtF9fBmV/XYrtYjTbj9lvt00Mv/fiPBgGRIYkEyJHEgGZJ4kAxJAkgGJCQETCITgklkImESmSiYRCYaJpEJMmxsghAbm5SQYtsdLSGbtjtaQuJsdpRKiJHtjpaQDdsdLSHwtTtaQoprd1SXsqP55K3lbgZBlE/iWlIln8y1pEo+AW1JlXzS3IIqMp/ot6RKPjlxSZV8QuWSKvkk0CVVNFRGVJBtx1RKzbZTN54hWWq2nVYpNdtOq5SabSdVVD55ZZX7MZHK53S1yo0kSOVzZlsJMJ+T4EqA+ZwvVwLM59S6DqDOZ4VpJcB8FqNW+i/PpJEE2YT5LHOtRqhByCVEI2ETopOwCdFK2IToJWxCNJP4xgRkUDfGVNAhxlRQC8ZUCk36k7ebIFNoeJ9RQZjkXWIxiJLzq2Oym3HQEaDF+Z4JiGjABESKYAJiaZEJqAHIusRisazIBEQOZAIiB84D+m7DXyZ8BcSCIhMQy4k8QIcm8i/HwBFANBHeScShiTAB0USYgBqAPEA0ESYgmggTEE2ECYgmwgREE+EBejQRJiCaCBMQQZoJiAespLsIj4exJLxYFfC0v4TYeNhfQmw8GDAhNh4imBBbAztZ9At4OGFCbOTshNjI2ekuRwc8MT4hNh4YnwxbCjTIZF/KkAINMtkJUgo0yITYaJAJsTWw02GjQSbERoNMiI0GmRAbDTIhNhpkOmxCg0yIjQaZEBulJhH2R/3q9/a83z4cdq/1bzRvvh0fL/vT8fry8uele+fhvD8c9s/3L+fT4+7p7by7P5wem/cqcf3xQ9YX4KS2P5sHTzYvyW6kpOYlte/K+qWuP7X+5L8=","names":["add_consumed_governance_action"],"brillig_names":["add_consumed_governance_action"]},{"name":"public_dispatch","hash":"17767924966224615024","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16644136947300891527":{"error_kind":"string","string":"invalid fee"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"expire_guardian_set","hash":"8461010814760483139","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"current_timestamp","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["expire_guardian_set"],"brillig_names":["expire_guardian_set"]},{"name":"set_message_fee","hash":"9295245490168229427","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VTPQ+CMBBtoUYrMqhR/0YJEBgd3B0cnBs+jIPBEOLMT1eSa3ppGhfal5Dj0uvre49CiQaFyoyeWGbOUMU8JA65hFXoP6iZE1QONUDroUOz3DjXJX8pspxb/DnUn3Lg9JmP4vTAL5bAcxk1v+llQgw9vkNqz+r3bIh+j+GdG3t8fFuP2Yu9Rb86KwKvW8NrgPJxpENO2R6AS35e13fV1c1t6Hr5aO79c2iIASyCWnpqmcOIiP7x2Uich1uUQigNIfAviL5sGAyt4/kj9GvkS1U2Q2dbyKRNZStzWddZJXcGP85tyukLlkFKKi4GAAA=","debug_symbols":"5ZJBCoMwEEXvMussMjYx0atIkahRAiFK1EIR795YVEIrvUA3Q354fGbgLdDoau5K49p+hLxYwPa1mkzvQlpWApU31pqujL+BbgPZmx8H5bY4TspPkDPKUgLaNdtTYGhojdWQc7qSLxgZxR1GlogTxpRd0JLejmpJuTzpFC9gIW/ZDguZ0d8wIpP8WAR5ksb4nQDyPzl1DemhvFGV1bsA7ezqyIfpOegPNQbf17qZvd4kifwIs0BBkiTUhuoX","names":["set_message_fee"],"brillig_names":["set_message_fee"]},{"name":"get_message_fee","hash":"5827658495845840526","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUTQuCQBDdLaM282JB/YwVFT166B7ULxj86BRGRGd/egqz7LikBK4Plpl11jdvnh+caXCMDuuDsz/AR66dMAqMC1JftivDvZyGQBh9bfKnMorFj/ks6g8FcvJ5+KXin8l/uUaec6P56Syq76ZdO5J7mHsj98+pvX22kSCctvlbBPsB/R1c9ME3ZqXflCUd0Pl+QC74PC7PvC7K27t+wb28llDQnqZeZtRozgfOeWz4PXCZ/ic4Td+XzMK8SSql6rtE/hXTvlM4pE7PH3G/JfpVdCborBIIqhAqiKEoohx8g58ZPn0BsvgMZ6kFAAA=","debug_symbols":"5ZJBCoMwEEXvMussMppE61WkSNQogRAlaqGId29SrA2t9ALdDPnh8ZmBt0Kr6qWvtO2GCYpyBTM0ctaD9WndCNROG6P7Kv4GGgayJz+N0oY4zdLNUDBkSEDZNjwF9w2dNgoKTjfyBSMyvsOIGT1gFOyEznjOdjoT9F0t8AxO8/QFsyT5DSOmmTgWYfQS41cCyP/k1M2nm3Ra1kbtAnSLbSIf5vuoPtQY3dCodnEqSBL54WeJOUlSX+urHw==","names":["get_message_fee"],"brillig_names":["get_message_fee"]},{"name":"sync_notes","hash":"5611050362719659581","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"rZLNqoMwEEbfJWsX+c/EVymXEjWWQIgS9UIR372xxCK1tBs3QyYchpPMN6PGVtPt6kLbDai8zMh3tRldF1I3LwWqovPe3a77a4TXQtiTH3oT1nYYTRxRSTAnUCAbmudZqTSjdd6iUsulOOAKZIYB8xcq2QdUUJFRIfALJQyWvwIRfoIMMLXJCP1dhjOdUS7hICPOkAG+yWj4LiPx9jOSyoOMPEFGU5phzcQPGcAZVfhtTUtq/010pvI2x6udQr1L23jv7Vvw+tjVtpmiXSO4S1+ql/QEytLYNPoB","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"set_guardian_set_index","hash":"2408870251875848421","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"a","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUPQ+CMBCtgNGKOkhM9F+UAIGRwd3BwbnhwzgYDCHO/HQluaaXS+NCe8tduevre68NC6ZjATkga2aYKSGLeRFbxBJGov9CzZwhc8ge6vsWxXJyrk38QqQZN+izyD/hgOnSH4XpAF+sAOcyanyqhaGs5uieqb+DGr8zNbOGvqr3UHOyx8X9O7wfERn4q7NC0BohDykX7BU3fCvt8My2P4wjYMnP6/quurq5DV0vH829fw4NI+GhmpLCIjxmjpDpn0cw6n22zM8LIRQnH/CXTD9UHAHq4/kTrDdIl8rBDJ5tLuM2ka3MZF2nlTwQfOzb5NMXQDSzZHIGAAA=","debug_symbols":"5ZJNasMwFITv8tZa6OnfvkooQbblIBCyke1CMb575eIK04Zkl002D434GGZgVuhcs9yuPvbDBPVlhTC0dvZDzGrdCDTJh+Bv1/M30P2g/OGn0cZdTrNNM9SMV4KAi11+CqayQ++Dg1rSjfyDUVA8YBRMFxiVuEMbqvlBG2p4oRXes0Zqfq2RYYE5l9sHAVQvD89VCS/N4/Da8OqAtanos6bCyFJVnmJnfK+q36TqltWnTd42wR3r7ZfYnsY8f43uz67HNLSuW5LbF34ad74XrAgT2TZbfwM=","names":["set_guardian_set_index"],"brillig_names":["set_guardian_set_index"]},{"name":"get_guardian_sets","hash":"14225585577886666245","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"address","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"structs::GuardianSet","fields":[{"name":"keys","type":{"kind":"field"}},{"name":"expiration_time","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZPY8TMRD1fmWTbEJywA/Z5HKXo4t0QIsENcXqkiAKdAgh6pVoQKJANHRI8EuJD0/y8jK7RMQusBTZ65md9zyeGXvvIvOnxZtf5Map6+UZm8wtXF+e1iYebZWxwjM2LYuJQaa9/Mv1PUU/8eiEHuH6tH9VzuY9s9888z/vkQ9D+EdsBrBf5s7O4/owHhA3IT1+x8qHbozxJjrdzW9kduMzNx66/gnYikj2VOEW0i+buLkQ+2kA+5s2faDwT2Fttl3XQbDPC7cHH529ROGCe9hT5jxxKdnPJ9ie8oTEYwa2I1pTxwTx8UVEeOJnnEP8PnH1XUciwhM+7B/JL/FdrnAdK7KIxrmCkys4/5MtidGhOYzZqKEXHJ5jP3c82so92up6sCW5hmfxwvXlaW0mPPsKT8EtYN5jTs2OzXHB7xPXUDleEB/2D+/xQOE6VmR4V0MZ4gwUHM1W4tFWRDI8s/skw3ovdS/wHWuq1ZKkBdv4wy4Fu9uCHejMKTnvfce7xG+s7GkHcCKSZWYXY/jtI/etjPRXYPPajUcKdkoy9GuHZFgDcpIVynrachvnOE/wfdELXRe5rggGYg/DYB997xL8vtFr08IPn21NHhIf3Bvb+Ky8F2hvhM9I4aPV2zPHhfcM+YktrLt8jqCMYxRr8oBkWDP75CPMPePPRxOtZiIWrsco/sOa11Yn+DlrwMKxPKfK+1jbM9J/6Xq7ps9ubPk+dOPqw5tnb29ul6sX72/fVa9Wz1fVMiKeWm7xs7Yv0viss23h+vK0NmFfaFySf1x3fOS6m/54mJjmHBBe2je4FmPaemRsc047e/h7SPIoa7CL5yTqv3a9zdfajTU8PgfxrONzsFB4igzzqUtrkPpjTPsdt63eYQ2LCRtr3egIW1kL9ljRH7VgIy98l7GbarLMJfVOhrXTthRkPs9fu09fgAdytC0D3KZ9RP1jfKnt45j00XfamZSRDM+kIckwn/icwziV+MV8icxhvGg5KPt07B035L7Or8pSaprElNQObinIUf+Te8ZaIH16As/1vJqsz6t1dVEtl7Ob6j7ZN+C7IgB+OV3eXK6mGxfNLyfTR8u/4UsMduqdHPPUttw9W16Joi/2MtL/Krqb3zc3ltjNFDyr97NFL2ro72woc2m9P9erD/WT+lB/exevDzmKrAAZ1hDbBu4Z/YW2hEdG+j/c8/b/EvCOvD9W8LuEv8dbmeP7Q6HoF4q+3Z/vYs/1uHbf3yl3mGQf55ibxI6N699N61FETR0AAA==","debug_symbols":"7d3fauJAFAbwd8m1F3Pm//RVlqXY1hZBtFi7sBTffRNxktYEc3Hiycp8N6Uph3jmlxrnmwTzVb2snj7fHtfb191H9fDrq9rsnpeH9W5bb30dF9XTfr3ZrN8ev/+5Us0Piqf6j/flttn8OCz3h+qBAqVFtdq+NL9aU+/hdb1ZVQ9OHRf9YuVNLibqism5oeroc3GKba2hMFCrlc1taOV1V23o+HtRUZLu3fm2HT3Se0jWnYtDSt2edRzqwwR1LrbGdrVDpVpT3rHWxlwv9m2t/1la82kFPg4fgY/Dp8HH4TPg4/BZ8HH4HPg4fB58HL4APg5fBB+HD6mDw2eQOlh8SB0sPqQOFh9SB4vPgq9ngijRN0E+6Jtg0t83wUy+b4Lpec/EYs7dN8FEum9S5uzYUG5ZG+2vF5OzNo/PBboELHN+PCGgBSAPsMzp9ISAZc69JwQsc6I+IWCZs/oJAcuMANMBujLzwoSAZYaLCQGRRJiASCJMQAvAUcDUjs/T5WKCQxJhAiKJMAGRRJiASCJMQCQRHqAv81M42FyrgxspppBCHl+kEe3g846Dt5fWZZ4ub2adWosU/KV1mWfWeazLPAnPYh3KXDmax7rMRaZ5rMtcj5rHusylq5tZk2r3TCqmS20LbUHtMhfF5tIucwVtLm3kR0ltJEhJbWRIQe2IFCmpjRwpqY0kydBuABEPmYAWgDxAhDgmIHIZExBRaxQwmXZ8yfYAkZ6YgBMEIooxF2vrRgCdS7l3H3XXe0pDgp4yYOi+ZJLqS95160ndb+t0v63r+219fMbpwljr7VuaKKgfrzDQjYv5ztTgVTdQT0PFJub3abBaXy+uT1Sh/f5Vsip9L2+Gav/voSbfDZUue3d33Lsv518siA81dEPV6nr3NrSHyUbTnQp0soONpLYRTd1BNcadhhrLGWoqZqiksGAmdlMiKayXTXvnhc4dJ9vHxsqGIDZWQQSxsWIiiI3VFUFsXJoWuzWRCFemBbExzxbExjx7WuyYd/yj4TM2rmELYltgy2EjQd7qnD2AjQQp+AGJBCmIjQQpiI0EKYdd6FMXZ8JGghTERoIUxEaCFMS2wJbDRoIUxEaCFMRGqBHCPtZbf5b79fJpszo/Av/1c/v87Yn4h7/vq4uH47/vd8+rl8/9qnlMfveE/Ga+TvUQyFNzEE+bhhZk/Ck7nTZDvZnqV61f+R8=","names":["get_guardian_sets"],"brillig_names":["get_guardian_sets"]},{"name":"add_sequence","hash":"14568280421683208705","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sequence","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+VazW4jRRDusT2Jx47t8WbDc9jOj5cLCuLnyoEDB05WnCAOaNFqxXmExEtw4C2QOPAWSFxA4oC4cENi75ve7S/+/LlmMit3K1ptS1bPdFXXV11dVVPdSeZet87tLwvPPRrTBp7L0M/2a/OIsmYp9cwi6pmRnp2dB1Keny36i9AXwuPp3YiLLwQ3pvwns7Nl4bZbZP1PC5KZQP4C8ntp5M8Og5yPq235TnBH4Z39B3NAYz/6JND6t7+x2zyXJM+3TwkXsguRF9knLhLv2fy4Rn+szbePqiTYp8Ng59/FlthHFw9rBtn5/rIXOgCfOiDZ6h+HafbvPBM857Z9xQn+QHSN7U+Z4EEftQ/8DbbrG7qWBo1zC9MYp2/gvE2y4KOwDdsyq+mBo2N1do4hq4goaxBBFmJtSLTL0M/2a0voeWToCdwRjUeMqbO2MQ78geiaKsZHoo/aR/d4bOhaGrQhPTONccYGjiUriyirJzTO6UdC43hG3itc0ty7AHbRgM0+4eJhz4A9MGySOD7uvu3jNPLnI5LpZC3evh/QuP9NwnvuNj6Gub6hnsqF/xeS+WF4nggP+x1oJdH6QpsSrRDaI6KVsgbQHK2BxzROeD74CgMnZl7EvhyTXpqTH6fBbl13AX8guqbKyY9FH94b3/RbeZJob6DPe4Y+x4Y+3k/HbnfPWD/I4loLvmXl5InQOCcfC41z5lRsxDJdPBvNrZzJWKyXM+zHOW9irFHrM7zn7v76FTr1jPmc23Ph/zL0Xvaf4dnzYh9X333z2bdXT9fXnz9/+mz11fUXz75+fu2k6SWPFq0dg4+bdcjXxMCLf4jEAPyB6JoqMVgHErZPXXHPc61gUcexHLYwcN4mWXog40uErKYHjo69SwcyyJoYshCHXDg8xKEJ+APRNVUclqKP2kdtNzV0LQ2aHpqmBs7UwLFkZRFl6aEpJ1rTB7opHg+EZh067ivav3fba8Sa2xbt4P+RZP4Qnidu14650Djfa9HOOmvRznmtI2vgi9OuMaY25fl6ec7zNGYTHWBbfzuBPzBskiJmDwy7Wt9OvYBKkdPYx1kfa5+5qOY9Y/0gq6mo5pjNhGYVkVbMdoXWVPR2GtaXud2il30Dc4c19KIGy4p7zQvM/1PovV1/btDnTeLeKrZB4/0biH6WP1j+Cf6mizteP7DZX0YtZGUN2BODf9SAzXppHTGSd8uvwdOtNjSOV9961Tb+ZRif7dfO/f7+RXqwjr7lhFu3j8zfxpbWPpbCz7Z70xgfCs2qua0Yh/9yvOi3l9fBMYh4t77pGcnFN926NNO4Ry1VF/d8icf8vxLebw14KS7pNO7bXvaA/8Tg1wsyxuaLhpMWsiYN2NZF0EkDNuvFcxVb9cQ8K+5hm4eIe7700ri39tG6JGuypbWPpfCz7VJcmFlxD//leGnKX23jfkJycQGfcl+XTzb/sQSfyt32GcEJfi78f4R3tg/63h563ixX85vT1c3qfLVen12tHol837guio0/W6yvLq4XtyZaXswX76/vw7/bu2pD5zj17TC8e726Bj/Xbcz/N3hvf/+EZ+SC3MDzfP838GU1/SsZxliv2h4rql3+brXLf/fH22pXR9CGROMc4ttReGd7sSzokQv/f+Ede9KnOZhfGvh9wd/S2xjjHKayusYY+P3+/At5oee1xz7vvcIU+TymusF3vF+/BNlF+z1GKgAA","debug_symbols":"7d3fatswGAXwd/F1Lvzpv/oqY5S0zYohJCVNB6P03Web2GktEzM+TabSuSnLojrSDxqfo7T2e/W0e3h7vm8Ov46v1d2P92p/fNyem+OhffT+sakeTs1+3zzff/7vqu6+kO3Hv75sD93D1/P2dK7uhFNqU+0OT90/jWqP8KvZ76o7XX9sgsFUG3kZTERyHExaz43WZjhyLcaxkuzMWOuVvgy23l+PLNzcPKStL4OVvE5ZzA0VgoYDCyHl7cFmHGu+Dv25qciBj8PnwcfgEzX4OHwEPg6fAB+HT4KPw6fAx+HT4OPwGfBx+NA6WHxoHSw+tA4On0TrYPGhdbD40DpCE1SJ0ETBJDBB6A9NkORDE8Tz0ASZOzRBkA5MVJnpWNIwZSGFuT2Y9IhB2tIUsMx8HBGwzIQcEbDMOB0RUAGQB1hmUI8IWGaqjwhYZgWICFhmX4gIWGa5iAeo0USYgGgiTEA0kWVAP67P0HQzQaOJMAEVAHmAaCJMQDQRJiCaCA/QlHkWtmoYK6xeGEzW22F9jha0rRkObI2aWpf5dvnfrP1o4a2ZWpf5zrqOdZlvwutYl7lztI51mZtMq1jbMvej1rEuc+vqv1lTPR6Zauen2kjYKbXL3BRbS1tBO6E2+mNKbTTIlNrokCm10SJTaqNHJtR2aJIM7Q4Q9ZAJiMbHBESJYwIqAPIAUbUWAb0c1+dVAIj2xASMUIjIueEFhNILgFr7Ye7GieuhvZ8TNDQAWnc9cDujburu+07df9up+/r7Tn05cdqlqat6eAFSwn55hXC0q+XwbuFqfZ2PobmpO+mHuTtf3x5MpJwe37X0p1/OaYd3S53Nhu1I7a/f9WmxIv+LdngJkimJAsmURINkSmJAMiWxIJmSOJBMSTxIJiRU1zAJTAgmgQkCbGiCBBuaKJgEJiVk2H6hJSTTfqEl5M1+oSWkyH6hJWTDbqFUQuDrF1pCiusXWkI06xeaT96Kdz2FducZKjMq+WSumCr5BLSYKvmkuZgq+US/mCr55MSIKiKfUBlTJZ8EGlMln7gaUwXZdk5FFapy69otJErNtrdVSs22t1VKzbY3VWQ+eWWVSxqRzOd0tcq1GEjmc2ZbCTCfk+BKgPmcL1cCzOfUuhJgPjtMKwHmsxm10l8Nk0ISZBPms821GmE+e2KrEaKRsAkVCLmEaCVsQvQSNiGaSfi3/aRQN+ZU0CFmVDRqwZxKoUn/5hUbSBca3hdUFH6CWB+xaETJ5d0xMczYqxAQ53smIKIBD9AgRTABsbXIBMTGIu8jFoNtRSagAiAPEDlwGdANB/4y4QsgNhSZgNhOZAKiifzLe+AMIJoI7yRi0USYgGgiTEA0ESYgmggTUAGQB4gmwgREE2ECookwAdFEmIBoIjxAhyDNBFS4xUayD+FxQ5iEH1Y53J4wITbuTpgO2+PmhAmxcSPDhNi46WG66Odxg8SE2ArY6bCRs9N9HO1xk8aE2LjDfUJsNMh0v5Th0SCTnSBFjQaZEBsNMiE2GmRCbDTIhNgK2Omw0SATYqNBJsRGg0yIjQaZEBsNMh02odQkwv5oH/3enprtw3732n5H9+Tb4fHcHA+Xh+c/L8MzD6dmv2+e719Ox8fd09tpd78/PnbPVfXlyw8h5EYo9bO7TWH3kNRGkO8eUv9svRFCtK/avvJf","names":["add_sequence"],"brillig_names":["add_sequence"]},{"name":"set_provider","hash":"13063192762158006403","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"a","type":{"kind":"struct","path":"structs::Provider","fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_contract","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VVPU/DQAz13aVN01JRFfETkGBLaFE6VoKyMjAwn/qBGFBRVTH3p9MIWzGOKQjuhlqK7hI7z89+zsXAp9n9ZXCf4OqgaRQzxTX/nxUBsfKYPM2R8LSReH4ZBoMD851RURNcM1wt87uARWcib0j8ST4uM6W+gPxHGWImkfFbcfDzFHHudjU+r4XyOhEn37EsZsZiZiKmj3sDTZw+NOdzJnx8lu/R19lfA6j3Q9xnIleM2eJ8Q2tzpvC3rLbKbndRco962MtrxHPQnEOuoTvAtTJNWyN0asfp49iIfMQXBF/K34WouhZG5OP94/2xonepwnWg+KRGqZInVfJoWCYgFvU85ndZWQbNsyIQdhH5PC5I60TRoNL8QjwnX4vpkbC66XxoifgrhnmJ+x7o3zHHo2dtce8UvodmRptziu8o8anC51TJR++e7K9z3Pv314e3+XqxfNyuN/55+bR52S5BmP2hQKPEgRJjFPLaD/W3QtNBn+zquFADV07ynHI6xKdBkpYwP48v8b7L6gBW2/SPPFelL1Yjv/I3frEYz/1Q4FdGWlSD+wEQq2M9Dg0AAA==","debug_symbols":"5ZjPioMwEIffJWcPSSYTJ32VpRTbpkUQLf5ZWMR337hocK1bb0tCL5LIx49vDpmB6dnVnrv7KS9vVcMOHz0rqkvW5lXpbv2QsHOdF0V+Py1/Mz5+hPnhm0dWjtemzeqWHYRMIWG2vI5Hgy7hlheWHZAPyTOsuJhhJVMPC602aOI+mjiBp7XYjJbLbFQel2Yz3JiJNkJ6FgCHY8Ikf59SRdClAmnjs0HTr1JHfRm3PsStr+LWx7j1ddz6adz6FLd+2NN8Tx/CntC7+nFPXfj/pwva6yO91k9ThRPsjnoJO3clgnYnTbM7pbR2l2G7I7xwh7DdiXt3Mmt3FbE7Ruyuw3YH490N3+mpQtHclYRA+dSWwm6pf5d6HNztM6vz7FzYaYlw68rLYqfQfj3sar3wqKuLvXa1HRcNix3DONaRJ4gu1kV/Aw==","names":["set_provider"],"brillig_names":["set_provider"]},{"name":"get_provider","hash":"7473605775155503415","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"structs::Provider","fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_contract","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71XTW/bMAyVYqmxk2YJtv2FATs6i4d0twL7wC7bgG6X3WbEyU5Dh6LoWT+9VioizzQVBIhVAoIlkXqPIkUp0epJRm3ToW9UVzLVFw3rRMmY8UhY3IRvwcB0WH8dxuV5siwY75D4V2W1LlQ/OAP6vyoCpk6DXxYsR0PjjwPOJ3fA18LZyNv2AvqL0J8dWU+6z66PR7ovrrsvL7Rnk2DP7ZmoCN8mwG9l9Urw38LevHx0abinIT9fWSyxxgfiKmeqmzfaT+octlJpxqfAD9QR/4T5OvQ9phkf+cPjg+efn0FauxB0WP+oQx4r8DwX1kzF35JTciXx8DvPS6GS5rHk51apYd+6hPfOknKghbhdtO0NzKPOqkPeMR90R1lm/wEw34b+XMXfDs6nBD6My1zF80/rTIRnpPp1F6tLCZ/mE5+zd8dqT8rfXMXfFF6zUnykmEjcRsVjcorPXujczI9wSmc1dpegX9MI7oj5cwE69I3mxmyM+6a1l217Hfr1w78f/ze3zfbn/e1d/Xd7s60bzTCQk/NJ3NyOfhNl7qDHe8+LYbrrMF+eJ5X/zfAd/OAxssDrWw66TLDntV8I9jmz8bJg9hhX6V0YM4xT75hT78qUcV9flSXxU86tkv/UGdCj/bcwnsA+6GvO8HO3rpe7Vb2r39dNU23qlwzfC+WBanIfO3fQ4zn2Mg5jA3tEe8KzzP6GbNv2K/SpVqzA5+02R+x05LvHEOaM684Vrm+fub49cU9c30fSTUGHNeblMowxXohFflhm/yeMKSc5rKH1C4E/Z/wdv4U5rEOOlQlzZO/z85vwwhf3PvTv8j0nw8c57hudHX+uHwGS7bXuhREAAA==","debug_symbols":"5ZrNasJAEIDfZc857Mz++yqlSNQogRAlxkIR371JiBtr7PZSygy5SFY+zDeSzewMcxW7YnM5rMt6fzyL1dtVVMdt3pbHultdb5nYNGVVlYf149dC9h/gBv58yut+eW7zphUrUNZkoqh3/aW33S/sy6oQKyNv2RwGHWFwMsJg9QvaGa9H2llpIm3hFYxG3WE0+hF+zwR4xu6BrztKxu7A2B0ZuyvG7pqxu2Hsbhm7M86ryDivIuO8qhjnVcU4ryrie9XL6O7hyV3TfmYmD6fczP3/nxk3uaNMu6MMAUe6v/YRx6AHfeStryjraxfsCGuvvsvP6eDvMEiJEVbKDJHqxURqFhOp5b35HG99z1s/LGWbGLmYSEkfJv40Ut7nDkP63PG7PuNiwdAu7DXAHdY4c6dd2Ku4v1+4W+JFmleTO6ZhAOXiywm0DM+h0u4DJOtRS7u/nnan3V9Pu2vG7rT762l32v31tDvtNJx2p52G0+7E0/DP7rdu9ZE3Zb6pinEsYn+ptw9TEu3nqXgamDg1x22xuzRFPzoxTU30+dz5LITuH4FhgZlz3S2623wB","names":["get_provider"],"brillig_names":["get_provider"]},{"name":"set_initialized_implementation","hash":"1473867507163641330","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"field"},"visibility":"private"},{"name":"ii","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+VaPW/cRhBd6o7SkacTeZaV38E7fdlVhCROmyJFmjQHnRSkCBwYRmoWAfInUuRfBEiRfxEgTQKkCNKkM2C31tp8unfvhhSN24VgeIEDyZ3Z92ZnZ4bLlRL3tu3c/JLmfkh92qBz0Vyr7dosIFYV084koJ0J2bmzcUPG870lf9VcM9Hx8kHAyWfCGxL/UXVynrn1Ftj+44wwI+DPgT+Mg1/tNTif1ev4TnjR96Re+fIJjfFt0txzjAEXMo41jB/d/Aq3up8Snm+fEw+wM8ELHDdnkdd1dthiP+bm26d1FO7jcePnP8WXWGsXjqsCdro99lw7EFO7hK3xsRdn/U4T4XNuPVac8Odia+h4SoQP9qh/EG/w3ciwtTRkXH9Yxjwjg+d9wkKMwjfsy6TlCh7ta/NzCKwsIFYeAAu5NibZRXOttmuPYee+YSd4J9QfMKdO+uY4+HOxNVaOT8Qe9Y+u8YFha2nIxnTPMuY5MHgsrCQg1lBkXNP3Rcb5jLqXuai1dw7urIObY8KF467AnRs+iZwft+/2gzj4swlhOpmL9+/H1O9/2EOmbhVjGOsb9lOp6P9GmJ8094XocNxBVpJsJLIpyTKRPSBZKXOAzNEcuE/zhMdDLzN4QtZFrMsh2aU1+WEc7t77LvDnYmusmvxQ7OG18U3flUeR1gb2fGTYc2jY4+P0wG2uGdsHLN5rIbasmlyIjGvyoci4Zk7FR4zpwvloZtVM5mK7nOE/rnmFMUfdn+E5dXfvX2HT0BjPtT0V/a+bq8f+W+zm8fz97bGwzosfvvvi+8uny6svnz99tvjm6qtn3z6/ctL0oGjUMlHrdM836xBACwc75z4KB/hzsTVW4bA+WNg/bZt/HmslkwaWFdCZwfM+YekHGx8yJC1X8Gjfh/TBBqzCwEIe8sbiPj6qwJ+LrbHysBR71D/qu6lha2nI9KNqavBMDR4LKwmIpR9VKcm6XuBd+bgrMuuj5K5N/Y9ufY6Yc99NPfR/JsyfmvvCbfoxFRnXe93Us826qee6tiNz4IPVgdGnPuXx0JsY4zRnI33g9n53gj83fBIjZ3cNv1rvTj2gilHTOMbZHmudedPNa8b2Aatr0805m4jM2mRaOTsQWdemeKdjfonb3BRzbGDsuEWetXBZea91gfV/aa7er7922PMueW9txiHj9cvFPiserPiEftfBHs8f3Bwvkx5YSQd3YehPOrjZLt1HTOTZimvoDOqVjPPVt2G9zn/R9FfbtVO/vv+QHWyjbynxtq0j6/fxpbWOpeiz7941x8cis/bcVo4jfjlfErcZL1YOIt+td3pCuHinW4dqmvfYS7XlPR/ysf7vxPdHB1+MQzzN+76HQdA/MvT1AI25+SDiqAdW0cFtHRQddXCzXTxWudVOjLPyHr65j7znQzHNe2sdrUO0Ll9a61iKPvsuxoGalfeIX86XrvrVN+8LwsUBfcx1PX+0+q8nxFTq1r8RnPCnov9X88z+wXW4hZ3X54vZ9fHienG6WC5PLhcPBN833heF5q/my8uzq/mNi87PZvPHy7v4b9euXsk5T33ba569XQNDn/dtrP8vdG9+/zX3qAWpwef1XnboJS3XNxhG37Be78vqTf1Bval/+8fdetNGyMYk4xri237zzP5iLNiRiv6L5vn2H6NoDMaXBv9I+NfsNvq4hinWwOiDvl+f/4HXXHnuob/33nAKPvepbYgdH9evASEPO2OKKgAA","debug_symbols":"7d3fatswGAXwd/F1LvTpv/oqY5S0zUogJCVNB6P03Web2GktYzM+T6bSuSnLojryD2afI2f2e/W0e3h7vt8ff51eq7sf79Xh9Li97E/H+tX7x6Z6OO8Ph/3z/ee/rkTzg3w7/vVle2xevl6250t1p6wRm2p3fGr+6H29hV/7w666M+JjEw0mYdV1MBGpfjAZMzba2OtgKWQ/VpEbGeuCNtfBLoTblqUfm4dy3Zy10rexY0OlpG7DUio1Pdj2Y+3XoT83FQXwMfikAB+Hj8DH4ZPg4/Ap8HH4NPg4fAZ8HD4LPg6fAx+HD62DxYfWweFTaB0sPrQOFh9aB4sPrSM20TCJTNAPYhOE/tgEST42QTyPTZC5IxONIB2blJmOFXVTlkra6cFktO72zzgaApaZjxcELDMhLwioAcgDLDN7LwhYZlBfELDMVL8gYJkVYEHAMvvCcoCmzHKxICCaCBMQTYQJiCYyDxj6/bM0XEwwGoA8QDQRJiCaCBMQTYQJiCbCA7RlnoWd7sZKZ2YGkwuu2z9PM9rOdht2Vg+tyzxc/jfr0FsEZ4fWZR5Z17Eu8yC8jnWZK0erWLsyF5nWsS5zPWod6zKXrv6bNYl+yyR8GGojYafU1tBOqF3mCtpa2uiPKbXRIFNqo0Om1EaLTKjt0SNTaqNJMrQbQNRDJiAaHxNQA5AHiF7GBETVmgUMqt+/oCNAtCcm4AKFiLzvPkBqMwNoTOg2bb28zT2EMUFLHaC7zYLqS97N1MO3nXoQ33fq9H2nPp84w9zUteg+gLR0Xz4hHu2F6/7peeFvBwBLI4O1777FqsNtw0qZduoq+dSV7adu/PTUnVehY/dBTA8m0t70B1zz6XtF9fBmV/XYrtYjTbj9lvt00Mv/fiPBgGRIYkEyJHEgGZJ4kAxJAkgGJCQETCITgklkImESmSiYRCYaJpEJMmxsghAbm5SQYtsdLSGbtjtaQuJsdpRKiJHtjpaQDdsdLSHwtTtaQoprd1SXsqP55K3lbgZBlE/iWlIln8y1pEo+AW1JlXzS3IIqMp/ot6RKPjlxSZV8QuWSKvkk0CVVNFRGVJBtx1RKzbZTN54hWWq2nVYpNdtOq5SabSdVVD55ZZX7MZHK53S1yo0kSOVzZlsJMJ+T4EqA+ZwvVwLM59S6DqDOZ4VpJcB8FqNW+i/PpJEE2YT5LHOtRqhByCVEI2ETopOwCdFK2IToJWxCNJP4xgRkUDfGVNAhxlRQC8ZUCk36k7ebIFNoeJ9RQZjkXWIxiJLzq2Oym3HQEaDF+Z4JiGjABESKYAJiaZEJqAHIusRisazIBEQOZAIiB84D+m7DXyZ8BcSCIhMQy4k8QIcm8i/HwBFANBHeScShiTAB0USYgBqAPEA0ESYgmggTEE2ECYgmwgREE+EBejQRJiCaCBMQQZoJiAespLsIj4exJLxYFfC0v4TYeNhfQmw8GDAhNh4imBBbAztZ9At4OGFCbOTshNjI2ekuRwc8MT4hNh4YnwxbCjTIZF/KkAINMtkJUgo0yITYaJAJsTWw02GjQSbERoNMiI0GmRAbDTIhNhpkOmxCg0yIjQaZEBulJhH2R/3q9/a83z4cdq/1bzRvvh0fL/vT8fry8uele+fhvD8c9s/3L+fT4+7p7by7P5wem/cqcf3xQ9YX4KS2P5sHTzYvyW6kpOYlte/K+qWuP7X+5L8=","names":["set_initialized_implementation"],"brillig_names":["set_initialized_implementation"]},{"name":"get_consumed_governance_actions","hash":"7740182722160710537","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"address","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VYy6oTQRDtuTOT1yQmPj5k8o4LIaCuBd25kSEPV3JFxIUgDAouxI07QT/W9LXr5uRMzRhI98KC0NNd1XWq69VNIvOXIvezlMAak6yt3ZhfRmOPuvJIsbPxENqG327suvEK+LHHg3cVW3zpX+WzRddUz+zR/mnX6QzpH9EZQH/ednqelEf9fBZLA3NaHLin4/jyPYQ9lp6Cbtkf0m+HuM8D+21839T7SnLucRkEe5o5P38iXwq+8YeVi+7kct0TXpCcSkE350crTPzmWu+LaQ3xe2Sr73yKCE/sYf9Ivonv2oqtI4WHZ0Me4rQVnP9Jl+TowFRzNqoZBYfX2M8tj7raHnV1POiSWsO7cu3G/DJaiZ09xU7BzWDdY03Nzq1xwe+RraFqPCN72D8c475i60jh4VsKeYjTV3A0XZFHXTHx8GHdIx72e+l7XcUmj3GZaL0kasA2/rBzwe40YAe6c3Kue9/5Lvl7pcTUxvkRnVl4qTnmmOy1JO+plORfgc61+x4q2Anx0K8t4mEPaBMvU87TVNu4xnWC+0UudF/kviIYiD0Ig332u0vwe0bvJ2s/9tz25AHZg7GxxHflnUCxEXuGij1av73rbOGYoX2iC/su3yPI4xzFntwnHvbMHvkIa8/489FY65mIhecxiv+w5zX1CZ6niiy/X2WeKPtFBnWJ/Es32jN9cd/W3gfuu/jw5tnbzfV29+L99bvi9e75rthGZKdWWzzX4iIU15wJZWNT7wPkRw14Nve0Hsz3r+RTWoOL9wXKb9xo8/aj+9bw+D7Ans/3QabYKTzMK77HpQ6NaX7rNdU91vIVYWPND8/QlTZgjxT5YQM22oV7GbuuN8laXB552EMsJcDzeQ/ZOH0FO9BGSyng1sUR5c/xpRbHEcmj77TenBIPe/OAeFhP3O8xTyV/sV4iU80XrQYlTue+9ULGdbk6/vktOSW9gykBPsp/dnPsBTImF9i5Xxbj/bTYF/Niu51tinuk34DvsgD4+WS7WewmBxctF+PJw+2/8CUHW+WRj3Vqqe3m1q5YkRd9Kcl/E9nD77v7ltxNFTwr96tBLqoZb3Qoa0l5utYtq/JxWZW/fZOWVRuFlwEPe4ilvpujv1CX2JGS/E83l5h0YI/sHyn4HcI/sVtZq9zTinymyNv4/BB9bsSz+36v32CSflxj2yR3bF7/AYwtdAnpGwAA","debug_symbols":"7d3faupAEAbwd8m1Fzv7f/sqh0OxbVoE0WLtgUPpuzcRN1oTzMXECbLfTWnaYTP7E+N+GyFf1Uv99Pn2uNq8bj+qhz9f1Xr7vNyvtpvm6Ot7UT3tVuv16u3x/M+Van+QP9R/vC837eHHfrnbVw/GJr+o6s1L86szthnhdbWuqwenvhe9YlLeHIuJyHTF5NxQtcsja6W7WkNhoDYk647FIaXTyDoO9WGCOhbbs5b1UKnWlAfW2pjrxb6r9b9L/y4qCuDj8EXwcfgS+Bh8WoGPw0fg4/Bp8HH4DPg4fBZ8HD4HPg4fUgeLD6mDxYfUweJD6uDwGaQOFh9SR98EUaJvgnzQN7Ew6ZlgJd83wfK8b4I1d98EC+m+SZmrY0O5ZW20v15Mzto8PxfoAtCWuT6eELDMFfKEgGUupycELHPtPSGgBSAPsMxV/YSAZUaACQHLzAsTApYZLiYERBLhATokESYgksg4YOrm5+lyM8EhiTABkUSYgBaAPEAkESYgkggP0Jf5KRxsrtXBjRRTSCHPL9KIdvB54ODtpXWZl8ubWafOIgV/aV3mlXUe6zIvwvNYl7lzNI91mZtM81iXuR81i3Uoc+vqZtakupFJxXSpjRW2pHaZm2JzaZe5gzaXtoW2oDYSpKQ2MqSkNlKkpDZypKQ2kiRDuwGMiIdMQCQ+JiBCHBMQuYwJaAE4BphMN79ke4BIT0zACQIRxZhPoK0bAXQu5d591KehUxoS9JQBQzwN3NzyblsP99t6vN/W0922nsZXnDaOtd69pYmC+nWGgW5czN9MDV6dJuppqNjE/D4NVuvrxc2FKviuEavSeXk7VRKfajhNVavr3bugj7XuLFcZ4w6t6/tt3dxv6/ggFfuCVsIm5LQ3oXXuONmeNbZpxKxJYUtHEBvbP4LY2CoSxMa2ktiXtJqbHMCWw8YqWxAby+xpsWMe+FfDR2zc6hfExp1+QWwkyFtds/vYhAQp9wFJSJCC2EiQgthIkILYFthy2EiQgthIkILYSJCC2EiQgthIkHLYhT5QcyZshBoh7O/m6N9yt1o+revjA7VfPzfPZ8/X3v9/ry8etf2+2z7XL5+7un3o9ul52+07hIxdNMTti3g4bO7HkVGHq9Xhv9QcmuaszZl/AA==","names":["get_consumed_governance_actions"],"brillig_names":["get_consumed_governance_actions"]},{"name":"add_guardian_set","hash":"11799600168527216855","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"gs","type":{"kind":"struct","path":"structs::GuardianSet","fields":[{"name":"keys","type":{"kind":"field"}},{"name":"expiration_time","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1ay24jRRStdrvtdDuO7SQTfsN2MpOwiwZmWLJgwRJZcYJYoEGjEeteI/ETLPgLJBb8BRIbkFggNuyQQCI11IlPTt/ucUiVRpEoKepy3Vv3nrqveiiZ+7fl139Z6PdpTBt4zsN3fr+2iChrnhJn9kBw9iLizAhn3ugE8D1jMbkx9nf4luHbI3oe0QCl6I0p/2x+cla62y0y/uMyyOwnll+kkT8fBjnv1xv5vJZCYgR8OicnnufE81x4xqHPwQo5oHGMPhMaxypk71z/zdymf+A2c3z7gDBAbym6IsfdaSl4Y+fNQQt+rM239+okuo9Hwc4/BXnYjDhG2b+lMRYJyxyyB/eXvdQBxNyQZGv87KTx7+NM9MHOPMb6K8EaO94y0Qc8ah/EI2xXGlinBi2TfmnoKQ09D0kWYhS2YVtmLV/o0bE2O8eQVUWUNYogC7m2S7Tz8J3fr50A59jACb17NB4xp062zXHorwRrqhzfEzxqH/XxxMA6NWi71Gca65kYeixZRURZmdC4po+FxvmMule6pLV3Cd1Vh26OCRdP9xy6R4ZNEufHzd4+SSN/gfjl8y7W4mv1UxrPQgz4VrhNjGGubzhvFcL/Pcl8FvoT4eG4A21GtFJo+0SrhHZAtJmsATRHa+AxzROeD77S0BOzLsIvh4RLa/KjNLq3PndBfyVYU9XkR4KHfeOb7pVHiXwDPO8YeA4NPB7jnmv6jPFBFuchYsuqyVOhcU0+FBrXzH2xEct08Wy0sGom62JczrAf17yJsUY9n+F3YfBm0gemvjGfa3sh/J+Er1/HL4Kb5/P93O/38Pnqy88//OLixfryo1cvXq4+vfz45WevLp00fZzSQ23P4OOml3rfzsN3fr+2sBaoxu7FWrgqqQw+btbLiVbMRC8RW1dMjFWCNVXFzAWP2qfrpoq5/99U7Xi0vs5tdyMcRJT1kG69yEM+8b2N2yT0V665S6XIw6ngUfuo7WYGVus0qrfJmaHHOiFZsoqIsjKhsQ9GQhsQrSsfh0Kzduw33Wa+EozAue1tBvzfkMyvQ3/imjUoFxrX+4HQGLPedNg3PVkDaM41X6Gda9qU54NvbMzTnE10s99674T+yrBJipwdGna19k7YJ1ENublt7Bp4LD/zbYN9xvggq+u2wT7QfOacLYTGOdsXGues3gZ6Hevzfb0NcGxg7qiFXrbosvJe6wLzfxu+fv3fdeC5S94XBk7Q2H+V4LPiwYpP8I8Nft4/+qLbeu3qkpV16O56TbV0My6eq7rb4ho8eb2hcb761idazHrm4/pXwsEYfStIb5sfrbNBly0tP06Fn2131xzXPZvzSfPfeqHlfNG9l9fBOYh8t/b0jORiT7deEzVncEZpy3t+3WT+H0jfjx36UrxejmQN276Cgf/I4OdXKM09foE52kLWtEO39UJ21KGbcfFc1a04Mc/Ke9jmbeQ9vwZq3lt+tF4Pu2xp+XEq/Gy7FC+J1ksf4pfzJXPNeLlr3k9J7tPQT+nX07PNv5QhplA7tPWJzvw/h99sO0drO/+POK9OV4ur49XV6vFqvT65WO2LfN/4XBRb/3y5vnhyubw20emTxfLd9Zv0w6+DekPnPPVtGH57XLnBz+c25v8NvNd/v4f+zStu3dTn+f7q4Mtavq9lGGP9+vZYWTf587rJD91V3cQI2ohoXEN82w2/2V4sCzgK4f8z/IZPdmgO5k8N/Tui/xZuY4xrmMrKjTHwe//8AXnhy2uPfd97rVPk85hiQ+z4uP4H3Fjbx48sAAA=","debug_symbols":"7d3fbtowGAXwd8k1F/78332VaapoyyokBBWlk6aq7z4SkUBxRLR9nrPa56Yaqxvsn1ZyjmHJe/O0enh7vl9vf+xem7tv781m97g8rHfb46P3j0XzsF9vNuvn+8u/bkT7RYpu/OvLcts+fD0s94fmjrQLi2a1fTr+0Qh1PMKP9WbV3BnxsYgHC6v6wUTnwWTM2Ghv+8HBD2MVuZGxUuh+GlJYeR6t6OP7opGUe+7GDtORE3N3QZvTYBfC+cjSj81DOXEarJU+jx0bKiX1B5ZSqduD7TDWfh7a8knwcfgU+Dh8GnwcPgM+Dp8FH4fPgY/D58HH4QvgY/ApAT4OH1oHiw+tg8WH1sHi0+Dj8KF1sPjQOmITVInYBP0gNkHoj0w0knxsgngemyBzxyYI0rGJrtJEUT9lqaS9PZiM1gOGo2vAOvNxQsA6E3JCwDrjdELAOrN3QsA6g3o6QFNnqk8IWGcFSAhYZ19ICFhnuUgIqAHIA0QTYQKiiUwDhmF9lq43EwyaCBMQTYQJiCbCA7RoIkxANBEmYJ1nYaf7sdKZicHkguvX52lC29n+wM7qa+s6Xy7/mXUYLIKzV9auzlfWeazrfBGex7rOnaN5rOvcZJrHWsM6m3WdW1f/zJrEcGQSPlxrI2Hn1K5zU2wu7Tp30ObSRn/MqO3RIHNqo0Pm1EaLzKmNHplTW0P777VbQNRDJiAaHxMQJY4JiF7GBETVmgQMalhf0NeAAe2JCZigEJH3/WCpzQSgMaGfu/XyPPcQxgQt9YDufJFJOr7l3U5dft2pq687df11pz6dOGlq6lr0T0Bauk/PEI/2wvW/el7486EtjR5aXh778tc66FFFMSiSPH/sVSnTLdZmX6yyw2KNv71Y51U/D+eDmJAh7c2wVHPxSSTbXT82uP97qUYNS3X+eu7+C889VPNPjMR40Di+ZIXzj7mL39nyr4JDgmASmUiYRCYKJpGJhklkYmASmViYRCYOJpGJh0lkEmBybULIsbEJcmxsghwbm9SQY7uF6loWWkPi7BZaQ4zsFlpDNuwWWkPg6xZaQ4prFypriGbdQsvJW+muU0KynMSVUqWczJVSRUNlRKWcNJdSpZzol1KlnJyYUqWcUJlSpZwEmlBFlRNXU6og246p1Jptb10TiVSt2fa2iobKiEqt2fa2Sjl5ZZZLhZEu53Q1yzVOSJdzZpsJsJyT4EyA5ZwvZwIs59Q6E2A5O0wzAZazGTXT/8YnjSTIJixnm2suQlPOnthshGgkbEJ0EjYhWgmbUIOQS4hmEl8zgwzqxpgKOsSYCmrBmEqlSf/mlVDIVhreJ1QQJnlvsVhEyendMdnPOOgYEOd7JiCiARMQKYIJiK1FHqDDxiLvLRaHbUUmIHIgExA5cBrQ9wf+NOEToAYgDxDbiUxANJE/eQ0cAUQTYZ5E0ESYgGgiPECPJsIERBNhAqKJMAHRRJiAGoA8QDQRJiCaCBMQTYQJiCDNAwy4OWK+N+ED7o2Y782qgBvTZcTGTewyYuOGdxmxcXO8bNhS4EZ62aKfFLgLeUZs5OyM2MjZ2d6OlkIDOx82bleeERsNMtuHMqRAg8x4gkSDzIiNBpkPm9AgM2KjQWbERoPMiI0GmRFbAzsfNhpkRmw0yIzYaJAZsVFqMmF/HB/9XO7Xy4fN6vX4E+0337aPh/Vue3p4+PXSf+dhv95s1s/3L/vd4+rpbb+63+we2+814vTlm1S0kEZ+b29N3D6UciGlax9S99AvpBLHZz0+828=","names":["add_guardian_set"],"brillig_names":["add_guardian_set"]},{"name":"get_guardian_set_index","hash":"12389045118220877163","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VTyw6CMBBsBaJVufi46E+UAIEjB+8m+gUND08GY4xnPl2abEPZUGJCmaTZPmdnpy0lHShEl/RByR+gI3NniAziQlt32pbBmE9DwFBem/wpj2I2UJ9F/SEDTjoPP1f8M/nPl8BzaTp+vRaVd9W2rdb3oe+PnJ9Te3u3EdM4bfO3CPYG/RIb8OGIatX/lCUdsfT9AFzi+7y+8roo75/6LR7lrRSFnhPrJWhN71PDPmfAV+yBQ4bfPeZYGPLJdZ+Y35v0V/1dt+mfy2CeT0CScq7yOsDvoRoIyu+h/ScYrzX9KroTdFaJCKpQVCIWRRHlYof4CfLpB//ZxjwRBgAA","debug_symbols":"5ZTNioMwFIXf5a6zyM2v9VXKUKLGEghRog4M4rtPLE5G2tLuCqWbS074OJyzOTM0tprOJxfaboDyOIPvajO6LiQ1LwSq6Lx359P+G+h6UFz4oTdhlcNo4gglkxQJ2NCsT86SQ+u8hVLShdzAiEJuMKKmGUYl7tBaFmKjtaIy0wrvwbzgf7Bg7DGMyLXKQQQ97PEvAig/p6p6eVX9X5XRZ+kP2ZohZphzeQmv3zl88bbhlyS/TXSm8nbbjXYK9W5Gxp/eXi1KH7vaNlO067bsZiXdI0PCVLJN1r8=","names":["get_guardian_set_index"],"brillig_names":["get_guardian_set_index"]},{"name":"set_guardian_set_expiry","hash":"1518349258424076238","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"a","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUPQ+CMBAtH0Yr6iAx0X9RAggjg7uDg3PDh3EwGEKc+elKck0vl8aFcstduevre68NDtPhQPbJmhlmCshiWkQWsYSR6L9QMyfIHLKL+p5FsZycaxM/F0nKDfos8o85YM7pj8KcAV8sAecyaHyqhaGs5uiesb+FGr8zNbOCvqp3UHOyZ477n/F+RGjgr84KQGuIPKRcsFfc8K2ww/O8+WEcAEt+Xtd32Vb1rW87+ajv3bOvGQkX1ZQUFuEycwRM/zz8Qe+zZX6WC6E4eYC/YPqh4vBRH88fYb1GulT2J/BsMhk1sWxkKqsqKeWe4GPfRp++xfT11XIGAAA=","debug_symbols":"5ZLNaoUwFITfJesscvJ79FUu5RI1XgIhStRCEd+9SbFB2ku766abQyZ8DDMwOxlctz3uPo7TQtrbTsLU29VPMav9oKRLPgT/uF+/CSsH1Ae/zDYWuaw2raTlmilKXBzKU2B2GH1wpFXsoN9gkAxOGCQ3FQYtn9DIjDhpZCgqreGZNTD8tAYOFRZCHS+UgP7z8ELX8Ap/Dm9QNCdssGG/NZWoalXF9RUvVc0/qXpk9WqTt11w53rHLfaXMa9vs/uy6zlNvRu25MrCL+PO9wYN5TLbZut3","names":["set_guardian_set_expiry"],"brillig_names":["set_guardian_set_expiry"]},{"name":"set_evm_chain_id","hash":"6856270433178241212","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VTPQ+CMBBtpUYrMqhR/0YJEBgd3B0cnCsfxsFgCHHmpyvJNb00jQvtS8hx6fX1vUehRINCZUZPLDMnqGIaYodcwir0H9TMESqHOkPrgUOz3DjXJX8h0oxb/DnUn3Dg9JmP4vTALxbAcx40v+llRAQ9vkNqz/L3rIl+j+CdG3t8fFuP2YudRb86KwSvG8PrDOXjSMd9zHYPXPLzurzLtqqvfdvJR33rnn1NDGAR1NJTyxxGSPSPzwbiPNy8EEJpCIB/TvRlw2BoHc8foF8hX6qyCTqbXMZNIhuZyapKS7k1+HFuY05fE4EMmy4GAAA=","debug_symbols":"5dLRCoMgFAbgdznXXnhMy3qVGGFlIYiF1WBE7z4bLWSLvcBuDh75+FH4V2h1vfSVcd0wQVGuYIdGzWZwYVs3ArU31pq+iq+B7gP5y0+jcvs6zcrPUHCWJAS0a/ejyENCZ6yGQtCNfGHkFA+MnGUnxpRfaEmT9NCSCnnqFC9wJpP8wJnM6W+MyKV4PwQFS2N+I4DiT766he2uvFG11UcBusU1UR/mx6g/qjH6odHt4vVekqgfYZaYEcZCbIh+Ag==","names":["set_evm_chain_id"],"brillig_names":["set_evm_chain_id"]},{"name":"publishMessage","hash":"10763269669464303213","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"nonce","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"payload","type":{"kind":"array","length":24,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"consistencyLevel","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16644136947300891527":{"error_kind":"string","string":"invalid fee"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["publishMessage"],"brillig_names":["publishMessage"]},{"name":"useSequence","hash":"4689197371369135422","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"emitter","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["useSequence"],"brillig_names":["useSequence"]},{"name":"get_initialized_implementations","hash":"1854475135732226606","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"address","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VYS4sTQRDu2ZnJaxITHz9k8t49CAH1LOjNiwx5eJIVEQ+CMCh4EC/eBP2xpteuzZdvasZAug9bEHq6q7q+6np1k8j8o8j9LCWwxiRrKzfm59HYo648UuxsPIS24Y8bu268AH7s8eBdxRZf+i/z2aJrqmf2aP+063SG9I/oDKA/bzs9T8uDfj6LpYE5Lg7c03F8+R7CHkvPQLfsD+m3fdzngf02fmjqfSU596QMgj3NnJ8/ky8F3/jDykV3cr7uCS9ITqWgm/OjFSZ+c633xbSG+D2y1Xc+RYQn9rB/JN/Ed23F1pHCw7MhD3HaCs5d0iU5OjDVnI1qRsHhNfZzy6OutkddHQ+6pNbwrly5MT+PrsTOnmKn4Gaw7rGmZqfWuOD3yNZQNZ6RPewfjnFfsXWk8PAthTzE6Ss4mq7Io66YePiw7hEP+730va5ik8e4TLReEjVgG3/YuWB3GrAD3Tk5173vfJf8vVBiauP8mM4svNQcckz2WpL3VEryr0Hnyn0PFeyEeOjXFvGwB7SJlynnaaptXOM6wf0iF7ovcl8RDMQehME++d0l+D2j95OVH3tue/KA7MHYWOK78l6g2Ig9Q8Uerd/ed7ZwzNA+0YV9l+8R5HGOYk/uEw97Zo98hLVn/PlorPVMxMLzGMV/2POa+gTPU0WW368yT5T9IoO6RP6VG+2Zvrpva+8j9118fPv83fp6s3354fp98Wb7YltsIrJTqy2ea3ERimvOhLKxqfcB8qMGPJt7Wg/m+1fyKa3BxfsC5ddutHn7yX1reHwfYM/n+yBT7BQe5hXf41KHxjS/9ZrqHmv5grCx5ocn6EobsEeK/LABG+3CvYxd15tkLS4PPOwhlhLg+byHbJy+gR1oo6UUcOviiPKn+FKL44jk0Xdab06Jh715QDysJ+73mKeSv1gvkanmi1aDEqdT33oh47q8PPz5LTklvYMpAT7Kf3Fz7AUyJmfYuVsW49202BXzYrOZrYsHpN+A77IA+Plks15sJ3sXLRfjydXmf/iSg63ywMc6tdR2c2tXrMiLvpTkv4vs/vfDfUvupgqelfvdIBfVjDc6lLWkPF7rllX5uKzK375Jy6qNwsuAhz3EUt/N0V+oS+xISf6Xm0tMOrBH9o8U/A7hH9mtrFXuaUU+U+RtfH6KPjfi2X2/128wST+usW2SOzav/wJb2wpj6RsAAA==","debug_symbols":"7d3fSutAEAbwd8l1L3b2b9ZXORykapRCaaXWAwfx3U1KNqlNaC4mnVD2uxGjw2b2V5rutynkq3ipnj7fHje71/1H8fDnq9jun9fHzX5XH319r4qnw2a73bw9nv+5UM0P8qf6j/f1rjn8OK4Px+LBRB1WRbV7aX71rh7hdbOtigenvleDYlLetMVEZLpicm6s2vm2WCvd1RoKI7UhWtcWhxj7kXU51ocJqi22xva1Y6VaUxpYa2OuF/uu1v8u/bsqKICPw1eCj8MXwcfg0wp8HD4CH4dPg4/DZ8DH4bPg4/A58HH4kDpYfEgdLD6kDhYfUgeHzyB1sPiQOoYmiBJDE+SDoYmFycAEK/mhCZbnQxOsuYcmWEgPTfJcHRtKLWuj/fVictam+blAF4A2z/XxjIB5rpBnBMxzOT0jYJ5r7xkBLQB5gHmu6mcEzDMCzAiYZ16YETDPcDEjIJIID9AhiTABkUSmAWM3P0+XmwkOSYQJiCTCBLQA5AEiiTABkUR4gD7PT+FgU60ObqKYQkwYVNKEdvBp4ODtpXWel8ubWcfOIgZ/aZ3nlXUZ6zwvwstY57lztIx1nptMy1jnuR+1iHXIc+vqZtakupFJlfFSGytsSe08N8WW0s5zB20pbQttQW0kSEltZEhJbaRISW3kSEltJEmGdg1YIh4yAZH4mIAIcUxA5DImoAXgFGA03fyiHQAiPTEBZwhEVJbpBNq6CUDnYurdl7rvPcYxQU8JMJT9wPUt76b1cL+tl/fberzb1uP0ijPEqda7tzRRUL/OMNKNK9M3U4NX/UQ9jRWbMr1Pg9X6enF9oQq+a8SqeF7eTJXEpxr6qWp1vXsXdFvrznKVMe7Uur7f1s39to4PUrEvaEVsQs57E1qnjqMdWGObRsyaFLZ0BLGx/SOIja0iQWxsK4l9Sau+yQFsOWyssgWxscyeF7tMA/9quMXGrX5BbNzpF8RGgrzVNXuITUiQch+QhAQpiI0EKYiNBCmIbYEth40EKYiNBCmIjQQpiI0EKYiNBCmHnekDNRfCRqgRwv6uj/6tD5v107ZqH6j9+rl7Pnu+9vH/e3XxqO33w/65evk8VM1Dt/vnbTfvEDJ2VRM3L+LpsL4fR0adrlan/1J9aOqz1mf+AQ==","names":["get_initialized_implementations"],"brillig_names":["get_initialized_implementations"]},{"name":"get_evm_chain_id","hash":"10818664982273849710","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUyw6CMBBsBaMVuaCJfkYJEDhy8G6iX1B5eDIYYzzz6ZZkmy6NEBPKJM1u2TI7Ozwo0aAQXdIHJX+Ajlw7QmQQF6juyJXDnk9DyIy+NvkzHifsx3wW9UcMOOk8/Fzxz+Q/XwHPqdX8eBbVdy3XFuU+5P7I/XNql882ZojTNr9EuBvQ38EDHwJjVvxNWdJx63zfA5f4PM7Poimr67t5iXt1qUSJe5p6iVHDOR0455Ph98Aj+p/gtn1fcgvzphnnqq8D/EuifcdwUR2fP8B+g/Sr6E7QWacirCNRi0SUZVyIwOAnhk9frJE//akFAAA=","debug_symbols":"5ZJBCoMwEEXvMussMiZR61WkSNQogRAlaqGId29SrA2t9ALdDPnh8ZmBt0Kr6qWvtO2GCYpyBTM0ctaD9WndCNROG6P7Kv4GGgbyJz+N0oY4zdLNUHDGKAFl2/AUwjd02igoBN3IF4zIxQ4jZvSAMeUndCZyvtNZSt/VKZ7BLGcvmCfJbxiRZemxCKeXGL8SQPEnp24+3aTTsjZqF6BbbBP5MN9H9aHG6IZGtYtTQZLIDz9LzEnCfK2vfgA=","names":["get_evm_chain_id"],"brillig_names":["get_evm_chain_id"]},{"name":"get_sequences","hash":"12177143965001178473","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VYy6oTQRDtyczkMZOY+PiQyfu6EALqWtCduHDIw5VcEVFw44ALceNO0L81fe26OTmpGQPpXlgQerqruk51vbpJZP5S5H6WElhjkrWVG4vLaOxRVxEpdjYeQtvw2409N7aAH3s8eE+xxZf+q2K26JnTM3u0f9pzOkP6R3QG0F90nJ4n1UE/n8XSwBwXB+7pOr58D2GPpaegW/aH9Ns+7vPAfhvfN/W+kpx7XAXBnubOz5/Jl4Jv/GEVoju5XPeEFySnUtDN+dEOE7+51vtiWkP8jGz1nU8R4Yk97B/JN/FdR7F1pPDwbMhDnI6C8z/pkhwdmNOcjWpGweE19nPbo66OR11dD7qk1vCuXLmxuIyWYmem2Cm4Oax7rKnZuTUu+BnZGqrGc7KH/cMx7iu2jhQevqWQhzh9BUfTFXnUFRMPH9YZ8bDfS9/rKTZ5jMtE6yVRA7bxh10IdrcBO9CdU3Dd+853yd+WElMb50d0ZuGl5pBjsteSvKdSkn8FOlfue6hgJ8RDv7aJhz2gQ7xcOU9TbeMa1wnuF7nQfZH7imAg9iAM9tnvLsHPjN5PVn7sue3JA7IHY2OJ78o7gWIj9gwVe7R+e9fZwjFD+0QX9l2+R5DHOYo9uU887JkZ+Qhrz/jz0VjrmYiF5zGK/7DnNfUJnqeKLL9fZZ4o+0UGdYn8SzfaM1Xu29r7wH2XH98+e7e+3mxffLh+X77ZPt+Wm4js1GqL51pchGxOaL2R78UMzhCb+h6fkvxrN9p8+uS+NTzu09iLuU/nip3Cw3jz/Sr1YUzzG6ypHrHGWoSNtTg8Q1fagD1S5IcN2GgX7mXsup4ha3F14GFtW0qA5/N+sHH6CnZwb04Bty6OKH+OL7U4jkgefaf1zJR42DMHxMN64j6MeSr5i/USmdN80WpQ4nTuGyxkXJdXhz+lJaekdzAlwEf5L26OvUDG5AI7d8tyvJuWu3JebjazdXmP9BvwXR4Av5hs1ovtZO+i5WI8ebj5F77kYLs68LFOLXXc3NoVK/KiLyX5byK7/31335K7qYJn5X41yEU1440OZS2pjtd61al8XJ3K374Vq1MbhZcDD3uIpb6bo79Ql9iRkvxPN5eYdGGP7B8p+F3CP7JbWeP7Olfkc0XexueH6HMjnt33O/oGk/TjGtsmuWPz+g8WF8ccgRsAAA==","debug_symbols":"7d3fSutAEAbwd8l1Lnb2//oqh4NUjVIordR64CC+u0npptoEczHphLLfjRgZNpOfNJ1vW8hH9dQ8vL/cr7fPu7fq7s9Htdk9rg7r3bY9+visq4f9erNZv9x//3Oluh/kj/Vvr6ttd/h2WO0P1Z1Rkeqq2T61v5KidoXn9aap7pz6rAfFpLw5FROR6YvJubFq50/FWum+1lAYqQ3JulNxSOm8so5jfZigTsXW2HPtWKnWlBfW2pjfi31f63+W/q0rCuDj8EXwcfgS+Bh8WoGPw0fg4/Bp8HH4DPg4fBZ8HD4HPg4fUgeLD6mDxYfUweJD6uDwGaQOFh9Sx9AEUWJognwwNLEwGZhgkh+aYDwfmmDmHppgkB6alDkdG8ota6P978XkrM3X5wJdANoy5+MZAcuckGcELHOcnhGwzNl7RkALQB5gmVP9jIBlRoAZAcvMCzMClhkuZgREEuEBOiQRJiCSyDRg6q/P0+VmgkMSYQIiiTABLQB5gEgiTEAkER6gL/NdONhcq4ObKKaQQr6+SBPaweeFg7eX1mXeLq9mnXqLFPyldZl31mWsy7wJL2Nd5s7RMtZlbjItY13mftQi1qHMraurWZPqVyYV06U2JmxJ7TI3xZbSLnMHbSltC21BbSRISW1kSEltpEhJbeRISW0kSYZ2CxgRD5mASHxMQIQ4JiByGRPQAnAKMJn++pIdACI9MQFnCEQUYz6Btm4C0LmUe/dRn3tPaUzQ5zZCiOeF24+8u9bD7bYeb7f1dLOtp+mJk9xU6/1LmiioH2cY6cbF/M3U4NV5aU9jxSbm12mwWv9e3N6ogu8bsSp9L+8uFaON2PdtEqageT9T1LnjZAfW2L+Ts8bunZw19u7krLFzJ2ZNCrt8Yl+4aSWBLYeNEVsQGzP2vNgxL/yj4RO2BbYcNnYwBbERH691zx7BRn4UfINEgBTERoKUwyYkSEFsJEhBbCRIQWwkSEFsC2w5bCRIQWwkSEFsJEhBbIQaIezP9ujfar9ePWya08ORn9+3j9+elXz4/9pcPDb5db97bJ7e9033AOXzs5O7cESGanL6mEy7Q61r0uH4Pz0expqMas/anvkL","names":["get_sequences"],"brillig_names":["get_sequences"]},{"name":"get_guardian_set_expiry","hash":"3983550479205912239","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VTyQ6CMBBtWaJVubhc9CdKAOHIwbuJfkHD4slgjPHMpwvJNJQJJSaUlzTT9c2b15aSDhSiQ/qg5A/QkbkTRAbRUtbtpqUw5tPgM5TXJH/Cw4gN1GdQf8CAk87DzyX/TP7zBfBc6o5frUXmXTZto/Q96Hsj5+fU3txtyBRO0/wN/J1Gf4s1+HBAtap/ypCOc+v7HrjE93l9ZVVe3D/VWzyKWyFyNSfWS9Ca2qeaffaAr9gDmwy/e8xhafK16x7Rv7fWX/l3nbp/LoV5PgFxwrnMawO/i2ogKL+L9h9hvFL0y+hM0FnGwi8DUYpI5HmYiS3iJ8inH/w3n1URBgAA","debug_symbols":"5ZTNqsIwFITf5ayzyMlv7avIRdI2lUBIS9peuJS++01FY1HRnSBuDpnwMcxsZobGVtPx4ELbDVDuZ/BdbUbXhaTmhUAVnffueNh+A10PihM/9CaschhNHKFkGgUBG5r1KVRyaJ23UEq6kDsYUcgzjKhphlGJB7SWxcVaKyozrfARzAt+gQVjz2FErlUOIuhui/8QQPk9VdXbq+prVUZfpd9la4aYYc7lKbz+5PDFx4Zfkvw10ZnK2/NutFOoNzMy/vX2ZlH62NW2maJdt2UzK+nuGRKmkm2y/gc=","names":["get_guardian_set_expiry"],"brillig_names":["get_guardian_set_expiry"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Wormhole::get_guardian_set_index_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_guardian_set_index_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":32}}]},{"kind":"struct","path":"Wormhole::set_guardian_set_expiry_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::set_guardian_set_expiry_parameters","fields":[{"name":"a","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},{"kind":"struct","path":"Wormhole::get_provider_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_provider_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"structs::Provider","fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_contract","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Wormhole::get_consumed_governance_actions_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_consumed_governance_actions_parameters","fields":[{"name":"address","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"Wormhole::get_evm_chain_id_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_evm_chain_id_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::get_message_fee_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_message_fee_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::set_message_fee_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::set_message_fee_parameters","fields":[{"name":"a","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Wormhole::set_guardian_set_index_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::set_guardian_set_index_parameters","fields":[{"name":"a","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},{"kind":"struct","path":"Wormhole::get_sequences_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_sequences_parameters","fields":[{"name":"address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::set_initialized_implementation_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::set_initialized_implementation_parameters","fields":[{"name":"to","type":{"kind":"field"}},{"name":"ii","type":{"kind":"boolean"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::publishMessage_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::publishMessage_parameters","fields":[{"name":"nonce","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"payload","type":{"kind":"array","length":24,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"consistencyLevel","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},{"kind":"struct","path":"Wormhole::set_provider_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::set_provider_parameters","fields":[{"name":"a","type":{"kind":"struct","path":"structs::Provider","fields":[{"name":"chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_chain_id","type":{"kind":"integer","sign":"unsigned","width":16}},{"name":"governance_contract","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Wormhole::expire_guardian_set_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::expire_guardian_set_parameters","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"current_timestamp","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::add_consumed_governance_action_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::add_consumed_governance_action_parameters","fields":[{"name":"to","type":{"kind":"field"}},{"name":"cga","type":{"kind":"boolean"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::get_initialized_implementations_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_initialized_implementations_parameters","fields":[{"name":"address","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"Wormhole::get_guardian_set_expiry_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_guardian_set_expiry_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":32}}]},{"kind":"struct","path":"Wormhole::set_evm_chain_id_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::set_evm_chain_id_parameters","fields":[{"name":"a","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Wormhole::add_guardian_set_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::add_guardian_set_parameters","fields":[{"name":"to","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gs","type":{"kind":"struct","path":"structs::GuardianSet","fields":[{"name":"keys","type":{"kind":"field"}},{"name":"expiration_time","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::add_sequence_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::add_sequence_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sequence","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::useSequence_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::useSequence_parameters","fields":[{"name":"emitter","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Wormhole::get_guardian_sets_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Wormhole::get_guardian_sets_parameters","fields":[{"name":"address","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"return_type","type":{"kind":"struct","path":"structs::GuardianSet","fields":[{"name":"keys","type":{"kind":"field"}},{"name":"expiration_time","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Wormhole"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"provider","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"guardian_sets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"guardian_set_index","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"guardian_set_expiry","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"sequences","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"consumed_governance_actions","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"initialized_implementations","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}},{"name":"message_fee","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}},{"name":"evm_chain_id","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000b"}}]}}]}}]}]}},"file_map":{"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"mod structs;\n\n// docs:start:empty-contract\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Wormhole {\n    // docs:end:empty-contract\n    use crate::structs::{Provider, GuardianSet};\n\n    // docs:start:all-deps\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, internal, private, public},\n            storage::storage,\n        },\n        prelude::{Map, AztecAddress, PublicMutable, PrivateMutable},\n    };\n\n    use dep::aztec::protocol_types::{\n        storage::map::derive_storage_slot_in_map,\n        traits::ToField,\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        provider: PublicMutable<Provider, Context>,\n        guardian_sets: Map<u32, PublicMutable<GuardianSet, Context>, Context>,\n        guardian_set_index: PublicMutable<u32, Context>,\n        guardian_set_expiry: PublicMutable<u32, Context>,\n        sequences: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        consumed_governance_actions: Map<Field, PublicMutable<bool, Context>, Context>,\n        initialized_implementations: Map<Field, PublicMutable<bool, Context>, Context>,\n        message_fee: PublicMutable<Field, Context>,\n        evm_chain_id: PublicMutable<Field, Context>\n    }\n\n    #[public]\n    fn set_provider(a: Provider) {\n        storage.provider.write(a);\n    }\n\n    #[public]\n    fn get_provider() -> Provider {\n        storage.provider.read()\n    }\n\n    #[public]\n    fn add_guardian_set(to: u32, gs: GuardianSet) -> Field {\n        storage.guardian_sets.at(to).write(gs);\n        // returns storage slot for key\n        derive_storage_slot_in_map(storage.guardian_sets.storage_slot, to)\n    }\n\n    #[public]\n    fn get_guardian_sets(address: u32) -> GuardianSet {\n        storage.guardian_sets.at(address).read()\n    }\n\n    #[public]\n    fn expire_guardian_set(index: u32, current_timestamp: u32) -> Field {\n        // Get the guardian set\n        let mut guardian_set = storage.guardian_sets.at(index).read();\n        \n        // Update the expiration time\n        guardian_set.expiration_time = current_timestamp + 86400;\n        \n        // Write the updated guardian set back to storage\n        storage.guardian_sets.at(index).write(guardian_set);\n        \n        // Return storage slot for key\n        derive_storage_slot_in_map(storage.guardian_sets.storage_slot, index)\n    }\n\n    #[public]\n    fn set_guardian_set_index(a: u32) {\n        storage.guardian_set_index.write(a);\n    }\n\n    #[public]\n    fn get_guardian_set_index() -> u32 {\n        storage.guardian_set_index.read()\n    }\n\n    #[public]\n    fn set_guardian_set_expiry(a: u32) {\n        storage.guardian_set_expiry.write(a);\n    }\n\n    #[public]\n    fn get_guardian_set_expiry() -> u32 {\n        storage.guardian_set_expiry.read()\n    }\n\n    #[public]\n    fn add_sequence(to: AztecAddress, sequence: Field) -> Field {\n        storage.sequences.at(to).write(sequence);\n        // returns storage slot for key\n        derive_storage_slot_in_map(storage.sequences.storage_slot, to)\n    }\n\n    #[public]\n    fn get_sequences(address: AztecAddress) -> Field {\n        storage.sequences.at(address).read()\n    }\n\n    #[public]\n    fn add_consumed_governance_action(to: Field, cga: bool) -> Field {\n        storage.consumed_governance_actions.at(to).write(cga);\n        // returns storage slot for key\n        derive_storage_slot_in_map(storage.consumed_governance_actions.storage_slot, to)\n    }\n\n    #[public]\n    fn get_consumed_governance_actions(address: Field) -> bool {\n        storage.consumed_governance_actions.at(address).read()\n    }\n\n    #[public]\n    fn set_initialized_implementation(to: Field, ii: bool) -> Field {\n        storage.initialized_implementations.at(to).write(ii);\n        // returns storage slot for key\n        derive_storage_slot_in_map(storage.initialized_implementations.storage_slot, to)\n    }\n\n    #[public]\n    fn get_initialized_implementations(address: Field) -> bool {\n        storage.initialized_implementations.at(address).read()\n    }\n\n    #[public]\n    fn set_message_fee(a: Field) {\n        storage.message_fee.write(a);\n    }\n\n    #[public]\n    fn get_message_fee() -> Field {\n        storage.message_fee.read()\n    }\n\n    #[public]\n    fn set_evm_chain_id(a: Field) {\n        storage.evm_chain_id.write(a);\n    }\n\n    #[public]\n    fn get_evm_chain_id() -> Field {\n        storage.evm_chain_id.read()\n    }\n\n    // Publish a message to be attested by the Wormhole network\n    #[public]\n    fn publishMessage(\n        nonce: u32,\n        payload: [u8; 24], // size of payload needs investigation, looks like max size is Field's size unless we send multiple logs.\n        consistencyLevel: u8) {\n        // check fee\n        assert(context.transaction_fee() == get_message_fee(), \"invalid fee\");\n\n        let sequence = useSequence(context.msg_sender());\n        \n        // Create an array of Field elements\n        let message = [\n            context.msg_sender().to_field(),\n            sequence,  // Already a Field\n            Field::from(nonce),\n            Field::from(consistencyLevel),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload),\n            Field::from_be_bytes(payload)\n        ];\n        \n        // emit log\n        context.emit_public_log(message);\n    }\n\n    #[public]\n    fn useSequence(emitter: AztecAddress) -> Field {\n        let sequence = get_sequences(emitter);\n        add_sequence(emitter, sequence + 1);\n        sequence\n    }\n\n}","path":"/Users/stavrosvlachakis/AztecProjects/nethermindEth/wormhole/aztec/contracts/src/main.nr"},"61":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"63":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"89":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"96":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"99":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"138":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"155":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"164":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"280":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"294":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"317":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"331":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"335":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"336":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"355":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/stavrosvlachakis/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}